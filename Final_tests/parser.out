Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    ENUM
    SCOPE
    ILLEGAL_ID
    UNION
    ILLEGAL_INUMBER
    SINGLE_QUOTE
    DOUBLE_QUOTE
    ILLEGAL_DNUMBER
    BACK_SLASH
    TYPENAME

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> <empty>
Rule 2     translation_unit -> declaration_seq
Rule 3     new_scope -> <empty>
Rule 4     finish_scope -> <empty>
Rule 5     set_class_scope -> <empty>
Rule 6     unset_class_scope -> <empty>
Rule 7     function_scope -> <empty>
Rule 8     unset_function_scope -> <empty>
Rule 9     declaration_seq -> declaration
Rule 10    declaration_seq -> declaration_seq declaration
Rule 11    literal -> INUMBER
Rule 12    literal -> DNUMBER
Rule 13    literal -> LIT_CHAR
Rule 14    literal -> LIT_STR
Rule 15    literal -> TRUE
Rule 16    literal -> FALSE
Rule 17    primary_expression -> literal
Rule 18    primary_expression -> THIS
Rule 19    primary_expression -> LPAREN expression RPAREN
Rule 20    primary_expression -> id_expression
Rule 21    id_expression -> unqualified_id
Rule 22    unqualified_id -> IDENTIFIER
Rule 23    unqualified_id -> operator_function_id
Rule 24    unqualified_id -> conversion_function_id
Rule 25    unqualified_id -> TILDE class_name
Rule 26    postfix_expression -> primary_expression
Rule 27    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 28    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 29    postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 30    postfix_expression -> postfix_expression PLUS_PLUS
Rule 31    postfix_expression -> postfix_expression MINUS_MINUS
Rule 32    postfix_expression -> postfix_expression DOT id_expression
Rule 33    expression_list -> assignment_expression
Rule 34    expression_list -> expression_list COMMA assignment_expression
Rule 35    expression_list_opt -> <empty>
Rule 36    expression_list_opt -> expression_list
Rule 37    unary_expression -> postfix_expression
Rule 38    unary_expression -> PLUS_PLUS cast_expression
Rule 39    unary_expression -> MINUS_MINUS cast_expression
Rule 40    unary_expression -> unary_operator cast_expression
Rule 41    unary_expression -> SIZEOF unary_expression
Rule 42    unary_expression -> SIZEOF LPAREN type_id RPAREN
Rule 43    unary_expression -> new_expression
Rule 44    unary_expression -> delete_expression
Rule 45    unary_operator -> TIMES
Rule 46    unary_operator -> AMPERSAND
Rule 47    unary_operator -> PLUS
Rule 48    unary_operator -> MINUS
Rule 49    unary_expression -> EXCLAMATION
Rule 50    unary_expression -> TILDE
Rule 51    new_expression -> NEW new_placement_opt new_type_id new_initializer_opt
Rule 52    new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
Rule 53    new_placement -> LPAREN expression_list RPAREN
Rule 54    new_placement_opt -> <empty>
Rule 55    new_placement_opt -> new_placement
Rule 56    new_type_id -> type_specifier_seq new_declarator_opt
Rule 57    new_declarator_opt -> <empty>
Rule 58    new_declarator_opt -> ptr_operator new_declarator_opt
Rule 59    new_declarator_opt -> direct_new_declarator
Rule 60    direct_new_declarator -> LBRACKET expression RBRACKET
Rule 61    direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET
Rule 62    new_initializer_opt -> <empty>
Rule 63    new_initializer_opt -> LPAREN expression_list_opt RPAREN
Rule 64    delete_expression -> DELETE cast_expression
Rule 65    delete_expression -> DELETE LBRACKET RBRACKET cast_expression
Rule 66    cast_expression -> unary_expression
Rule 67    cast_expression -> LPAREN type_id RPAREN cast_expression
Rule 68    multiplicative_expression -> cast_expression
Rule 69    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 70    multiplicative_expression -> multiplicative_expression DIV cast_expression
Rule 71    multiplicative_expression -> multiplicative_expression MODULO cast_expression
Rule 72    additive_expression -> multiplicative_expression
Rule 73    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 74    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 75    relational_expression -> additive_expression
Rule 76    relational_expression -> relational_expression LESS additive_expression
Rule 77    relational_expression -> relational_expression GREATER additive_expression
Rule 78    relational_expression -> relational_expression LESS_EQ additive_expression
Rule 79    relational_expression -> relational_expression GREATER_EQ additive_expression
Rule 80    equality_expression -> relational_expression
Rule 81    equality_expression -> equality_expression IS_EQ relational_expression
Rule 82    equality_expression -> equality_expression NOT_EQ relational_expression
Rule 83    logical_and_expression -> equality_expression
Rule 84    logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression
Rule 85    logical_or_expression -> logical_and_expression
Rule 86    logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression
Rule 87    conditional_expression -> logical_or_expression
Rule 88    conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression
Rule 89    assignment_expression -> conditional_expression
Rule 90    assignment_expression -> malloc_statement
Rule 91    assignment_expression -> logical_or_expression assignment_operator assignment_expression
Rule 92    assignment_operator -> ASSIGN
Rule 93    assignment_operator -> EQ_TIMES
Rule 94    assignment_operator -> EQ_DIV
Rule 95    assignment_operator -> EQ_MODULO
Rule 96    assignment_operator -> EQ_PLUS
Rule 97    assignment_operator -> EQ_MINUS
Rule 98    expression -> assignment_expression
Rule 99    expression -> expression COMMA assignment_expression
Rule 100   constant_expression -> conditional_expression
Rule 101   constant_expression_opt -> <empty>
Rule 102   constant_expression_opt -> constant_expression
Rule 103   statement -> labeled_statement
Rule 104   statement -> expression_statement
Rule 105   statement -> compound_statement
Rule 106   statement -> selection_statement
Rule 107   statement -> iteration_statement
Rule 108   statement -> jump_statement
Rule 109   statement -> declaration_statement
Rule 110   statement -> print_statement
Rule 111   statement -> scan_statement
Rule 112   labeled_statement -> IDENTIFIER COLON statement
Rule 113   labeled_statement -> CASE constant_expression COLON statement
Rule 114   labeled_statement -> DEFAULT COLON statement
Rule 115   expression_statement -> SEMICOLON
Rule 116   expression_statement -> expression SEMICOLON
Rule 117   compound_statement -> LBRACE RBRACE
Rule 118   compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE
Rule 119   statement_seq -> statement
Rule 120   statement_seq -> statement_seq statement
Rule 121   selection_statement -> IF LPAREN condition RPAREN statement
Rule 122   selection_statement -> IF LPAREN condition RPAREN statement ELSE statement
Rule 123   selection_statement -> SWITCH LPAREN condition RPAREN statement
Rule 124   condition -> expression
Rule 125   condition -> type_specifier_seq declarator ASSIGN assignment_expression
Rule 126   iteration_statement -> WHILE LPAREN condition RPAREN statement
Rule 127   iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON
Rule 128   iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
Rule 129   iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
Rule 130   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
Rule 131   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 132   scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
Rule 133   print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON
Rule 134   malloc_statement -> MALLOC LPAREN postfix_expression RPAREN
Rule 135   for_init_statement -> expression_statement
Rule 136   for_init_statement -> simple_declaration
Rule 137   jump_statement -> BREAK
Rule 138   jump_statement -> CONTINUE
Rule 139   jump_statement -> RETURN expression SEMICOLON
Rule 140   jump_statement -> RETURN SEMICOLON
Rule 141   declaration_statement -> block_declaration
Rule 142   declaration -> block_declaration
Rule 143   declaration -> function_definition
Rule 144   block_declaration -> simple_declaration
Rule 145   simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON
Rule 146   simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON
Rule 147   simple_declaration -> decl_specifier_seq SEMICOLON
Rule 148   decl_specifier_seq -> decl_specifier
Rule 149   decl_specifier -> storage_class_specifier
Rule 150   decl_specifier -> type_specifier
Rule 151   decl_specifier -> function_specifier
Rule 152   storage_class_specifier -> AUTO
Rule 153   storage_class_specifier -> EXTERN
Rule 154   function_specifier -> INLINE
Rule 155   type_specifier -> simple_type_specifier
Rule 156   type_specifier -> class_specifier
Rule 157   simple_type_specifier -> BOOL
Rule 158   simple_type_specifier -> CHAR
Rule 159   simple_type_specifier -> INT
Rule 160   simple_type_specifier -> FLOAT
Rule 161   simple_type_specifier -> DOUBLE
Rule 162   simple_type_specifier -> VOID
Rule 163   type_name -> class_name
Rule 164   elaborated_type_specifier -> class_key IDENTIFIER
Rule 165   init_declarator_list -> init_declarator
Rule 166   init_declarator_list -> init_declarator_list COMMA mark_1 init_declarator
Rule 167   mark_1 -> <empty>
Rule 168   init_declarator -> declarator initializer_opt
Rule 169   declarator -> direct_declarator
Rule 170   declarator -> ptr_operator declarator
Rule 171   direct_declarator -> declarator_id
Rule 172   direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN
Rule 173   direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 174   direct_declarator -> LPAREN declarator RPAREN
Rule 175   ptr_operator -> TIMES
Rule 176   ptr_operator -> AMPERSAND
Rule 177   cv_qualifier_seq_opt -> <empty>
Rule 178   declarator_id -> id_expression
Rule 179   type_id -> type_specifier_seq abstract_declarator_opt
Rule 180   type_specifier_seq -> type_specifier
Rule 181   type_specifier_seq -> type_specifier type_specifier_seq
Rule 182   abstract_declarator -> ptr_operator abstract_declarator_opt
Rule 183   abstract_declarator -> direct_abstract_declarator
Rule 184   abstract_declarator_opt -> <empty>
Rule 185   abstract_declarator_opt -> abstract_declarator
Rule 186   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
Rule 187   direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
Rule 188   direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET
Rule 189   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 190   direct_abstract_declarator_opt -> <empty>
Rule 191   direct_abstract_declarator_opt -> direct_abstract_declarator
Rule 192   parameter_declaration_clause -> <empty>
Rule 193   parameter_declaration_clause -> parameter_declaration_list
Rule 194   parameter_declaration_clause -> parameter_declaration_list ELLIPSIS
Rule 195   parameter_declaration_clause -> parameter_declaration_list COMMA ELLIPSIS
Rule 196   parameter_declaration_list -> parameter_declaration
Rule 197   parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration
Rule 198   parameter_declaration -> decl_specifier_seq declarator
Rule 199   parameter_declaration -> decl_specifier_seq declarator ASSIGN assignment_expression
Rule 200   parameter_declaration -> decl_specifier_seq abstract_declarator_opt
Rule 201   parameter_declaration -> decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression
Rule 202   function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope
Rule 203   function_body -> compound_statement
Rule 204   initializer_opt -> <empty>
Rule 205   initializer_opt -> ASSIGN initializer_clause
Rule 206   initializer_opt -> LPAREN expression_list RPAREN
Rule 207   initializer_clause -> assignment_expression
Rule 208   initializer_clause -> LBRACE initializer_list RBRACE
Rule 209   initializer_clause -> LBRACE RBRACE
Rule 210   initializer_list -> initializer_clause
Rule 211   initializer_list -> initializer_list COMMA initializer_clause
Rule 212   class_name -> IDENTIFIER
Rule 213   class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
Rule 214   class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
Rule 215   class_head -> class_key IDENTIFIER base_clause_opt
Rule 216   class_key -> CLASS
Rule 217   class_key -> STRUCT
Rule 218   member_specification -> member_declaration
Rule 219   member_specification -> member_declaration member_specification
Rule 220   member_specification -> access_specifier COLON member_specification
Rule 221   member_specification -> access_specifier COLON
Rule 222   member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON
Rule 223   member_declaration -> decl_specifier_seq SEMICOLON
Rule 224   member_declaration -> member_declarator_list SEMICOLON
Rule 225   member_declaration -> SEMICOLON
Rule 226   member_declaration -> function_definition SEMICOLON
Rule 227   member_declaration -> function_definition
Rule 228   member_declarator_list -> member_declarator
Rule 229   member_declarator_list -> member_declarator_list COMMA mark_2 member_declarator
Rule 230   mark_2 -> <empty>
Rule 231   member_declarator -> declarator
Rule 232   member_declarator -> declarator constant_initializer
Rule 233   member_declarator -> IDENTIFIER COLON constant_expression
Rule 234   member_declarator -> COLON constant_expression
Rule 235   constant_initializer -> ASSIGN constant_expression
Rule 236   base_clause_opt -> <empty>
Rule 237   base_clause_opt -> COLON base_specifier_list
Rule 238   base_specifier_list -> base_specifier_list COMMA base_specifier
Rule 239   base_specifier_list -> base_specifier
Rule 240   base_specifier -> class_name
Rule 241   base_specifier -> access_specifier class_name
Rule 242   access_specifier -> PUBLIC
Rule 243   access_specifier -> PRIVATE
Rule 244   access_specifier -> PROTECTED
Rule 245   conversion_function_id -> OPERATOR conversion_type_id
Rule 246   conversion_type_id -> type_specifier_seq
Rule 247   conversion_type_id -> type_specifier_seq conversion_declarator
Rule 248   conversion_declarator -> ptr_operator
Rule 249   conversion_declarator -> ptr_operator conversion_declarator
Rule 250   ctor_initializer_opt -> <empty>
Rule 251   ctor_initializer_opt -> COLON mem_initializer_list
Rule 252   mem_initializer_list -> mem_initializer
Rule 253   mem_initializer_list -> mem_initializer COMMA mem_initializer_list
Rule 254   mem_initializer -> mem_initializer_id LPAREN expression_list RPAREN
Rule 255   mem_initializer -> mem_initializer_id LPAREN RPAREN
Rule 256   mem_initializer_id -> class_name
Rule 257   mem_initializer_id -> IDENTIFIER
Rule 258   operator_function_id -> OPERATOR operator
Rule 259   operator -> PLUS
Rule 260   operator -> MINUS
Rule 261   operator -> TIMES
Rule 262   operator -> DIV
Rule 263   operator -> MODULO
Rule 264   operator -> CARET
Rule 265   operator -> AMPERSAND
Rule 266   operator -> PIPE
Rule 267   operator -> TILDE
Rule 268   operator -> EXCLAMATION
Rule 269   operator -> ASSIGN
Rule 270   operator -> LESS
Rule 271   operator -> GREATER
Rule 272   operator -> EQ_PLUS
Rule 273   operator -> EQ_MINUS
Rule 274   operator -> EQ_TIMES
Rule 275   operator -> EQ_DIV
Rule 276   operator -> EQ_MODULO
Rule 277   operator -> ARROW
Rule 278   operator -> IS_EQ
Rule 279   operator -> NOT_EQ
Rule 280   operator -> LESS_EQ
Rule 281   operator -> GREATER_EQ
Rule 282   operator -> DOUBLE_AMPERSAND
Rule 283   operator -> DOUBLE_PIPE
Rule 284   operator -> PLUS_PLUS
Rule 285   operator -> MINUS_MINUS
Rule 286   operator -> COMMA
Rule 287   operator -> LPAREN RPAREN
Rule 288   operator -> LBRACKET RBRACKET

Terminals, with rules where they appear

AMPERSAND            : 46 176 265
ARROW                : 277
ASSIGN               : 92 125 199 201 205 235 269
AUTO                 : 152
BACK_SLASH           : 
BOOL                 : 157
BREAK                : 137
CARET                : 264
CASE                 : 113
CHAR                 : 158
CLASS                : 216
COLON                : 88 112 113 114 220 221 233 234 237 251
COMMA                : 34 99 166 195 197 211 229 238 253 286
COMMENT              : 
CONTINUE             : 138
DEFAULT              : 114
DELETE               : 64 65
DIV                  : 70 262
DNUMBER              : 12
DO                   : 127
DOT                  : 32
DOUBLE               : 161
DOUBLE_AMPERSAND     : 84 282
DOUBLE_PIPE          : 86 283
DOUBLE_QUOTE         : 
ELLIPSIS             : 194 195
ELSE                 : 122
ENUM                 : 
EQ_DIV               : 94 275
EQ_MINUS             : 97 273
EQ_MODULO            : 95 276
EQ_PLUS              : 96 272
EQ_TIMES             : 93 274
EXCLAMATION          : 49 268
EXTERN               : 153
FALSE                : 16
FLOAT                : 160
FOR                  : 128 129 130 131
GREATER              : 77 271
GREATER_EQ           : 79 281
IDENTIFIER           : 22 112 132 146 164 212 215 233 257
IF                   : 121 122
ILLEGAL_DNUMBER      : 
ILLEGAL_ID           : 
ILLEGAL_INUMBER      : 
INLINE               : 154
INT                  : 159
INUMBER              : 11
IS_EQ                : 81 278
LBRACE               : 117 118 208 209 213 214
LBRACKET             : 27 60 61 65 173 188 288
LESS                 : 76 270
LESS_EQ              : 78 280
LIT_CHAR             : 13
LIT_STR              : 14
LPAREN               : 19 28 29 42 52 53 63 67 121 122 123 126 127 128 129 130 131 132 133 134 172 174 186 187 189 206 254 255 287
MALLOC               : 134
MINUS                : 48 74 260
MINUS_MINUS          : 31 39 285
MODULO               : 71 263
NEW                  : 51 52
NOT_EQ               : 82 279
OPERATOR             : 245 258
PIPE                 : 266
PLUS                 : 47 73 259
PLUS_PLUS            : 30 38 284
PRINT                : 133
PRIVATE              : 243
PROTECTED            : 244
PUBLIC               : 242
QUESTION             : 88
RBRACE               : 117 118 208 209 213 214
RBRACKET             : 27 60 61 65 173 188 288
RETURN               : 139 140
RPAREN               : 19 28 29 42 52 53 63 67 121 122 123 126 127 128 129 130 131 132 133 134 172 174 186 187 189 206 254 255 287
SCAN                 : 132
SCOPE                : 
SEMICOLON            : 115 116 127 128 129 130 131 132 133 139 140 145 146 147 222 223 224 225 226
SINGLE_QUOTE         : 
SIZEOF               : 41 42
STRUCT               : 217
SWITCH               : 123
THIS                 : 18
TILDE                : 25 50 267
TIMES                : 45 69 175 261
TRUE                 : 15
TYPENAME             : 
UNION                : 
VOID                 : 162
WHILE                : 126 127
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 185 189
abstract_declarator_opt : 179 182 200 201
access_specifier     : 220 221 241
additive_expression  : 73 74 75 76 77 78 79
assignment_expression : 33 34 88 91 98 99 125 199 201 207
assignment_operator  : 91
base_clause_opt      : 215
base_specifier       : 238 239
base_specifier_list  : 237 238
block_declaration    : 141 142
cast_expression      : 38 39 40 64 65 67 68 69 70 71
class_head           : 213 214
class_key            : 164 215
class_name           : 25 163 240 241 256
class_specifier      : 156
compound_statement   : 105 203
condition            : 121 122 123 126 127 128 129
conditional_expression : 89 100
constant_expression  : 61 102 113 233 234 235
constant_expression_opt : 173 188
constant_initializer : 232
conversion_declarator : 247 249
conversion_function_id : 24
conversion_type_id   : 245
ctor_initializer_opt : 
cv_qualifier_seq_opt : 186 187
decl_specifier       : 148
decl_specifier_seq   : 145 147 198 199 200 201 202 222 223
declaration          : 9 10
declaration_seq      : 2 10
declaration_statement : 109
declarator           : 125 168 170 174 198 199 202 231 232
declarator_id        : 171
delete_expression    : 44
direct_abstract_declarator : 183 186 191
direct_abstract_declarator_opt : 188
direct_declarator    : 169 172 173
direct_new_declarator : 59 61
elaborated_type_specifier : 
equality_expression  : 81 82 83 84
expression           : 19 27 60 88 99 116 124 128 130 139
expression_list      : 29 34 36 53 206 254
expression_list_opt  : 63
expression_statement : 104 135
finish_scope         : 118 213 214
for_init_statement   : 128 129 130 131
function_body        : 202
function_definition  : 143 226 227
function_scope       : 202
function_specifier   : 151
id_expression        : 20 32 178
init_declarator      : 165 166
init_declarator_list : 145 146 166
initializer_clause   : 205 210 211
initializer_list     : 208 211
initializer_opt      : 168
iteration_statement  : 107
jump_statement       : 108
labeled_statement    : 103
literal              : 17
logical_and_expression : 84 85 86
logical_or_expression : 86 87 88 91
malloc_statement     : 90
mark_1               : 166
mark_2               : 229
mem_initializer      : 252 253
mem_initializer_id   : 254 255
mem_initializer_list : 251 253
member_declaration   : 218 219
member_declarator    : 228 229
member_declarator_list : 222 224 229
member_specification : 213 219 220
multiplicative_expression : 69 70 71 72 73 74
new_declarator_opt   : 56 58
new_expression       : 43
new_initializer_opt  : 51 52
new_placement        : 55
new_placement_opt    : 51 52
new_scope            : 118 213 214
new_type_id          : 51
operator             : 258
operator_function_id : 23
parameter_declaration : 196 197
parameter_declaration_clause : 172 186 187
parameter_declaration_list : 193 194 195 197
postfix_expression   : 27 28 29 30 31 32 37 133 134
primary_expression   : 26
print_statement      : 110
ptr_operator         : 58 170 182 248 249
relational_expression : 76 77 78 79 80 81 82
scan_statement       : 111
selection_statement  : 106
set_class_scope      : 213 214
simple_declaration   : 136 144
simple_type_specifier : 155
statement            : 112 113 114 119 120 121 122 122 123 126 127 128 129 130 131
statement_seq        : 118 120
storage_class_specifier : 149
translation_unit     : 0
type_id              : 42 52 67
type_name            : 
type_specifier       : 150 180 181
type_specifier_seq   : 56 125 179 181 246 247
unary_expression     : 41 66
unary_operator       : 40
unqualified_id       : 21
unset_class_scope    : 213 214
unset_function_scope : 202

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> .
    (2) translation_unit -> . declaration_seq
    (9) declaration_seq -> . declaration
    (10) declaration_seq -> . declaration_seq declaration
    (142) declaration -> . block_declaration
    (143) declaration -> . function_definition
    (144) block_declaration -> . simple_declaration
    (202) function_definition -> . decl_specifier_seq declarator function_scope function_body unset_function_scope
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (148) decl_specifier_seq -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    $end            reduce using rule 1 (translation_unit -> .)
    IDENTIFIER      shift and go to state 13
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    declaration_seq                shift and go to state 3
    set_class_scope                shift and go to state 15
    function_specifier             shift and go to state 8
    simple_declaration             shift and go to state 9
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    decl_specifier_seq             shift and go to state 12
    translation_unit               shift and go to state 14
    decl_specifier                 shift and go to state 16
    function_definition            shift and go to state 18
    block_declaration              shift and go to state 22

state 1

    (149) decl_specifier -> storage_class_specifier .

    SEMICOLON       reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    LPAREN          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    TIMES           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    AMPERSAND       reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    TILDE           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    OPERATOR        reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    ASSIGN          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    LBRACKET        reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    ELLIPSIS        reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    COMMA           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    RPAREN          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    COLON           reduce using rule 149 (decl_specifier -> storage_class_specifier .)


state 2

    (156) type_specifier -> class_specifier .

    SEMICOLON       reduce using rule 156 (type_specifier -> class_specifier .)
    LPAREN          reduce using rule 156 (type_specifier -> class_specifier .)
    TIMES           reduce using rule 156 (type_specifier -> class_specifier .)
    AMPERSAND       reduce using rule 156 (type_specifier -> class_specifier .)
    IDENTIFIER      reduce using rule 156 (type_specifier -> class_specifier .)
    TILDE           reduce using rule 156 (type_specifier -> class_specifier .)
    OPERATOR        reduce using rule 156 (type_specifier -> class_specifier .)
    BOOL            reduce using rule 156 (type_specifier -> class_specifier .)
    CHAR            reduce using rule 156 (type_specifier -> class_specifier .)
    INT             reduce using rule 156 (type_specifier -> class_specifier .)
    FLOAT           reduce using rule 156 (type_specifier -> class_specifier .)
    DOUBLE          reduce using rule 156 (type_specifier -> class_specifier .)
    VOID            reduce using rule 156 (type_specifier -> class_specifier .)
    CLASS           reduce using rule 156 (type_specifier -> class_specifier .)
    STRUCT          reduce using rule 156 (type_specifier -> class_specifier .)
    LBRACKET        reduce using rule 156 (type_specifier -> class_specifier .)
    DIV             reduce using rule 156 (type_specifier -> class_specifier .)
    MODULO          reduce using rule 156 (type_specifier -> class_specifier .)
    PLUS            reduce using rule 156 (type_specifier -> class_specifier .)
    MINUS           reduce using rule 156 (type_specifier -> class_specifier .)
    LESS            reduce using rule 156 (type_specifier -> class_specifier .)
    GREATER         reduce using rule 156 (type_specifier -> class_specifier .)
    LESS_EQ         reduce using rule 156 (type_specifier -> class_specifier .)
    GREATER_EQ      reduce using rule 156 (type_specifier -> class_specifier .)
    IS_EQ           reduce using rule 156 (type_specifier -> class_specifier .)
    NOT_EQ          reduce using rule 156 (type_specifier -> class_specifier .)
    DOUBLE_AMPERSAND reduce using rule 156 (type_specifier -> class_specifier .)
    QUESTION        reduce using rule 156 (type_specifier -> class_specifier .)
    DOUBLE_PIPE     reduce using rule 156 (type_specifier -> class_specifier .)
    RBRACKET        reduce using rule 156 (type_specifier -> class_specifier .)
    ASSIGN          reduce using rule 156 (type_specifier -> class_specifier .)
    EQ_TIMES        reduce using rule 156 (type_specifier -> class_specifier .)
    EQ_DIV          reduce using rule 156 (type_specifier -> class_specifier .)
    EQ_MODULO       reduce using rule 156 (type_specifier -> class_specifier .)
    EQ_PLUS         reduce using rule 156 (type_specifier -> class_specifier .)
    EQ_MINUS        reduce using rule 156 (type_specifier -> class_specifier .)
    RPAREN          reduce using rule 156 (type_specifier -> class_specifier .)
    COMMA           reduce using rule 156 (type_specifier -> class_specifier .)
    RBRACE          reduce using rule 156 (type_specifier -> class_specifier .)
    COLON           reduce using rule 156 (type_specifier -> class_specifier .)
    ELLIPSIS        reduce using rule 156 (type_specifier -> class_specifier .)
    LBRACE          reduce using rule 156 (type_specifier -> class_specifier .)
    PLUS_PLUS       reduce using rule 156 (type_specifier -> class_specifier .)
    MINUS_MINUS     reduce using rule 156 (type_specifier -> class_specifier .)
    DOT             reduce using rule 156 (type_specifier -> class_specifier .)


state 3

    (2) translation_unit -> declaration_seq .
    (10) declaration_seq -> declaration_seq . declaration
    (142) declaration -> . block_declaration
    (143) declaration -> . function_definition
    (144) block_declaration -> . simple_declaration
    (202) function_definition -> . decl_specifier_seq declarator function_scope function_body unset_function_scope
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (148) decl_specifier_seq -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    $end            reduce using rule 2 (translation_unit -> declaration_seq .)
    IDENTIFIER      shift and go to state 13
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    set_class_scope                shift and go to state 15
    function_specifier             shift and go to state 8
    simple_declaration             shift and go to state 9
    declaration                    shift and go to state 25
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    decl_specifier_seq             shift and go to state 12
    decl_specifier                 shift and go to state 16
    function_definition            shift and go to state 18
    block_declaration              shift and go to state 22

state 4

    (162) simple_type_specifier -> VOID .

    SEMICOLON       reduce using rule 162 (simple_type_specifier -> VOID .)
    LPAREN          reduce using rule 162 (simple_type_specifier -> VOID .)
    TIMES           reduce using rule 162 (simple_type_specifier -> VOID .)
    AMPERSAND       reduce using rule 162 (simple_type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 162 (simple_type_specifier -> VOID .)
    TILDE           reduce using rule 162 (simple_type_specifier -> VOID .)
    OPERATOR        reduce using rule 162 (simple_type_specifier -> VOID .)
    BOOL            reduce using rule 162 (simple_type_specifier -> VOID .)
    CHAR            reduce using rule 162 (simple_type_specifier -> VOID .)
    INT             reduce using rule 162 (simple_type_specifier -> VOID .)
    FLOAT           reduce using rule 162 (simple_type_specifier -> VOID .)
    DOUBLE          reduce using rule 162 (simple_type_specifier -> VOID .)
    VOID            reduce using rule 162 (simple_type_specifier -> VOID .)
    CLASS           reduce using rule 162 (simple_type_specifier -> VOID .)
    STRUCT          reduce using rule 162 (simple_type_specifier -> VOID .)
    LBRACKET        reduce using rule 162 (simple_type_specifier -> VOID .)
    ASSIGN          reduce using rule 162 (simple_type_specifier -> VOID .)
    LBRACE          reduce using rule 162 (simple_type_specifier -> VOID .)
    COMMA           reduce using rule 162 (simple_type_specifier -> VOID .)
    RPAREN          reduce using rule 162 (simple_type_specifier -> VOID .)
    PLUS_PLUS       reduce using rule 162 (simple_type_specifier -> VOID .)
    MINUS_MINUS     reduce using rule 162 (simple_type_specifier -> VOID .)
    DOT             reduce using rule 162 (simple_type_specifier -> VOID .)
    DIV             reduce using rule 162 (simple_type_specifier -> VOID .)
    MODULO          reduce using rule 162 (simple_type_specifier -> VOID .)
    PLUS            reduce using rule 162 (simple_type_specifier -> VOID .)
    MINUS           reduce using rule 162 (simple_type_specifier -> VOID .)
    LESS            reduce using rule 162 (simple_type_specifier -> VOID .)
    GREATER         reduce using rule 162 (simple_type_specifier -> VOID .)
    LESS_EQ         reduce using rule 162 (simple_type_specifier -> VOID .)
    GREATER_EQ      reduce using rule 162 (simple_type_specifier -> VOID .)
    IS_EQ           reduce using rule 162 (simple_type_specifier -> VOID .)
    NOT_EQ          reduce using rule 162 (simple_type_specifier -> VOID .)
    DOUBLE_AMPERSAND reduce using rule 162 (simple_type_specifier -> VOID .)
    QUESTION        reduce using rule 162 (simple_type_specifier -> VOID .)
    DOUBLE_PIPE     reduce using rule 162 (simple_type_specifier -> VOID .)
    RBRACKET        reduce using rule 162 (simple_type_specifier -> VOID .)
    EQ_TIMES        reduce using rule 162 (simple_type_specifier -> VOID .)
    EQ_DIV          reduce using rule 162 (simple_type_specifier -> VOID .)
    EQ_MODULO       reduce using rule 162 (simple_type_specifier -> VOID .)
    EQ_PLUS         reduce using rule 162 (simple_type_specifier -> VOID .)
    EQ_MINUS        reduce using rule 162 (simple_type_specifier -> VOID .)
    RBRACE          reduce using rule 162 (simple_type_specifier -> VOID .)
    COLON           reduce using rule 162 (simple_type_specifier -> VOID .)
    ELLIPSIS        reduce using rule 162 (simple_type_specifier -> VOID .)


state 5

    (9) declaration_seq -> declaration .

    IDENTIFIER      reduce using rule 9 (declaration_seq -> declaration .)
    AUTO            reduce using rule 9 (declaration_seq -> declaration .)
    EXTERN          reduce using rule 9 (declaration_seq -> declaration .)
    INLINE          reduce using rule 9 (declaration_seq -> declaration .)
    BOOL            reduce using rule 9 (declaration_seq -> declaration .)
    CHAR            reduce using rule 9 (declaration_seq -> declaration .)
    INT             reduce using rule 9 (declaration_seq -> declaration .)
    FLOAT           reduce using rule 9 (declaration_seq -> declaration .)
    DOUBLE          reduce using rule 9 (declaration_seq -> declaration .)
    VOID            reduce using rule 9 (declaration_seq -> declaration .)
    CLASS           reduce using rule 9 (declaration_seq -> declaration .)
    STRUCT          reduce using rule 9 (declaration_seq -> declaration .)
    $end            reduce using rule 9 (declaration_seq -> declaration .)


state 6

    (158) simple_type_specifier -> CHAR .

    SEMICOLON       reduce using rule 158 (simple_type_specifier -> CHAR .)
    LPAREN          reduce using rule 158 (simple_type_specifier -> CHAR .)
    TIMES           reduce using rule 158 (simple_type_specifier -> CHAR .)
    AMPERSAND       reduce using rule 158 (simple_type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 158 (simple_type_specifier -> CHAR .)
    TILDE           reduce using rule 158 (simple_type_specifier -> CHAR .)
    OPERATOR        reduce using rule 158 (simple_type_specifier -> CHAR .)
    BOOL            reduce using rule 158 (simple_type_specifier -> CHAR .)
    CHAR            reduce using rule 158 (simple_type_specifier -> CHAR .)
    INT             reduce using rule 158 (simple_type_specifier -> CHAR .)
    FLOAT           reduce using rule 158 (simple_type_specifier -> CHAR .)
    DOUBLE          reduce using rule 158 (simple_type_specifier -> CHAR .)
    VOID            reduce using rule 158 (simple_type_specifier -> CHAR .)
    CLASS           reduce using rule 158 (simple_type_specifier -> CHAR .)
    STRUCT          reduce using rule 158 (simple_type_specifier -> CHAR .)
    LBRACKET        reduce using rule 158 (simple_type_specifier -> CHAR .)
    ASSIGN          reduce using rule 158 (simple_type_specifier -> CHAR .)
    LBRACE          reduce using rule 158 (simple_type_specifier -> CHAR .)
    COMMA           reduce using rule 158 (simple_type_specifier -> CHAR .)
    RPAREN          reduce using rule 158 (simple_type_specifier -> CHAR .)
    PLUS_PLUS       reduce using rule 158 (simple_type_specifier -> CHAR .)
    MINUS_MINUS     reduce using rule 158 (simple_type_specifier -> CHAR .)
    DOT             reduce using rule 158 (simple_type_specifier -> CHAR .)
    DIV             reduce using rule 158 (simple_type_specifier -> CHAR .)
    MODULO          reduce using rule 158 (simple_type_specifier -> CHAR .)
    PLUS            reduce using rule 158 (simple_type_specifier -> CHAR .)
    MINUS           reduce using rule 158 (simple_type_specifier -> CHAR .)
    LESS            reduce using rule 158 (simple_type_specifier -> CHAR .)
    GREATER         reduce using rule 158 (simple_type_specifier -> CHAR .)
    LESS_EQ         reduce using rule 158 (simple_type_specifier -> CHAR .)
    GREATER_EQ      reduce using rule 158 (simple_type_specifier -> CHAR .)
    IS_EQ           reduce using rule 158 (simple_type_specifier -> CHAR .)
    NOT_EQ          reduce using rule 158 (simple_type_specifier -> CHAR .)
    DOUBLE_AMPERSAND reduce using rule 158 (simple_type_specifier -> CHAR .)
    QUESTION        reduce using rule 158 (simple_type_specifier -> CHAR .)
    DOUBLE_PIPE     reduce using rule 158 (simple_type_specifier -> CHAR .)
    RBRACKET        reduce using rule 158 (simple_type_specifier -> CHAR .)
    EQ_TIMES        reduce using rule 158 (simple_type_specifier -> CHAR .)
    EQ_DIV          reduce using rule 158 (simple_type_specifier -> CHAR .)
    EQ_MODULO       reduce using rule 158 (simple_type_specifier -> CHAR .)
    EQ_PLUS         reduce using rule 158 (simple_type_specifier -> CHAR .)
    EQ_MINUS        reduce using rule 158 (simple_type_specifier -> CHAR .)
    RBRACE          reduce using rule 158 (simple_type_specifier -> CHAR .)
    COLON           reduce using rule 158 (simple_type_specifier -> CHAR .)
    ELLIPSIS        reduce using rule 158 (simple_type_specifier -> CHAR .)


state 7

    (153) storage_class_specifier -> EXTERN .

    SEMICOLON       reduce using rule 153 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 153 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 153 (storage_class_specifier -> EXTERN .)
    AMPERSAND       reduce using rule 153 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 153 (storage_class_specifier -> EXTERN .)
    TILDE           reduce using rule 153 (storage_class_specifier -> EXTERN .)
    OPERATOR        reduce using rule 153 (storage_class_specifier -> EXTERN .)
    ASSIGN          reduce using rule 153 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 153 (storage_class_specifier -> EXTERN .)
    ELLIPSIS        reduce using rule 153 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 153 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 153 (storage_class_specifier -> EXTERN .)
    COLON           reduce using rule 153 (storage_class_specifier -> EXTERN .)


state 8

    (151) decl_specifier -> function_specifier .

    SEMICOLON       reduce using rule 151 (decl_specifier -> function_specifier .)
    LPAREN          reduce using rule 151 (decl_specifier -> function_specifier .)
    TIMES           reduce using rule 151 (decl_specifier -> function_specifier .)
    AMPERSAND       reduce using rule 151 (decl_specifier -> function_specifier .)
    IDENTIFIER      reduce using rule 151 (decl_specifier -> function_specifier .)
    TILDE           reduce using rule 151 (decl_specifier -> function_specifier .)
    OPERATOR        reduce using rule 151 (decl_specifier -> function_specifier .)
    ASSIGN          reduce using rule 151 (decl_specifier -> function_specifier .)
    LBRACKET        reduce using rule 151 (decl_specifier -> function_specifier .)
    ELLIPSIS        reduce using rule 151 (decl_specifier -> function_specifier .)
    COMMA           reduce using rule 151 (decl_specifier -> function_specifier .)
    RPAREN          reduce using rule 151 (decl_specifier -> function_specifier .)
    COLON           reduce using rule 151 (decl_specifier -> function_specifier .)


state 9

    (144) block_declaration -> simple_declaration .

    IDENTIFIER      reduce using rule 144 (block_declaration -> simple_declaration .)
    CASE            reduce using rule 144 (block_declaration -> simple_declaration .)
    DEFAULT         reduce using rule 144 (block_declaration -> simple_declaration .)
    SEMICOLON       reduce using rule 144 (block_declaration -> simple_declaration .)
    LBRACE          reduce using rule 144 (block_declaration -> simple_declaration .)
    IF              reduce using rule 144 (block_declaration -> simple_declaration .)
    SWITCH          reduce using rule 144 (block_declaration -> simple_declaration .)
    WHILE           reduce using rule 144 (block_declaration -> simple_declaration .)
    DO              reduce using rule 144 (block_declaration -> simple_declaration .)
    FOR             reduce using rule 144 (block_declaration -> simple_declaration .)
    BREAK           reduce using rule 144 (block_declaration -> simple_declaration .)
    CONTINUE        reduce using rule 144 (block_declaration -> simple_declaration .)
    RETURN          reduce using rule 144 (block_declaration -> simple_declaration .)
    PRINT           reduce using rule 144 (block_declaration -> simple_declaration .)
    SCAN            reduce using rule 144 (block_declaration -> simple_declaration .)
    MALLOC          reduce using rule 144 (block_declaration -> simple_declaration .)
    AUTO            reduce using rule 144 (block_declaration -> simple_declaration .)
    EXTERN          reduce using rule 144 (block_declaration -> simple_declaration .)
    INLINE          reduce using rule 144 (block_declaration -> simple_declaration .)
    BOOL            reduce using rule 144 (block_declaration -> simple_declaration .)
    CHAR            reduce using rule 144 (block_declaration -> simple_declaration .)
    INT             reduce using rule 144 (block_declaration -> simple_declaration .)
    FLOAT           reduce using rule 144 (block_declaration -> simple_declaration .)
    DOUBLE          reduce using rule 144 (block_declaration -> simple_declaration .)
    VOID            reduce using rule 144 (block_declaration -> simple_declaration .)
    LPAREN          reduce using rule 144 (block_declaration -> simple_declaration .)
    PLUS_PLUS       reduce using rule 144 (block_declaration -> simple_declaration .)
    MINUS_MINUS     reduce using rule 144 (block_declaration -> simple_declaration .)
    SIZEOF          reduce using rule 144 (block_declaration -> simple_declaration .)
    EXCLAMATION     reduce using rule 144 (block_declaration -> simple_declaration .)
    TILDE           reduce using rule 144 (block_declaration -> simple_declaration .)
    TIMES           reduce using rule 144 (block_declaration -> simple_declaration .)
    AMPERSAND       reduce using rule 144 (block_declaration -> simple_declaration .)
    PLUS            reduce using rule 144 (block_declaration -> simple_declaration .)
    MINUS           reduce using rule 144 (block_declaration -> simple_declaration .)
    NEW             reduce using rule 144 (block_declaration -> simple_declaration .)
    DELETE          reduce using rule 144 (block_declaration -> simple_declaration .)
    THIS            reduce using rule 144 (block_declaration -> simple_declaration .)
    INUMBER         reduce using rule 144 (block_declaration -> simple_declaration .)
    DNUMBER         reduce using rule 144 (block_declaration -> simple_declaration .)
    LIT_CHAR        reduce using rule 144 (block_declaration -> simple_declaration .)
    LIT_STR         reduce using rule 144 (block_declaration -> simple_declaration .)
    TRUE            reduce using rule 144 (block_declaration -> simple_declaration .)
    FALSE           reduce using rule 144 (block_declaration -> simple_declaration .)
    OPERATOR        reduce using rule 144 (block_declaration -> simple_declaration .)
    RBRACE          reduce using rule 144 (block_declaration -> simple_declaration .)
    CLASS           reduce using rule 144 (block_declaration -> simple_declaration .)
    STRUCT          reduce using rule 144 (block_declaration -> simple_declaration .)
    ELSE            reduce using rule 144 (block_declaration -> simple_declaration .)
    $end            reduce using rule 144 (block_declaration -> simple_declaration .)


state 10

    (150) decl_specifier -> type_specifier .

    SEMICOLON       reduce using rule 150 (decl_specifier -> type_specifier .)
    LPAREN          reduce using rule 150 (decl_specifier -> type_specifier .)
    TIMES           reduce using rule 150 (decl_specifier -> type_specifier .)
    AMPERSAND       reduce using rule 150 (decl_specifier -> type_specifier .)
    IDENTIFIER      reduce using rule 150 (decl_specifier -> type_specifier .)
    TILDE           reduce using rule 150 (decl_specifier -> type_specifier .)
    OPERATOR        reduce using rule 150 (decl_specifier -> type_specifier .)
    ASSIGN          reduce using rule 150 (decl_specifier -> type_specifier .)
    LBRACKET        reduce using rule 150 (decl_specifier -> type_specifier .)
    ELLIPSIS        reduce using rule 150 (decl_specifier -> type_specifier .)
    COMMA           reduce using rule 150 (decl_specifier -> type_specifier .)
    RPAREN          reduce using rule 150 (decl_specifier -> type_specifier .)
    COLON           reduce using rule 150 (decl_specifier -> type_specifier .)


state 11

    (155) type_specifier -> simple_type_specifier .

    SEMICOLON       reduce using rule 155 (type_specifier -> simple_type_specifier .)
    LPAREN          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    TIMES           reduce using rule 155 (type_specifier -> simple_type_specifier .)
    AMPERSAND       reduce using rule 155 (type_specifier -> simple_type_specifier .)
    IDENTIFIER      reduce using rule 155 (type_specifier -> simple_type_specifier .)
    TILDE           reduce using rule 155 (type_specifier -> simple_type_specifier .)
    OPERATOR        reduce using rule 155 (type_specifier -> simple_type_specifier .)
    BOOL            reduce using rule 155 (type_specifier -> simple_type_specifier .)
    CHAR            reduce using rule 155 (type_specifier -> simple_type_specifier .)
    INT             reduce using rule 155 (type_specifier -> simple_type_specifier .)
    FLOAT           reduce using rule 155 (type_specifier -> simple_type_specifier .)
    DOUBLE          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    VOID            reduce using rule 155 (type_specifier -> simple_type_specifier .)
    CLASS           reduce using rule 155 (type_specifier -> simple_type_specifier .)
    STRUCT          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    LBRACKET        reduce using rule 155 (type_specifier -> simple_type_specifier .)
    DIV             reduce using rule 155 (type_specifier -> simple_type_specifier .)
    MODULO          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    PLUS            reduce using rule 155 (type_specifier -> simple_type_specifier .)
    MINUS           reduce using rule 155 (type_specifier -> simple_type_specifier .)
    LESS            reduce using rule 155 (type_specifier -> simple_type_specifier .)
    GREATER         reduce using rule 155 (type_specifier -> simple_type_specifier .)
    LESS_EQ         reduce using rule 155 (type_specifier -> simple_type_specifier .)
    GREATER_EQ      reduce using rule 155 (type_specifier -> simple_type_specifier .)
    IS_EQ           reduce using rule 155 (type_specifier -> simple_type_specifier .)
    NOT_EQ          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    DOUBLE_AMPERSAND reduce using rule 155 (type_specifier -> simple_type_specifier .)
    QUESTION        reduce using rule 155 (type_specifier -> simple_type_specifier .)
    DOUBLE_PIPE     reduce using rule 155 (type_specifier -> simple_type_specifier .)
    RBRACKET        reduce using rule 155 (type_specifier -> simple_type_specifier .)
    ASSIGN          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    EQ_TIMES        reduce using rule 155 (type_specifier -> simple_type_specifier .)
    EQ_DIV          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    EQ_MODULO       reduce using rule 155 (type_specifier -> simple_type_specifier .)
    EQ_PLUS         reduce using rule 155 (type_specifier -> simple_type_specifier .)
    EQ_MINUS        reduce using rule 155 (type_specifier -> simple_type_specifier .)
    RPAREN          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    COMMA           reduce using rule 155 (type_specifier -> simple_type_specifier .)
    RBRACE          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    COLON           reduce using rule 155 (type_specifier -> simple_type_specifier .)
    ELLIPSIS        reduce using rule 155 (type_specifier -> simple_type_specifier .)
    LBRACE          reduce using rule 155 (type_specifier -> simple_type_specifier .)
    PLUS_PLUS       reduce using rule 155 (type_specifier -> simple_type_specifier .)
    MINUS_MINUS     reduce using rule 155 (type_specifier -> simple_type_specifier .)
    DOT             reduce using rule 155 (type_specifier -> simple_type_specifier .)


state 12

    (202) function_definition -> decl_specifier_seq . declarator function_scope function_body unset_function_scope
    (145) simple_declaration -> decl_specifier_seq . init_declarator_list SEMICOLON
    (147) simple_declaration -> decl_specifier_seq . SEMICOLON
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (165) init_declarator_list -> . init_declarator
    (166) init_declarator_list -> . init_declarator_list COMMA mark_1 init_declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (168) init_declarator -> . declarator initializer_opt
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    SEMICOLON       shift and go to state 28
    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    init_declarator_list           shift and go to state 26
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    unqualified_id                 shift and go to state 42
    declarator                     shift and go to state 41
    init_declarator                shift and go to state 34
    declarator_id                  shift and go to state 38

state 13

    (146) simple_declaration -> IDENTIFIER . init_declarator_list SEMICOLON
    (165) init_declarator_list -> . init_declarator
    (166) init_declarator_list -> . init_declarator_list COMMA mark_1 init_declarator
    (168) init_declarator -> . declarator initializer_opt
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    init_declarator                shift and go to state 34
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 44
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38
    init_declarator_list           shift and go to state 43

state 14

    (0) S' -> translation_unit .



state 15

    (213) class_specifier -> set_class_scope . new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> set_class_scope . new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (3) new_scope -> .

    CLASS           reduce using rule 3 (new_scope -> .)
    STRUCT          reduce using rule 3 (new_scope -> .)

    new_scope                      shift and go to state 45

state 16

    (148) decl_specifier_seq -> decl_specifier .

    LPAREN          reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    TIMES           reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    AMPERSAND       reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    IDENTIFIER      reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    TILDE           reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    OPERATOR        reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    ASSIGN          reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    LBRACKET        reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    ELLIPSIS        reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    COMMA           reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    RPAREN          reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    SEMICOLON       reduce using rule 148 (decl_specifier_seq -> decl_specifier .)
    COLON           reduce using rule 148 (decl_specifier_seq -> decl_specifier .)


state 17

    (152) storage_class_specifier -> AUTO .

    SEMICOLON       reduce using rule 152 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 152 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 152 (storage_class_specifier -> AUTO .)
    AMPERSAND       reduce using rule 152 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 152 (storage_class_specifier -> AUTO .)
    TILDE           reduce using rule 152 (storage_class_specifier -> AUTO .)
    OPERATOR        reduce using rule 152 (storage_class_specifier -> AUTO .)
    ASSIGN          reduce using rule 152 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 152 (storage_class_specifier -> AUTO .)
    ELLIPSIS        reduce using rule 152 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 152 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 152 (storage_class_specifier -> AUTO .)
    COLON           reduce using rule 152 (storage_class_specifier -> AUTO .)


state 18

    (143) declaration -> function_definition .

    IDENTIFIER      reduce using rule 143 (declaration -> function_definition .)
    AUTO            reduce using rule 143 (declaration -> function_definition .)
    EXTERN          reduce using rule 143 (declaration -> function_definition .)
    INLINE          reduce using rule 143 (declaration -> function_definition .)
    BOOL            reduce using rule 143 (declaration -> function_definition .)
    CHAR            reduce using rule 143 (declaration -> function_definition .)
    INT             reduce using rule 143 (declaration -> function_definition .)
    FLOAT           reduce using rule 143 (declaration -> function_definition .)
    DOUBLE          reduce using rule 143 (declaration -> function_definition .)
    VOID            reduce using rule 143 (declaration -> function_definition .)
    CLASS           reduce using rule 143 (declaration -> function_definition .)
    STRUCT          reduce using rule 143 (declaration -> function_definition .)
    $end            reduce using rule 143 (declaration -> function_definition .)


state 19

    (159) simple_type_specifier -> INT .

    SEMICOLON       reduce using rule 159 (simple_type_specifier -> INT .)
    LPAREN          reduce using rule 159 (simple_type_specifier -> INT .)
    TIMES           reduce using rule 159 (simple_type_specifier -> INT .)
    AMPERSAND       reduce using rule 159 (simple_type_specifier -> INT .)
    IDENTIFIER      reduce using rule 159 (simple_type_specifier -> INT .)
    TILDE           reduce using rule 159 (simple_type_specifier -> INT .)
    OPERATOR        reduce using rule 159 (simple_type_specifier -> INT .)
    BOOL            reduce using rule 159 (simple_type_specifier -> INT .)
    CHAR            reduce using rule 159 (simple_type_specifier -> INT .)
    INT             reduce using rule 159 (simple_type_specifier -> INT .)
    FLOAT           reduce using rule 159 (simple_type_specifier -> INT .)
    DOUBLE          reduce using rule 159 (simple_type_specifier -> INT .)
    VOID            reduce using rule 159 (simple_type_specifier -> INT .)
    CLASS           reduce using rule 159 (simple_type_specifier -> INT .)
    STRUCT          reduce using rule 159 (simple_type_specifier -> INT .)
    LBRACKET        reduce using rule 159 (simple_type_specifier -> INT .)
    ASSIGN          reduce using rule 159 (simple_type_specifier -> INT .)
    LBRACE          reduce using rule 159 (simple_type_specifier -> INT .)
    COMMA           reduce using rule 159 (simple_type_specifier -> INT .)
    RPAREN          reduce using rule 159 (simple_type_specifier -> INT .)
    PLUS_PLUS       reduce using rule 159 (simple_type_specifier -> INT .)
    MINUS_MINUS     reduce using rule 159 (simple_type_specifier -> INT .)
    DOT             reduce using rule 159 (simple_type_specifier -> INT .)
    DIV             reduce using rule 159 (simple_type_specifier -> INT .)
    MODULO          reduce using rule 159 (simple_type_specifier -> INT .)
    PLUS            reduce using rule 159 (simple_type_specifier -> INT .)
    MINUS           reduce using rule 159 (simple_type_specifier -> INT .)
    LESS            reduce using rule 159 (simple_type_specifier -> INT .)
    GREATER         reduce using rule 159 (simple_type_specifier -> INT .)
    LESS_EQ         reduce using rule 159 (simple_type_specifier -> INT .)
    GREATER_EQ      reduce using rule 159 (simple_type_specifier -> INT .)
    IS_EQ           reduce using rule 159 (simple_type_specifier -> INT .)
    NOT_EQ          reduce using rule 159 (simple_type_specifier -> INT .)
    DOUBLE_AMPERSAND reduce using rule 159 (simple_type_specifier -> INT .)
    QUESTION        reduce using rule 159 (simple_type_specifier -> INT .)
    DOUBLE_PIPE     reduce using rule 159 (simple_type_specifier -> INT .)
    RBRACKET        reduce using rule 159 (simple_type_specifier -> INT .)
    EQ_TIMES        reduce using rule 159 (simple_type_specifier -> INT .)
    EQ_DIV          reduce using rule 159 (simple_type_specifier -> INT .)
    EQ_MODULO       reduce using rule 159 (simple_type_specifier -> INT .)
    EQ_PLUS         reduce using rule 159 (simple_type_specifier -> INT .)
    EQ_MINUS        reduce using rule 159 (simple_type_specifier -> INT .)
    RBRACE          reduce using rule 159 (simple_type_specifier -> INT .)
    COLON           reduce using rule 159 (simple_type_specifier -> INT .)
    ELLIPSIS        reduce using rule 159 (simple_type_specifier -> INT .)


state 20

    (161) simple_type_specifier -> DOUBLE .

    SEMICOLON       reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    TIMES           reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    AMPERSAND       reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    TILDE           reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    OPERATOR        reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    BOOL            reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    CHAR            reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    INT             reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    VOID            reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    CLASS           reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    ASSIGN          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    LBRACE          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    COMMA           reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    PLUS_PLUS       reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    MINUS_MINUS     reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    DOT             reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    DIV             reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    MODULO          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    PLUS            reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    MINUS           reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    LESS            reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    GREATER         reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    LESS_EQ         reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    GREATER_EQ      reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    IS_EQ           reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    NOT_EQ          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    DOUBLE_AMPERSAND reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    QUESTION        reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    DOUBLE_PIPE     reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    RBRACKET        reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    EQ_TIMES        reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    EQ_DIV          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    EQ_MODULO       reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    EQ_PLUS         reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    EQ_MINUS        reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    RBRACE          reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    COLON           reduce using rule 161 (simple_type_specifier -> DOUBLE .)
    ELLIPSIS        reduce using rule 161 (simple_type_specifier -> DOUBLE .)


state 21

    (160) simple_type_specifier -> FLOAT .

    SEMICOLON       reduce using rule 160 (simple_type_specifier -> FLOAT .)
    LPAREN          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    TIMES           reduce using rule 160 (simple_type_specifier -> FLOAT .)
    AMPERSAND       reduce using rule 160 (simple_type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 160 (simple_type_specifier -> FLOAT .)
    TILDE           reduce using rule 160 (simple_type_specifier -> FLOAT .)
    OPERATOR        reduce using rule 160 (simple_type_specifier -> FLOAT .)
    BOOL            reduce using rule 160 (simple_type_specifier -> FLOAT .)
    CHAR            reduce using rule 160 (simple_type_specifier -> FLOAT .)
    INT             reduce using rule 160 (simple_type_specifier -> FLOAT .)
    FLOAT           reduce using rule 160 (simple_type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    VOID            reduce using rule 160 (simple_type_specifier -> FLOAT .)
    CLASS           reduce using rule 160 (simple_type_specifier -> FLOAT .)
    STRUCT          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 160 (simple_type_specifier -> FLOAT .)
    ASSIGN          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    LBRACE          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    COMMA           reduce using rule 160 (simple_type_specifier -> FLOAT .)
    RPAREN          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    PLUS_PLUS       reduce using rule 160 (simple_type_specifier -> FLOAT .)
    MINUS_MINUS     reduce using rule 160 (simple_type_specifier -> FLOAT .)
    DOT             reduce using rule 160 (simple_type_specifier -> FLOAT .)
    DIV             reduce using rule 160 (simple_type_specifier -> FLOAT .)
    MODULO          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    PLUS            reduce using rule 160 (simple_type_specifier -> FLOAT .)
    MINUS           reduce using rule 160 (simple_type_specifier -> FLOAT .)
    LESS            reduce using rule 160 (simple_type_specifier -> FLOAT .)
    GREATER         reduce using rule 160 (simple_type_specifier -> FLOAT .)
    LESS_EQ         reduce using rule 160 (simple_type_specifier -> FLOAT .)
    GREATER_EQ      reduce using rule 160 (simple_type_specifier -> FLOAT .)
    IS_EQ           reduce using rule 160 (simple_type_specifier -> FLOAT .)
    NOT_EQ          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    DOUBLE_AMPERSAND reduce using rule 160 (simple_type_specifier -> FLOAT .)
    QUESTION        reduce using rule 160 (simple_type_specifier -> FLOAT .)
    DOUBLE_PIPE     reduce using rule 160 (simple_type_specifier -> FLOAT .)
    RBRACKET        reduce using rule 160 (simple_type_specifier -> FLOAT .)
    EQ_TIMES        reduce using rule 160 (simple_type_specifier -> FLOAT .)
    EQ_DIV          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    EQ_MODULO       reduce using rule 160 (simple_type_specifier -> FLOAT .)
    EQ_PLUS         reduce using rule 160 (simple_type_specifier -> FLOAT .)
    EQ_MINUS        reduce using rule 160 (simple_type_specifier -> FLOAT .)
    RBRACE          reduce using rule 160 (simple_type_specifier -> FLOAT .)
    COLON           reduce using rule 160 (simple_type_specifier -> FLOAT .)
    ELLIPSIS        reduce using rule 160 (simple_type_specifier -> FLOAT .)


state 22

    (142) declaration -> block_declaration .

    IDENTIFIER      reduce using rule 142 (declaration -> block_declaration .)
    AUTO            reduce using rule 142 (declaration -> block_declaration .)
    EXTERN          reduce using rule 142 (declaration -> block_declaration .)
    INLINE          reduce using rule 142 (declaration -> block_declaration .)
    BOOL            reduce using rule 142 (declaration -> block_declaration .)
    CHAR            reduce using rule 142 (declaration -> block_declaration .)
    INT             reduce using rule 142 (declaration -> block_declaration .)
    FLOAT           reduce using rule 142 (declaration -> block_declaration .)
    DOUBLE          reduce using rule 142 (declaration -> block_declaration .)
    VOID            reduce using rule 142 (declaration -> block_declaration .)
    CLASS           reduce using rule 142 (declaration -> block_declaration .)
    STRUCT          reduce using rule 142 (declaration -> block_declaration .)
    $end            reduce using rule 142 (declaration -> block_declaration .)


state 23

    (157) simple_type_specifier -> BOOL .

    SEMICOLON       reduce using rule 157 (simple_type_specifier -> BOOL .)
    LPAREN          reduce using rule 157 (simple_type_specifier -> BOOL .)
    TIMES           reduce using rule 157 (simple_type_specifier -> BOOL .)
    AMPERSAND       reduce using rule 157 (simple_type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 157 (simple_type_specifier -> BOOL .)
    TILDE           reduce using rule 157 (simple_type_specifier -> BOOL .)
    OPERATOR        reduce using rule 157 (simple_type_specifier -> BOOL .)
    BOOL            reduce using rule 157 (simple_type_specifier -> BOOL .)
    CHAR            reduce using rule 157 (simple_type_specifier -> BOOL .)
    INT             reduce using rule 157 (simple_type_specifier -> BOOL .)
    FLOAT           reduce using rule 157 (simple_type_specifier -> BOOL .)
    DOUBLE          reduce using rule 157 (simple_type_specifier -> BOOL .)
    VOID            reduce using rule 157 (simple_type_specifier -> BOOL .)
    CLASS           reduce using rule 157 (simple_type_specifier -> BOOL .)
    STRUCT          reduce using rule 157 (simple_type_specifier -> BOOL .)
    LBRACKET        reduce using rule 157 (simple_type_specifier -> BOOL .)
    ASSIGN          reduce using rule 157 (simple_type_specifier -> BOOL .)
    LBRACE          reduce using rule 157 (simple_type_specifier -> BOOL .)
    COMMA           reduce using rule 157 (simple_type_specifier -> BOOL .)
    RPAREN          reduce using rule 157 (simple_type_specifier -> BOOL .)
    PLUS_PLUS       reduce using rule 157 (simple_type_specifier -> BOOL .)
    MINUS_MINUS     reduce using rule 157 (simple_type_specifier -> BOOL .)
    DOT             reduce using rule 157 (simple_type_specifier -> BOOL .)
    DIV             reduce using rule 157 (simple_type_specifier -> BOOL .)
    MODULO          reduce using rule 157 (simple_type_specifier -> BOOL .)
    PLUS            reduce using rule 157 (simple_type_specifier -> BOOL .)
    MINUS           reduce using rule 157 (simple_type_specifier -> BOOL .)
    LESS            reduce using rule 157 (simple_type_specifier -> BOOL .)
    GREATER         reduce using rule 157 (simple_type_specifier -> BOOL .)
    LESS_EQ         reduce using rule 157 (simple_type_specifier -> BOOL .)
    GREATER_EQ      reduce using rule 157 (simple_type_specifier -> BOOL .)
    IS_EQ           reduce using rule 157 (simple_type_specifier -> BOOL .)
    NOT_EQ          reduce using rule 157 (simple_type_specifier -> BOOL .)
    DOUBLE_AMPERSAND reduce using rule 157 (simple_type_specifier -> BOOL .)
    QUESTION        reduce using rule 157 (simple_type_specifier -> BOOL .)
    DOUBLE_PIPE     reduce using rule 157 (simple_type_specifier -> BOOL .)
    RBRACKET        reduce using rule 157 (simple_type_specifier -> BOOL .)
    EQ_TIMES        reduce using rule 157 (simple_type_specifier -> BOOL .)
    EQ_DIV          reduce using rule 157 (simple_type_specifier -> BOOL .)
    EQ_MODULO       reduce using rule 157 (simple_type_specifier -> BOOL .)
    EQ_PLUS         reduce using rule 157 (simple_type_specifier -> BOOL .)
    EQ_MINUS        reduce using rule 157 (simple_type_specifier -> BOOL .)
    RBRACE          reduce using rule 157 (simple_type_specifier -> BOOL .)
    COLON           reduce using rule 157 (simple_type_specifier -> BOOL .)
    ELLIPSIS        reduce using rule 157 (simple_type_specifier -> BOOL .)


state 24

    (154) function_specifier -> INLINE .

    SEMICOLON       reduce using rule 154 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 154 (function_specifier -> INLINE .)
    TIMES           reduce using rule 154 (function_specifier -> INLINE .)
    AMPERSAND       reduce using rule 154 (function_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 154 (function_specifier -> INLINE .)
    TILDE           reduce using rule 154 (function_specifier -> INLINE .)
    OPERATOR        reduce using rule 154 (function_specifier -> INLINE .)
    ASSIGN          reduce using rule 154 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 154 (function_specifier -> INLINE .)
    ELLIPSIS        reduce using rule 154 (function_specifier -> INLINE .)
    COMMA           reduce using rule 154 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 154 (function_specifier -> INLINE .)
    COLON           reduce using rule 154 (function_specifier -> INLINE .)


state 25

    (10) declaration_seq -> declaration_seq declaration .

    IDENTIFIER      reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    AUTO            reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    EXTERN          reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    INLINE          reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    BOOL            reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    CHAR            reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    INT             reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    FLOAT           reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    DOUBLE          reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    VOID            reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    CLASS           reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    STRUCT          reduce using rule 10 (declaration_seq -> declaration_seq declaration .)
    $end            reduce using rule 10 (declaration_seq -> declaration_seq declaration .)


state 26

    (145) simple_declaration -> decl_specifier_seq init_declarator_list . SEMICOLON
    (166) init_declarator_list -> init_declarator_list . COMMA mark_1 init_declarator

    SEMICOLON       shift and go to state 46
    COMMA           shift and go to state 47


state 27

    (258) operator_function_id -> OPERATOR . operator
    (245) conversion_function_id -> OPERATOR . conversion_type_id
    (259) operator -> . PLUS
    (260) operator -> . MINUS
    (261) operator -> . TIMES
    (262) operator -> . DIV
    (263) operator -> . MODULO
    (264) operator -> . CARET
    (265) operator -> . AMPERSAND
    (266) operator -> . PIPE
    (267) operator -> . TILDE
    (268) operator -> . EXCLAMATION
    (269) operator -> . ASSIGN
    (270) operator -> . LESS
    (271) operator -> . GREATER
    (272) operator -> . EQ_PLUS
    (273) operator -> . EQ_MINUS
    (274) operator -> . EQ_TIMES
    (275) operator -> . EQ_DIV
    (276) operator -> . EQ_MODULO
    (277) operator -> . ARROW
    (278) operator -> . IS_EQ
    (279) operator -> . NOT_EQ
    (280) operator -> . LESS_EQ
    (281) operator -> . GREATER_EQ
    (282) operator -> . DOUBLE_AMPERSAND
    (283) operator -> . DOUBLE_PIPE
    (284) operator -> . PLUS_PLUS
    (285) operator -> . MINUS_MINUS
    (286) operator -> . COMMA
    (287) operator -> . LPAREN RPAREN
    (288) operator -> . LBRACKET RBRACKET
    (246) conversion_type_id -> . type_specifier_seq
    (247) conversion_type_id -> . type_specifier_seq conversion_declarator
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 58
    TIMES           shift and go to state 72
    DIV             shift and go to state 56
    MODULO          shift and go to state 70
    CARET           shift and go to state 48
    AMPERSAND       shift and go to state 73
    PIPE            shift and go to state 63
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 49
    ASSIGN          shift and go to state 68
    LESS            shift and go to state 52
    GREATER         shift and go to state 77
    EQ_PLUS         shift and go to state 60
    EQ_MINUS        shift and go to state 62
    EQ_TIMES        shift and go to state 71
    EQ_DIV          shift and go to state 78
    EQ_MODULO       shift and go to state 81
    ARROW           shift and go to state 74
    IS_EQ           shift and go to state 76
    NOT_EQ          shift and go to state 67
    LESS_EQ         shift and go to state 50
    GREATER_EQ      shift and go to state 54
    DOUBLE_AMPERSAND shift and go to state 61
    DOUBLE_PIPE     shift and go to state 79
    PLUS_PLUS       shift and go to state 80
    MINUS_MINUS     shift and go to state 69
    COMMA           shift and go to state 66
    LPAREN          shift and go to state 51
    LBRACKET        shift and go to state 53
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    class_specifier                shift and go to state 2
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    set_class_scope                shift and go to state 15
    operator                       shift and go to state 55
    conversion_type_id             shift and go to state 57
    type_specifier_seq             shift and go to state 75

state 28

    (147) simple_declaration -> decl_specifier_seq SEMICOLON .

    IDENTIFIER      reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    CASE            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    DEFAULT         reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    SEMICOLON       reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    LBRACE          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    IF              reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    SWITCH          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    WHILE           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    DO              reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    FOR             reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    BREAK           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    CONTINUE        reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    RETURN          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    PRINT           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    SCAN            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    MALLOC          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    AUTO            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    EXTERN          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    INLINE          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    BOOL            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    CHAR            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    INT             reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    FLOAT           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    DOUBLE          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    VOID            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    LPAREN          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    PLUS_PLUS       reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    MINUS_MINUS     reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    SIZEOF          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    EXCLAMATION     reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    TILDE           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    TIMES           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    AMPERSAND       reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    PLUS            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    MINUS           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    NEW             reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    DELETE          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    THIS            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    INUMBER         reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    DNUMBER         reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    LIT_CHAR        reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    LIT_STR         reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    TRUE            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    FALSE           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    OPERATOR        reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    RBRACE          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    CLASS           reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    STRUCT          reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    ELSE            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)
    $end            reduce using rule 147 (simple_declaration -> decl_specifier_seq SEMICOLON .)


state 29

    (23) unqualified_id -> operator_function_id .

    LBRACKET        reduce using rule 23 (unqualified_id -> operator_function_id .)
    LPAREN          reduce using rule 23 (unqualified_id -> operator_function_id .)
    PLUS_PLUS       reduce using rule 23 (unqualified_id -> operator_function_id .)
    MINUS_MINUS     reduce using rule 23 (unqualified_id -> operator_function_id .)
    DOT             reduce using rule 23 (unqualified_id -> operator_function_id .)
    TIMES           reduce using rule 23 (unqualified_id -> operator_function_id .)
    DIV             reduce using rule 23 (unqualified_id -> operator_function_id .)
    MODULO          reduce using rule 23 (unqualified_id -> operator_function_id .)
    PLUS            reduce using rule 23 (unqualified_id -> operator_function_id .)
    MINUS           reduce using rule 23 (unqualified_id -> operator_function_id .)
    LESS            reduce using rule 23 (unqualified_id -> operator_function_id .)
    GREATER         reduce using rule 23 (unqualified_id -> operator_function_id .)
    LESS_EQ         reduce using rule 23 (unqualified_id -> operator_function_id .)
    GREATER_EQ      reduce using rule 23 (unqualified_id -> operator_function_id .)
    IS_EQ           reduce using rule 23 (unqualified_id -> operator_function_id .)
    NOT_EQ          reduce using rule 23 (unqualified_id -> operator_function_id .)
    DOUBLE_AMPERSAND reduce using rule 23 (unqualified_id -> operator_function_id .)
    QUESTION        reduce using rule 23 (unqualified_id -> operator_function_id .)
    DOUBLE_PIPE     reduce using rule 23 (unqualified_id -> operator_function_id .)
    RBRACKET        reduce using rule 23 (unqualified_id -> operator_function_id .)
    ASSIGN          reduce using rule 23 (unqualified_id -> operator_function_id .)
    EQ_TIMES        reduce using rule 23 (unqualified_id -> operator_function_id .)
    EQ_DIV          reduce using rule 23 (unqualified_id -> operator_function_id .)
    EQ_MODULO       reduce using rule 23 (unqualified_id -> operator_function_id .)
    EQ_PLUS         reduce using rule 23 (unqualified_id -> operator_function_id .)
    EQ_MINUS        reduce using rule 23 (unqualified_id -> operator_function_id .)
    RPAREN          reduce using rule 23 (unqualified_id -> operator_function_id .)
    COMMA           reduce using rule 23 (unqualified_id -> operator_function_id .)
    SEMICOLON       reduce using rule 23 (unqualified_id -> operator_function_id .)
    RBRACE          reduce using rule 23 (unqualified_id -> operator_function_id .)
    COLON           reduce using rule 23 (unqualified_id -> operator_function_id .)
    ELLIPSIS        reduce using rule 23 (unqualified_id -> operator_function_id .)
    LBRACE          reduce using rule 23 (unqualified_id -> operator_function_id .)


state 30

    (25) unqualified_id -> TILDE . class_name
    (212) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 83

    class_name                     shift and go to state 82

state 31

    (22) unqualified_id -> IDENTIFIER .

    LBRACKET        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LPAREN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOT             reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    TIMES           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DIV             reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MODULO          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    PLUS            reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MINUS           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LESS            reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    GREATER         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LESS_EQ         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    IS_EQ           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    NOT_EQ          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    QUESTION        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    RBRACKET        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    ASSIGN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_DIV          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    RPAREN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    COMMA           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    SEMICOLON       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    RBRACE          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    COLON           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LBRACE          reduce using rule 22 (unqualified_id -> IDENTIFIER .)


state 32

    (178) declarator_id -> id_expression .

    LPAREN          reduce using rule 178 (declarator_id -> id_expression .)
    LBRACKET        reduce using rule 178 (declarator_id -> id_expression .)
    ASSIGN          reduce using rule 178 (declarator_id -> id_expression .)
    SEMICOLON       reduce using rule 178 (declarator_id -> id_expression .)
    COMMA           reduce using rule 178 (declarator_id -> id_expression .)
    LBRACE          reduce using rule 178 (declarator_id -> id_expression .)
    RPAREN          reduce using rule 178 (declarator_id -> id_expression .)
    ELLIPSIS        reduce using rule 178 (declarator_id -> id_expression .)


state 33

    (169) declarator -> direct_declarator .
    (172) direct_declarator -> direct_declarator . LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET

    ASSIGN          reduce using rule 169 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 169 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 169 (declarator -> direct_declarator .)
    COMMA           reduce using rule 169 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 169 (declarator -> direct_declarator .)
    ELLIPSIS        reduce using rule 169 (declarator -> direct_declarator .)
    LPAREN          shift and go to state 85
    LBRACKET        shift and go to state 84

  ! LPAREN          [ reduce using rule 169 (declarator -> direct_declarator .) ]


state 34

    (165) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 165 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 165 (init_declarator_list -> init_declarator .)


state 35

    (175) ptr_operator -> TIMES .

    LPAREN          reduce using rule 175 (ptr_operator -> TIMES .)
    TIMES           reduce using rule 175 (ptr_operator -> TIMES .)
    AMPERSAND       reduce using rule 175 (ptr_operator -> TIMES .)
    IDENTIFIER      reduce using rule 175 (ptr_operator -> TIMES .)
    TILDE           reduce using rule 175 (ptr_operator -> TIMES .)
    OPERATOR        reduce using rule 175 (ptr_operator -> TIMES .)
    LBRACKET        reduce using rule 175 (ptr_operator -> TIMES .)
    RPAREN          reduce using rule 175 (ptr_operator -> TIMES .)
    DIV             reduce using rule 175 (ptr_operator -> TIMES .)
    MODULO          reduce using rule 175 (ptr_operator -> TIMES .)
    PLUS            reduce using rule 175 (ptr_operator -> TIMES .)
    MINUS           reduce using rule 175 (ptr_operator -> TIMES .)
    LESS            reduce using rule 175 (ptr_operator -> TIMES .)
    GREATER         reduce using rule 175 (ptr_operator -> TIMES .)
    LESS_EQ         reduce using rule 175 (ptr_operator -> TIMES .)
    GREATER_EQ      reduce using rule 175 (ptr_operator -> TIMES .)
    IS_EQ           reduce using rule 175 (ptr_operator -> TIMES .)
    NOT_EQ          reduce using rule 175 (ptr_operator -> TIMES .)
    DOUBLE_AMPERSAND reduce using rule 175 (ptr_operator -> TIMES .)
    QUESTION        reduce using rule 175 (ptr_operator -> TIMES .)
    DOUBLE_PIPE     reduce using rule 175 (ptr_operator -> TIMES .)
    RBRACKET        reduce using rule 175 (ptr_operator -> TIMES .)
    ASSIGN          reduce using rule 175 (ptr_operator -> TIMES .)
    EQ_TIMES        reduce using rule 175 (ptr_operator -> TIMES .)
    EQ_DIV          reduce using rule 175 (ptr_operator -> TIMES .)
    EQ_MODULO       reduce using rule 175 (ptr_operator -> TIMES .)
    EQ_PLUS         reduce using rule 175 (ptr_operator -> TIMES .)
    EQ_MINUS        reduce using rule 175 (ptr_operator -> TIMES .)
    COMMA           reduce using rule 175 (ptr_operator -> TIMES .)
    SEMICOLON       reduce using rule 175 (ptr_operator -> TIMES .)
    RBRACE          reduce using rule 175 (ptr_operator -> TIMES .)
    COLON           reduce using rule 175 (ptr_operator -> TIMES .)
    ELLIPSIS        reduce using rule 175 (ptr_operator -> TIMES .)
    LBRACE          reduce using rule 175 (ptr_operator -> TIMES .)
    PLUS_PLUS       reduce using rule 175 (ptr_operator -> TIMES .)
    MINUS_MINUS     reduce using rule 175 (ptr_operator -> TIMES .)
    DOT             reduce using rule 175 (ptr_operator -> TIMES .)


state 36

    (176) ptr_operator -> AMPERSAND .

    LPAREN          reduce using rule 176 (ptr_operator -> AMPERSAND .)
    TIMES           reduce using rule 176 (ptr_operator -> AMPERSAND .)
    AMPERSAND       reduce using rule 176 (ptr_operator -> AMPERSAND .)
    IDENTIFIER      reduce using rule 176 (ptr_operator -> AMPERSAND .)
    TILDE           reduce using rule 176 (ptr_operator -> AMPERSAND .)
    OPERATOR        reduce using rule 176 (ptr_operator -> AMPERSAND .)
    LBRACKET        reduce using rule 176 (ptr_operator -> AMPERSAND .)
    RPAREN          reduce using rule 176 (ptr_operator -> AMPERSAND .)
    DIV             reduce using rule 176 (ptr_operator -> AMPERSAND .)
    MODULO          reduce using rule 176 (ptr_operator -> AMPERSAND .)
    PLUS            reduce using rule 176 (ptr_operator -> AMPERSAND .)
    MINUS           reduce using rule 176 (ptr_operator -> AMPERSAND .)
    LESS            reduce using rule 176 (ptr_operator -> AMPERSAND .)
    GREATER         reduce using rule 176 (ptr_operator -> AMPERSAND .)
    LESS_EQ         reduce using rule 176 (ptr_operator -> AMPERSAND .)
    GREATER_EQ      reduce using rule 176 (ptr_operator -> AMPERSAND .)
    IS_EQ           reduce using rule 176 (ptr_operator -> AMPERSAND .)
    NOT_EQ          reduce using rule 176 (ptr_operator -> AMPERSAND .)
    DOUBLE_AMPERSAND reduce using rule 176 (ptr_operator -> AMPERSAND .)
    QUESTION        reduce using rule 176 (ptr_operator -> AMPERSAND .)
    DOUBLE_PIPE     reduce using rule 176 (ptr_operator -> AMPERSAND .)
    RBRACKET        reduce using rule 176 (ptr_operator -> AMPERSAND .)
    ASSIGN          reduce using rule 176 (ptr_operator -> AMPERSAND .)
    EQ_TIMES        reduce using rule 176 (ptr_operator -> AMPERSAND .)
    EQ_DIV          reduce using rule 176 (ptr_operator -> AMPERSAND .)
    EQ_MODULO       reduce using rule 176 (ptr_operator -> AMPERSAND .)
    EQ_PLUS         reduce using rule 176 (ptr_operator -> AMPERSAND .)
    EQ_MINUS        reduce using rule 176 (ptr_operator -> AMPERSAND .)
    COMMA           reduce using rule 176 (ptr_operator -> AMPERSAND .)
    SEMICOLON       reduce using rule 176 (ptr_operator -> AMPERSAND .)
    RBRACE          reduce using rule 176 (ptr_operator -> AMPERSAND .)
    COLON           reduce using rule 176 (ptr_operator -> AMPERSAND .)
    ELLIPSIS        reduce using rule 176 (ptr_operator -> AMPERSAND .)
    LBRACE          reduce using rule 176 (ptr_operator -> AMPERSAND .)
    PLUS_PLUS       reduce using rule 176 (ptr_operator -> AMPERSAND .)
    MINUS_MINUS     reduce using rule 176 (ptr_operator -> AMPERSAND .)
    DOT             reduce using rule 176 (ptr_operator -> AMPERSAND .)


state 37

    (174) direct_declarator -> LPAREN . declarator RPAREN
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 86
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38

state 38

    (171) direct_declarator -> declarator_id .

    LPAREN          reduce using rule 171 (direct_declarator -> declarator_id .)
    LBRACKET        reduce using rule 171 (direct_declarator -> declarator_id .)
    ASSIGN          reduce using rule 171 (direct_declarator -> declarator_id .)
    SEMICOLON       reduce using rule 171 (direct_declarator -> declarator_id .)
    COMMA           reduce using rule 171 (direct_declarator -> declarator_id .)
    LBRACE          reduce using rule 171 (direct_declarator -> declarator_id .)
    RPAREN          reduce using rule 171 (direct_declarator -> declarator_id .)
    ELLIPSIS        reduce using rule 171 (direct_declarator -> declarator_id .)


state 39

    (170) declarator -> ptr_operator . declarator
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 87
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38

state 40

    (24) unqualified_id -> conversion_function_id .

    LBRACKET        reduce using rule 24 (unqualified_id -> conversion_function_id .)
    LPAREN          reduce using rule 24 (unqualified_id -> conversion_function_id .)
    PLUS_PLUS       reduce using rule 24 (unqualified_id -> conversion_function_id .)
    MINUS_MINUS     reduce using rule 24 (unqualified_id -> conversion_function_id .)
    DOT             reduce using rule 24 (unqualified_id -> conversion_function_id .)
    TIMES           reduce using rule 24 (unqualified_id -> conversion_function_id .)
    DIV             reduce using rule 24 (unqualified_id -> conversion_function_id .)
    MODULO          reduce using rule 24 (unqualified_id -> conversion_function_id .)
    PLUS            reduce using rule 24 (unqualified_id -> conversion_function_id .)
    MINUS           reduce using rule 24 (unqualified_id -> conversion_function_id .)
    LESS            reduce using rule 24 (unqualified_id -> conversion_function_id .)
    GREATER         reduce using rule 24 (unqualified_id -> conversion_function_id .)
    LESS_EQ         reduce using rule 24 (unqualified_id -> conversion_function_id .)
    GREATER_EQ      reduce using rule 24 (unqualified_id -> conversion_function_id .)
    IS_EQ           reduce using rule 24 (unqualified_id -> conversion_function_id .)
    NOT_EQ          reduce using rule 24 (unqualified_id -> conversion_function_id .)
    DOUBLE_AMPERSAND reduce using rule 24 (unqualified_id -> conversion_function_id .)
    QUESTION        reduce using rule 24 (unqualified_id -> conversion_function_id .)
    DOUBLE_PIPE     reduce using rule 24 (unqualified_id -> conversion_function_id .)
    RBRACKET        reduce using rule 24 (unqualified_id -> conversion_function_id .)
    ASSIGN          reduce using rule 24 (unqualified_id -> conversion_function_id .)
    EQ_TIMES        reduce using rule 24 (unqualified_id -> conversion_function_id .)
    EQ_DIV          reduce using rule 24 (unqualified_id -> conversion_function_id .)
    EQ_MODULO       reduce using rule 24 (unqualified_id -> conversion_function_id .)
    EQ_PLUS         reduce using rule 24 (unqualified_id -> conversion_function_id .)
    EQ_MINUS        reduce using rule 24 (unqualified_id -> conversion_function_id .)
    RPAREN          reduce using rule 24 (unqualified_id -> conversion_function_id .)
    COMMA           reduce using rule 24 (unqualified_id -> conversion_function_id .)
    SEMICOLON       reduce using rule 24 (unqualified_id -> conversion_function_id .)
    RBRACE          reduce using rule 24 (unqualified_id -> conversion_function_id .)
    COLON           reduce using rule 24 (unqualified_id -> conversion_function_id .)
    ELLIPSIS        reduce using rule 24 (unqualified_id -> conversion_function_id .)
    LBRACE          reduce using rule 24 (unqualified_id -> conversion_function_id .)


state 41

    (202) function_definition -> decl_specifier_seq declarator . function_scope function_body unset_function_scope
    (168) init_declarator -> declarator . initializer_opt
    (7) function_scope -> .
    (204) initializer_opt -> .
    (205) initializer_opt -> . ASSIGN initializer_clause
    (206) initializer_opt -> . LPAREN expression_list RPAREN

    LBRACE          reduce using rule 7 (function_scope -> .)
    SEMICOLON       reduce using rule 204 (initializer_opt -> .)
    COMMA           reduce using rule 204 (initializer_opt -> .)
    ASSIGN          shift and go to state 91
    LPAREN          shift and go to state 90

    function_scope                 shift and go to state 88
    initializer_opt                shift and go to state 89

state 42

    (21) id_expression -> unqualified_id .

    LBRACKET        reduce using rule 21 (id_expression -> unqualified_id .)
    LPAREN          reduce using rule 21 (id_expression -> unqualified_id .)
    PLUS_PLUS       reduce using rule 21 (id_expression -> unqualified_id .)
    MINUS_MINUS     reduce using rule 21 (id_expression -> unqualified_id .)
    DOT             reduce using rule 21 (id_expression -> unqualified_id .)
    TIMES           reduce using rule 21 (id_expression -> unqualified_id .)
    DIV             reduce using rule 21 (id_expression -> unqualified_id .)
    MODULO          reduce using rule 21 (id_expression -> unqualified_id .)
    PLUS            reduce using rule 21 (id_expression -> unqualified_id .)
    MINUS           reduce using rule 21 (id_expression -> unqualified_id .)
    LESS            reduce using rule 21 (id_expression -> unqualified_id .)
    GREATER         reduce using rule 21 (id_expression -> unqualified_id .)
    LESS_EQ         reduce using rule 21 (id_expression -> unqualified_id .)
    GREATER_EQ      reduce using rule 21 (id_expression -> unqualified_id .)
    IS_EQ           reduce using rule 21 (id_expression -> unqualified_id .)
    NOT_EQ          reduce using rule 21 (id_expression -> unqualified_id .)
    DOUBLE_AMPERSAND reduce using rule 21 (id_expression -> unqualified_id .)
    QUESTION        reduce using rule 21 (id_expression -> unqualified_id .)
    DOUBLE_PIPE     reduce using rule 21 (id_expression -> unqualified_id .)
    ASSIGN          reduce using rule 21 (id_expression -> unqualified_id .)
    EQ_TIMES        reduce using rule 21 (id_expression -> unqualified_id .)
    EQ_DIV          reduce using rule 21 (id_expression -> unqualified_id .)
    EQ_MODULO       reduce using rule 21 (id_expression -> unqualified_id .)
    EQ_PLUS         reduce using rule 21 (id_expression -> unqualified_id .)
    EQ_MINUS        reduce using rule 21 (id_expression -> unqualified_id .)
    COMMA           reduce using rule 21 (id_expression -> unqualified_id .)
    RPAREN          reduce using rule 21 (id_expression -> unqualified_id .)
    RBRACKET        reduce using rule 21 (id_expression -> unqualified_id .)
    SEMICOLON       reduce using rule 21 (id_expression -> unqualified_id .)
    RBRACE          reduce using rule 21 (id_expression -> unqualified_id .)
    COLON           reduce using rule 21 (id_expression -> unqualified_id .)
    ELLIPSIS        reduce using rule 21 (id_expression -> unqualified_id .)
    LBRACE          reduce using rule 21 (id_expression -> unqualified_id .)


state 43

    (146) simple_declaration -> IDENTIFIER init_declarator_list . SEMICOLON
    (166) init_declarator_list -> init_declarator_list . COMMA mark_1 init_declarator

    SEMICOLON       shift and go to state 92
    COMMA           shift and go to state 47


state 44

    (168) init_declarator -> declarator . initializer_opt
    (204) initializer_opt -> .
    (205) initializer_opt -> . ASSIGN initializer_clause
    (206) initializer_opt -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 204 (initializer_opt -> .)
    COMMA           reduce using rule 204 (initializer_opt -> .)
    ASSIGN          shift and go to state 91
    LPAREN          shift and go to state 90

    initializer_opt                shift and go to state 89

state 45

    (213) class_specifier -> set_class_scope new_scope . class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> set_class_scope new_scope . class_head LBRACE RBRACE finish_scope unset_class_scope
    (215) class_head -> . class_key IDENTIFIER base_clause_opt
    (216) class_key -> . CLASS
    (217) class_key -> . STRUCT

    CLASS           shift and go to state 93
    STRUCT          shift and go to state 96

    class_head                     shift and go to state 94
    class_key                      shift and go to state 95

state 46

    (145) simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .

    IDENTIFIER      reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    CASE            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    LBRACE          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    IF              reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    DO              reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    FOR             reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    PRINT           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    SCAN            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    MALLOC          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    INLINE          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    BOOL            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    INT             reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    VOID            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    PLUS_PLUS       reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    MINUS_MINUS     reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    EXCLAMATION     reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    TILDE           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    TIMES           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    AMPERSAND       reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    NEW             reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    DELETE          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    THIS            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    INUMBER         reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    DNUMBER         reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    LIT_CHAR        reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    LIT_STR         reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    TRUE            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    FALSE           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    RBRACE          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    CLASS           reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    ELSE            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)
    $end            reduce using rule 145 (simple_declaration -> decl_specifier_seq init_declarator_list SEMICOLON .)


state 47

    (166) init_declarator_list -> init_declarator_list COMMA . mark_1 init_declarator
    (167) mark_1 -> .

    LPAREN          reduce using rule 167 (mark_1 -> .)
    TIMES           reduce using rule 167 (mark_1 -> .)
    AMPERSAND       reduce using rule 167 (mark_1 -> .)
    IDENTIFIER      reduce using rule 167 (mark_1 -> .)
    TILDE           reduce using rule 167 (mark_1 -> .)
    OPERATOR        reduce using rule 167 (mark_1 -> .)

    mark_1                         shift and go to state 97

state 48

    (264) operator -> CARET .

    LPAREN          reduce using rule 264 (operator -> CARET .)
    LBRACKET        reduce using rule 264 (operator -> CARET .)
    ASSIGN          reduce using rule 264 (operator -> CARET .)
    LBRACE          reduce using rule 264 (operator -> CARET .)
    SEMICOLON       reduce using rule 264 (operator -> CARET .)
    COMMA           reduce using rule 264 (operator -> CARET .)
    RPAREN          reduce using rule 264 (operator -> CARET .)
    PLUS_PLUS       reduce using rule 264 (operator -> CARET .)
    MINUS_MINUS     reduce using rule 264 (operator -> CARET .)
    DOT             reduce using rule 264 (operator -> CARET .)
    TIMES           reduce using rule 264 (operator -> CARET .)
    DIV             reduce using rule 264 (operator -> CARET .)
    MODULO          reduce using rule 264 (operator -> CARET .)
    PLUS            reduce using rule 264 (operator -> CARET .)
    MINUS           reduce using rule 264 (operator -> CARET .)
    LESS            reduce using rule 264 (operator -> CARET .)
    GREATER         reduce using rule 264 (operator -> CARET .)
    LESS_EQ         reduce using rule 264 (operator -> CARET .)
    GREATER_EQ      reduce using rule 264 (operator -> CARET .)
    IS_EQ           reduce using rule 264 (operator -> CARET .)
    NOT_EQ          reduce using rule 264 (operator -> CARET .)
    DOUBLE_AMPERSAND reduce using rule 264 (operator -> CARET .)
    QUESTION        reduce using rule 264 (operator -> CARET .)
    DOUBLE_PIPE     reduce using rule 264 (operator -> CARET .)
    RBRACKET        reduce using rule 264 (operator -> CARET .)
    EQ_TIMES        reduce using rule 264 (operator -> CARET .)
    EQ_DIV          reduce using rule 264 (operator -> CARET .)
    EQ_MODULO       reduce using rule 264 (operator -> CARET .)
    EQ_PLUS         reduce using rule 264 (operator -> CARET .)
    EQ_MINUS        reduce using rule 264 (operator -> CARET .)
    RBRACE          reduce using rule 264 (operator -> CARET .)
    COLON           reduce using rule 264 (operator -> CARET .)
    ELLIPSIS        reduce using rule 264 (operator -> CARET .)


state 49

    (268) operator -> EXCLAMATION .

    LPAREN          reduce using rule 268 (operator -> EXCLAMATION .)
    LBRACKET        reduce using rule 268 (operator -> EXCLAMATION .)
    ASSIGN          reduce using rule 268 (operator -> EXCLAMATION .)
    LBRACE          reduce using rule 268 (operator -> EXCLAMATION .)
    SEMICOLON       reduce using rule 268 (operator -> EXCLAMATION .)
    COMMA           reduce using rule 268 (operator -> EXCLAMATION .)
    RPAREN          reduce using rule 268 (operator -> EXCLAMATION .)
    PLUS_PLUS       reduce using rule 268 (operator -> EXCLAMATION .)
    MINUS_MINUS     reduce using rule 268 (operator -> EXCLAMATION .)
    DOT             reduce using rule 268 (operator -> EXCLAMATION .)
    TIMES           reduce using rule 268 (operator -> EXCLAMATION .)
    DIV             reduce using rule 268 (operator -> EXCLAMATION .)
    MODULO          reduce using rule 268 (operator -> EXCLAMATION .)
    PLUS            reduce using rule 268 (operator -> EXCLAMATION .)
    MINUS           reduce using rule 268 (operator -> EXCLAMATION .)
    LESS            reduce using rule 268 (operator -> EXCLAMATION .)
    GREATER         reduce using rule 268 (operator -> EXCLAMATION .)
    LESS_EQ         reduce using rule 268 (operator -> EXCLAMATION .)
    GREATER_EQ      reduce using rule 268 (operator -> EXCLAMATION .)
    IS_EQ           reduce using rule 268 (operator -> EXCLAMATION .)
    NOT_EQ          reduce using rule 268 (operator -> EXCLAMATION .)
    DOUBLE_AMPERSAND reduce using rule 268 (operator -> EXCLAMATION .)
    QUESTION        reduce using rule 268 (operator -> EXCLAMATION .)
    DOUBLE_PIPE     reduce using rule 268 (operator -> EXCLAMATION .)
    RBRACKET        reduce using rule 268 (operator -> EXCLAMATION .)
    EQ_TIMES        reduce using rule 268 (operator -> EXCLAMATION .)
    EQ_DIV          reduce using rule 268 (operator -> EXCLAMATION .)
    EQ_MODULO       reduce using rule 268 (operator -> EXCLAMATION .)
    EQ_PLUS         reduce using rule 268 (operator -> EXCLAMATION .)
    EQ_MINUS        reduce using rule 268 (operator -> EXCLAMATION .)
    RBRACE          reduce using rule 268 (operator -> EXCLAMATION .)
    COLON           reduce using rule 268 (operator -> EXCLAMATION .)
    ELLIPSIS        reduce using rule 268 (operator -> EXCLAMATION .)


state 50

    (280) operator -> LESS_EQ .

    LPAREN          reduce using rule 280 (operator -> LESS_EQ .)
    LBRACKET        reduce using rule 280 (operator -> LESS_EQ .)
    ASSIGN          reduce using rule 280 (operator -> LESS_EQ .)
    LBRACE          reduce using rule 280 (operator -> LESS_EQ .)
    SEMICOLON       reduce using rule 280 (operator -> LESS_EQ .)
    COMMA           reduce using rule 280 (operator -> LESS_EQ .)
    RPAREN          reduce using rule 280 (operator -> LESS_EQ .)
    PLUS_PLUS       reduce using rule 280 (operator -> LESS_EQ .)
    MINUS_MINUS     reduce using rule 280 (operator -> LESS_EQ .)
    DOT             reduce using rule 280 (operator -> LESS_EQ .)
    TIMES           reduce using rule 280 (operator -> LESS_EQ .)
    DIV             reduce using rule 280 (operator -> LESS_EQ .)
    MODULO          reduce using rule 280 (operator -> LESS_EQ .)
    PLUS            reduce using rule 280 (operator -> LESS_EQ .)
    MINUS           reduce using rule 280 (operator -> LESS_EQ .)
    LESS            reduce using rule 280 (operator -> LESS_EQ .)
    GREATER         reduce using rule 280 (operator -> LESS_EQ .)
    LESS_EQ         reduce using rule 280 (operator -> LESS_EQ .)
    GREATER_EQ      reduce using rule 280 (operator -> LESS_EQ .)
    IS_EQ           reduce using rule 280 (operator -> LESS_EQ .)
    NOT_EQ          reduce using rule 280 (operator -> LESS_EQ .)
    DOUBLE_AMPERSAND reduce using rule 280 (operator -> LESS_EQ .)
    QUESTION        reduce using rule 280 (operator -> LESS_EQ .)
    DOUBLE_PIPE     reduce using rule 280 (operator -> LESS_EQ .)
    RBRACKET        reduce using rule 280 (operator -> LESS_EQ .)
    EQ_TIMES        reduce using rule 280 (operator -> LESS_EQ .)
    EQ_DIV          reduce using rule 280 (operator -> LESS_EQ .)
    EQ_MODULO       reduce using rule 280 (operator -> LESS_EQ .)
    EQ_PLUS         reduce using rule 280 (operator -> LESS_EQ .)
    EQ_MINUS        reduce using rule 280 (operator -> LESS_EQ .)
    RBRACE          reduce using rule 280 (operator -> LESS_EQ .)
    COLON           reduce using rule 280 (operator -> LESS_EQ .)
    ELLIPSIS        reduce using rule 280 (operator -> LESS_EQ .)


state 51

    (287) operator -> LPAREN . RPAREN

    RPAREN          shift and go to state 98


state 52

    (270) operator -> LESS .

    LPAREN          reduce using rule 270 (operator -> LESS .)
    LBRACKET        reduce using rule 270 (operator -> LESS .)
    ASSIGN          reduce using rule 270 (operator -> LESS .)
    LBRACE          reduce using rule 270 (operator -> LESS .)
    SEMICOLON       reduce using rule 270 (operator -> LESS .)
    COMMA           reduce using rule 270 (operator -> LESS .)
    RPAREN          reduce using rule 270 (operator -> LESS .)
    PLUS_PLUS       reduce using rule 270 (operator -> LESS .)
    MINUS_MINUS     reduce using rule 270 (operator -> LESS .)
    DOT             reduce using rule 270 (operator -> LESS .)
    TIMES           reduce using rule 270 (operator -> LESS .)
    DIV             reduce using rule 270 (operator -> LESS .)
    MODULO          reduce using rule 270 (operator -> LESS .)
    PLUS            reduce using rule 270 (operator -> LESS .)
    MINUS           reduce using rule 270 (operator -> LESS .)
    LESS            reduce using rule 270 (operator -> LESS .)
    GREATER         reduce using rule 270 (operator -> LESS .)
    LESS_EQ         reduce using rule 270 (operator -> LESS .)
    GREATER_EQ      reduce using rule 270 (operator -> LESS .)
    IS_EQ           reduce using rule 270 (operator -> LESS .)
    NOT_EQ          reduce using rule 270 (operator -> LESS .)
    DOUBLE_AMPERSAND reduce using rule 270 (operator -> LESS .)
    QUESTION        reduce using rule 270 (operator -> LESS .)
    DOUBLE_PIPE     reduce using rule 270 (operator -> LESS .)
    RBRACKET        reduce using rule 270 (operator -> LESS .)
    EQ_TIMES        reduce using rule 270 (operator -> LESS .)
    EQ_DIV          reduce using rule 270 (operator -> LESS .)
    EQ_MODULO       reduce using rule 270 (operator -> LESS .)
    EQ_PLUS         reduce using rule 270 (operator -> LESS .)
    EQ_MINUS        reduce using rule 270 (operator -> LESS .)
    RBRACE          reduce using rule 270 (operator -> LESS .)
    COLON           reduce using rule 270 (operator -> LESS .)
    ELLIPSIS        reduce using rule 270 (operator -> LESS .)


state 53

    (288) operator -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 99


state 54

    (281) operator -> GREATER_EQ .

    LPAREN          reduce using rule 281 (operator -> GREATER_EQ .)
    LBRACKET        reduce using rule 281 (operator -> GREATER_EQ .)
    ASSIGN          reduce using rule 281 (operator -> GREATER_EQ .)
    LBRACE          reduce using rule 281 (operator -> GREATER_EQ .)
    SEMICOLON       reduce using rule 281 (operator -> GREATER_EQ .)
    COMMA           reduce using rule 281 (operator -> GREATER_EQ .)
    RPAREN          reduce using rule 281 (operator -> GREATER_EQ .)
    PLUS_PLUS       reduce using rule 281 (operator -> GREATER_EQ .)
    MINUS_MINUS     reduce using rule 281 (operator -> GREATER_EQ .)
    DOT             reduce using rule 281 (operator -> GREATER_EQ .)
    TIMES           reduce using rule 281 (operator -> GREATER_EQ .)
    DIV             reduce using rule 281 (operator -> GREATER_EQ .)
    MODULO          reduce using rule 281 (operator -> GREATER_EQ .)
    PLUS            reduce using rule 281 (operator -> GREATER_EQ .)
    MINUS           reduce using rule 281 (operator -> GREATER_EQ .)
    LESS            reduce using rule 281 (operator -> GREATER_EQ .)
    GREATER         reduce using rule 281 (operator -> GREATER_EQ .)
    LESS_EQ         reduce using rule 281 (operator -> GREATER_EQ .)
    GREATER_EQ      reduce using rule 281 (operator -> GREATER_EQ .)
    IS_EQ           reduce using rule 281 (operator -> GREATER_EQ .)
    NOT_EQ          reduce using rule 281 (operator -> GREATER_EQ .)
    DOUBLE_AMPERSAND reduce using rule 281 (operator -> GREATER_EQ .)
    QUESTION        reduce using rule 281 (operator -> GREATER_EQ .)
    DOUBLE_PIPE     reduce using rule 281 (operator -> GREATER_EQ .)
    RBRACKET        reduce using rule 281 (operator -> GREATER_EQ .)
    EQ_TIMES        reduce using rule 281 (operator -> GREATER_EQ .)
    EQ_DIV          reduce using rule 281 (operator -> GREATER_EQ .)
    EQ_MODULO       reduce using rule 281 (operator -> GREATER_EQ .)
    EQ_PLUS         reduce using rule 281 (operator -> GREATER_EQ .)
    EQ_MINUS        reduce using rule 281 (operator -> GREATER_EQ .)
    RBRACE          reduce using rule 281 (operator -> GREATER_EQ .)
    COLON           reduce using rule 281 (operator -> GREATER_EQ .)
    ELLIPSIS        reduce using rule 281 (operator -> GREATER_EQ .)


state 55

    (258) operator_function_id -> OPERATOR operator .

    LBRACKET        reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    LPAREN          reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    PLUS_PLUS       reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    MINUS_MINUS     reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    DOT             reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    TIMES           reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    DIV             reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    MODULO          reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    PLUS            reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    MINUS           reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    LESS            reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    GREATER         reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    LESS_EQ         reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    GREATER_EQ      reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    IS_EQ           reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    NOT_EQ          reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    DOUBLE_AMPERSAND reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    QUESTION        reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    DOUBLE_PIPE     reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    RBRACKET        reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    ASSIGN          reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    EQ_TIMES        reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    EQ_DIV          reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    EQ_MODULO       reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    EQ_PLUS         reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    EQ_MINUS        reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    RPAREN          reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    COMMA           reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    SEMICOLON       reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    RBRACE          reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    COLON           reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    ELLIPSIS        reduce using rule 258 (operator_function_id -> OPERATOR operator .)
    LBRACE          reduce using rule 258 (operator_function_id -> OPERATOR operator .)


state 56

    (262) operator -> DIV .

    LPAREN          reduce using rule 262 (operator -> DIV .)
    LBRACKET        reduce using rule 262 (operator -> DIV .)
    ASSIGN          reduce using rule 262 (operator -> DIV .)
    LBRACE          reduce using rule 262 (operator -> DIV .)
    SEMICOLON       reduce using rule 262 (operator -> DIV .)
    COMMA           reduce using rule 262 (operator -> DIV .)
    RPAREN          reduce using rule 262 (operator -> DIV .)
    PLUS_PLUS       reduce using rule 262 (operator -> DIV .)
    MINUS_MINUS     reduce using rule 262 (operator -> DIV .)
    DOT             reduce using rule 262 (operator -> DIV .)
    TIMES           reduce using rule 262 (operator -> DIV .)
    DIV             reduce using rule 262 (operator -> DIV .)
    MODULO          reduce using rule 262 (operator -> DIV .)
    PLUS            reduce using rule 262 (operator -> DIV .)
    MINUS           reduce using rule 262 (operator -> DIV .)
    LESS            reduce using rule 262 (operator -> DIV .)
    GREATER         reduce using rule 262 (operator -> DIV .)
    LESS_EQ         reduce using rule 262 (operator -> DIV .)
    GREATER_EQ      reduce using rule 262 (operator -> DIV .)
    IS_EQ           reduce using rule 262 (operator -> DIV .)
    NOT_EQ          reduce using rule 262 (operator -> DIV .)
    DOUBLE_AMPERSAND reduce using rule 262 (operator -> DIV .)
    QUESTION        reduce using rule 262 (operator -> DIV .)
    DOUBLE_PIPE     reduce using rule 262 (operator -> DIV .)
    RBRACKET        reduce using rule 262 (operator -> DIV .)
    EQ_TIMES        reduce using rule 262 (operator -> DIV .)
    EQ_DIV          reduce using rule 262 (operator -> DIV .)
    EQ_MODULO       reduce using rule 262 (operator -> DIV .)
    EQ_PLUS         reduce using rule 262 (operator -> DIV .)
    EQ_MINUS        reduce using rule 262 (operator -> DIV .)
    RBRACE          reduce using rule 262 (operator -> DIV .)
    COLON           reduce using rule 262 (operator -> DIV .)
    ELLIPSIS        reduce using rule 262 (operator -> DIV .)


state 57

    (245) conversion_function_id -> OPERATOR conversion_type_id .

    LBRACKET        reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    LPAREN          reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    PLUS_PLUS       reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    MINUS_MINUS     reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    DOT             reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    TIMES           reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    DIV             reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    MODULO          reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    PLUS            reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    MINUS           reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    LESS            reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    GREATER         reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    LESS_EQ         reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    GREATER_EQ      reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    IS_EQ           reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    NOT_EQ          reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    DOUBLE_AMPERSAND reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    QUESTION        reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    DOUBLE_PIPE     reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    ASSIGN          reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    EQ_TIMES        reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    EQ_DIV          reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    EQ_MODULO       reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    EQ_PLUS         reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    EQ_MINUS        reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    SEMICOLON       reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    COMMA           reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    RBRACKET        reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    RPAREN          reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    RBRACE          reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    COLON           reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    ELLIPSIS        reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)
    LBRACE          reduce using rule 245 (conversion_function_id -> OPERATOR conversion_type_id .)


state 58

    (260) operator -> MINUS .

    LPAREN          reduce using rule 260 (operator -> MINUS .)
    LBRACKET        reduce using rule 260 (operator -> MINUS .)
    ASSIGN          reduce using rule 260 (operator -> MINUS .)
    LBRACE          reduce using rule 260 (operator -> MINUS .)
    SEMICOLON       reduce using rule 260 (operator -> MINUS .)
    COMMA           reduce using rule 260 (operator -> MINUS .)
    RPAREN          reduce using rule 260 (operator -> MINUS .)
    PLUS_PLUS       reduce using rule 260 (operator -> MINUS .)
    MINUS_MINUS     reduce using rule 260 (operator -> MINUS .)
    DOT             reduce using rule 260 (operator -> MINUS .)
    TIMES           reduce using rule 260 (operator -> MINUS .)
    DIV             reduce using rule 260 (operator -> MINUS .)
    MODULO          reduce using rule 260 (operator -> MINUS .)
    PLUS            reduce using rule 260 (operator -> MINUS .)
    MINUS           reduce using rule 260 (operator -> MINUS .)
    LESS            reduce using rule 260 (operator -> MINUS .)
    GREATER         reduce using rule 260 (operator -> MINUS .)
    LESS_EQ         reduce using rule 260 (operator -> MINUS .)
    GREATER_EQ      reduce using rule 260 (operator -> MINUS .)
    IS_EQ           reduce using rule 260 (operator -> MINUS .)
    NOT_EQ          reduce using rule 260 (operator -> MINUS .)
    DOUBLE_AMPERSAND reduce using rule 260 (operator -> MINUS .)
    QUESTION        reduce using rule 260 (operator -> MINUS .)
    DOUBLE_PIPE     reduce using rule 260 (operator -> MINUS .)
    RBRACKET        reduce using rule 260 (operator -> MINUS .)
    EQ_TIMES        reduce using rule 260 (operator -> MINUS .)
    EQ_DIV          reduce using rule 260 (operator -> MINUS .)
    EQ_MODULO       reduce using rule 260 (operator -> MINUS .)
    EQ_PLUS         reduce using rule 260 (operator -> MINUS .)
    EQ_MINUS        reduce using rule 260 (operator -> MINUS .)
    RBRACE          reduce using rule 260 (operator -> MINUS .)
    COLON           reduce using rule 260 (operator -> MINUS .)
    ELLIPSIS        reduce using rule 260 (operator -> MINUS .)


state 59

    (180) type_specifier_seq -> type_specifier .
    (181) type_specifier_seq -> type_specifier . type_specifier_seq
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    LPAREN          reduce using rule 180 (type_specifier_seq -> type_specifier .)
    TIMES           reduce using rule 180 (type_specifier_seq -> type_specifier .)
    AMPERSAND       reduce using rule 180 (type_specifier_seq -> type_specifier .)
    IDENTIFIER      reduce using rule 180 (type_specifier_seq -> type_specifier .)
    TILDE           reduce using rule 180 (type_specifier_seq -> type_specifier .)
    OPERATOR        reduce using rule 180 (type_specifier_seq -> type_specifier .)
    LBRACKET        reduce using rule 180 (type_specifier_seq -> type_specifier .)
    RPAREN          reduce using rule 180 (type_specifier_seq -> type_specifier .)
    ASSIGN          reduce using rule 180 (type_specifier_seq -> type_specifier .)
    LBRACE          reduce using rule 180 (type_specifier_seq -> type_specifier .)
    SEMICOLON       reduce using rule 180 (type_specifier_seq -> type_specifier .)
    COMMA           reduce using rule 180 (type_specifier_seq -> type_specifier .)
    PLUS_PLUS       reduce using rule 180 (type_specifier_seq -> type_specifier .)
    MINUS_MINUS     reduce using rule 180 (type_specifier_seq -> type_specifier .)
    DOT             reduce using rule 180 (type_specifier_seq -> type_specifier .)
    DIV             reduce using rule 180 (type_specifier_seq -> type_specifier .)
    MODULO          reduce using rule 180 (type_specifier_seq -> type_specifier .)
    PLUS            reduce using rule 180 (type_specifier_seq -> type_specifier .)
    MINUS           reduce using rule 180 (type_specifier_seq -> type_specifier .)
    LESS            reduce using rule 180 (type_specifier_seq -> type_specifier .)
    GREATER         reduce using rule 180 (type_specifier_seq -> type_specifier .)
    LESS_EQ         reduce using rule 180 (type_specifier_seq -> type_specifier .)
    GREATER_EQ      reduce using rule 180 (type_specifier_seq -> type_specifier .)
    IS_EQ           reduce using rule 180 (type_specifier_seq -> type_specifier .)
    NOT_EQ          reduce using rule 180 (type_specifier_seq -> type_specifier .)
    DOUBLE_AMPERSAND reduce using rule 180 (type_specifier_seq -> type_specifier .)
    QUESTION        reduce using rule 180 (type_specifier_seq -> type_specifier .)
    DOUBLE_PIPE     reduce using rule 180 (type_specifier_seq -> type_specifier .)
    RBRACKET        reduce using rule 180 (type_specifier_seq -> type_specifier .)
    EQ_TIMES        reduce using rule 180 (type_specifier_seq -> type_specifier .)
    EQ_DIV          reduce using rule 180 (type_specifier_seq -> type_specifier .)
    EQ_MODULO       reduce using rule 180 (type_specifier_seq -> type_specifier .)
    EQ_PLUS         reduce using rule 180 (type_specifier_seq -> type_specifier .)
    EQ_MINUS        reduce using rule 180 (type_specifier_seq -> type_specifier .)
    RBRACE          reduce using rule 180 (type_specifier_seq -> type_specifier .)
    COLON           reduce using rule 180 (type_specifier_seq -> type_specifier .)
    ELLIPSIS        reduce using rule 180 (type_specifier_seq -> type_specifier .)
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    class_specifier                shift and go to state 2
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    set_class_scope                shift and go to state 15
    type_specifier_seq             shift and go to state 100

state 60

    (272) operator -> EQ_PLUS .

    LPAREN          reduce using rule 272 (operator -> EQ_PLUS .)
    LBRACKET        reduce using rule 272 (operator -> EQ_PLUS .)
    ASSIGN          reduce using rule 272 (operator -> EQ_PLUS .)
    LBRACE          reduce using rule 272 (operator -> EQ_PLUS .)
    SEMICOLON       reduce using rule 272 (operator -> EQ_PLUS .)
    COMMA           reduce using rule 272 (operator -> EQ_PLUS .)
    RPAREN          reduce using rule 272 (operator -> EQ_PLUS .)
    PLUS_PLUS       reduce using rule 272 (operator -> EQ_PLUS .)
    MINUS_MINUS     reduce using rule 272 (operator -> EQ_PLUS .)
    DOT             reduce using rule 272 (operator -> EQ_PLUS .)
    TIMES           reduce using rule 272 (operator -> EQ_PLUS .)
    DIV             reduce using rule 272 (operator -> EQ_PLUS .)
    MODULO          reduce using rule 272 (operator -> EQ_PLUS .)
    PLUS            reduce using rule 272 (operator -> EQ_PLUS .)
    MINUS           reduce using rule 272 (operator -> EQ_PLUS .)
    LESS            reduce using rule 272 (operator -> EQ_PLUS .)
    GREATER         reduce using rule 272 (operator -> EQ_PLUS .)
    LESS_EQ         reduce using rule 272 (operator -> EQ_PLUS .)
    GREATER_EQ      reduce using rule 272 (operator -> EQ_PLUS .)
    IS_EQ           reduce using rule 272 (operator -> EQ_PLUS .)
    NOT_EQ          reduce using rule 272 (operator -> EQ_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 272 (operator -> EQ_PLUS .)
    QUESTION        reduce using rule 272 (operator -> EQ_PLUS .)
    DOUBLE_PIPE     reduce using rule 272 (operator -> EQ_PLUS .)
    RBRACKET        reduce using rule 272 (operator -> EQ_PLUS .)
    EQ_TIMES        reduce using rule 272 (operator -> EQ_PLUS .)
    EQ_DIV          reduce using rule 272 (operator -> EQ_PLUS .)
    EQ_MODULO       reduce using rule 272 (operator -> EQ_PLUS .)
    EQ_PLUS         reduce using rule 272 (operator -> EQ_PLUS .)
    EQ_MINUS        reduce using rule 272 (operator -> EQ_PLUS .)
    RBRACE          reduce using rule 272 (operator -> EQ_PLUS .)
    COLON           reduce using rule 272 (operator -> EQ_PLUS .)
    ELLIPSIS        reduce using rule 272 (operator -> EQ_PLUS .)


state 61

    (282) operator -> DOUBLE_AMPERSAND .

    LPAREN          reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    LBRACKET        reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    ASSIGN          reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    LBRACE          reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    SEMICOLON       reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    COMMA           reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    RPAREN          reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    PLUS_PLUS       reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    MINUS_MINUS     reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    DOT             reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    TIMES           reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    DIV             reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    MODULO          reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    PLUS            reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    MINUS           reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    LESS            reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    GREATER         reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    LESS_EQ         reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    GREATER_EQ      reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    IS_EQ           reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    NOT_EQ          reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    DOUBLE_AMPERSAND reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    QUESTION        reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    DOUBLE_PIPE     reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    RBRACKET        reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    EQ_TIMES        reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    EQ_DIV          reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    EQ_MODULO       reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    EQ_PLUS         reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    EQ_MINUS        reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    RBRACE          reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    COLON           reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)
    ELLIPSIS        reduce using rule 282 (operator -> DOUBLE_AMPERSAND .)


state 62

    (273) operator -> EQ_MINUS .

    LPAREN          reduce using rule 273 (operator -> EQ_MINUS .)
    LBRACKET        reduce using rule 273 (operator -> EQ_MINUS .)
    ASSIGN          reduce using rule 273 (operator -> EQ_MINUS .)
    LBRACE          reduce using rule 273 (operator -> EQ_MINUS .)
    SEMICOLON       reduce using rule 273 (operator -> EQ_MINUS .)
    COMMA           reduce using rule 273 (operator -> EQ_MINUS .)
    RPAREN          reduce using rule 273 (operator -> EQ_MINUS .)
    PLUS_PLUS       reduce using rule 273 (operator -> EQ_MINUS .)
    MINUS_MINUS     reduce using rule 273 (operator -> EQ_MINUS .)
    DOT             reduce using rule 273 (operator -> EQ_MINUS .)
    TIMES           reduce using rule 273 (operator -> EQ_MINUS .)
    DIV             reduce using rule 273 (operator -> EQ_MINUS .)
    MODULO          reduce using rule 273 (operator -> EQ_MINUS .)
    PLUS            reduce using rule 273 (operator -> EQ_MINUS .)
    MINUS           reduce using rule 273 (operator -> EQ_MINUS .)
    LESS            reduce using rule 273 (operator -> EQ_MINUS .)
    GREATER         reduce using rule 273 (operator -> EQ_MINUS .)
    LESS_EQ         reduce using rule 273 (operator -> EQ_MINUS .)
    GREATER_EQ      reduce using rule 273 (operator -> EQ_MINUS .)
    IS_EQ           reduce using rule 273 (operator -> EQ_MINUS .)
    NOT_EQ          reduce using rule 273 (operator -> EQ_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 273 (operator -> EQ_MINUS .)
    QUESTION        reduce using rule 273 (operator -> EQ_MINUS .)
    DOUBLE_PIPE     reduce using rule 273 (operator -> EQ_MINUS .)
    RBRACKET        reduce using rule 273 (operator -> EQ_MINUS .)
    EQ_TIMES        reduce using rule 273 (operator -> EQ_MINUS .)
    EQ_DIV          reduce using rule 273 (operator -> EQ_MINUS .)
    EQ_MODULO       reduce using rule 273 (operator -> EQ_MINUS .)
    EQ_PLUS         reduce using rule 273 (operator -> EQ_MINUS .)
    EQ_MINUS        reduce using rule 273 (operator -> EQ_MINUS .)
    RBRACE          reduce using rule 273 (operator -> EQ_MINUS .)
    COLON           reduce using rule 273 (operator -> EQ_MINUS .)
    ELLIPSIS        reduce using rule 273 (operator -> EQ_MINUS .)


state 63

    (266) operator -> PIPE .

    LPAREN          reduce using rule 266 (operator -> PIPE .)
    LBRACKET        reduce using rule 266 (operator -> PIPE .)
    ASSIGN          reduce using rule 266 (operator -> PIPE .)
    LBRACE          reduce using rule 266 (operator -> PIPE .)
    SEMICOLON       reduce using rule 266 (operator -> PIPE .)
    COMMA           reduce using rule 266 (operator -> PIPE .)
    RPAREN          reduce using rule 266 (operator -> PIPE .)
    PLUS_PLUS       reduce using rule 266 (operator -> PIPE .)
    MINUS_MINUS     reduce using rule 266 (operator -> PIPE .)
    DOT             reduce using rule 266 (operator -> PIPE .)
    TIMES           reduce using rule 266 (operator -> PIPE .)
    DIV             reduce using rule 266 (operator -> PIPE .)
    MODULO          reduce using rule 266 (operator -> PIPE .)
    PLUS            reduce using rule 266 (operator -> PIPE .)
    MINUS           reduce using rule 266 (operator -> PIPE .)
    LESS            reduce using rule 266 (operator -> PIPE .)
    GREATER         reduce using rule 266 (operator -> PIPE .)
    LESS_EQ         reduce using rule 266 (operator -> PIPE .)
    GREATER_EQ      reduce using rule 266 (operator -> PIPE .)
    IS_EQ           reduce using rule 266 (operator -> PIPE .)
    NOT_EQ          reduce using rule 266 (operator -> PIPE .)
    DOUBLE_AMPERSAND reduce using rule 266 (operator -> PIPE .)
    QUESTION        reduce using rule 266 (operator -> PIPE .)
    DOUBLE_PIPE     reduce using rule 266 (operator -> PIPE .)
    RBRACKET        reduce using rule 266 (operator -> PIPE .)
    EQ_TIMES        reduce using rule 266 (operator -> PIPE .)
    EQ_DIV          reduce using rule 266 (operator -> PIPE .)
    EQ_MODULO       reduce using rule 266 (operator -> PIPE .)
    EQ_PLUS         reduce using rule 266 (operator -> PIPE .)
    EQ_MINUS        reduce using rule 266 (operator -> PIPE .)
    RBRACE          reduce using rule 266 (operator -> PIPE .)
    COLON           reduce using rule 266 (operator -> PIPE .)
    ELLIPSIS        reduce using rule 266 (operator -> PIPE .)


state 64

    (259) operator -> PLUS .

    LPAREN          reduce using rule 259 (operator -> PLUS .)
    LBRACKET        reduce using rule 259 (operator -> PLUS .)
    ASSIGN          reduce using rule 259 (operator -> PLUS .)
    LBRACE          reduce using rule 259 (operator -> PLUS .)
    SEMICOLON       reduce using rule 259 (operator -> PLUS .)
    COMMA           reduce using rule 259 (operator -> PLUS .)
    RPAREN          reduce using rule 259 (operator -> PLUS .)
    PLUS_PLUS       reduce using rule 259 (operator -> PLUS .)
    MINUS_MINUS     reduce using rule 259 (operator -> PLUS .)
    DOT             reduce using rule 259 (operator -> PLUS .)
    TIMES           reduce using rule 259 (operator -> PLUS .)
    DIV             reduce using rule 259 (operator -> PLUS .)
    MODULO          reduce using rule 259 (operator -> PLUS .)
    PLUS            reduce using rule 259 (operator -> PLUS .)
    MINUS           reduce using rule 259 (operator -> PLUS .)
    LESS            reduce using rule 259 (operator -> PLUS .)
    GREATER         reduce using rule 259 (operator -> PLUS .)
    LESS_EQ         reduce using rule 259 (operator -> PLUS .)
    GREATER_EQ      reduce using rule 259 (operator -> PLUS .)
    IS_EQ           reduce using rule 259 (operator -> PLUS .)
    NOT_EQ          reduce using rule 259 (operator -> PLUS .)
    DOUBLE_AMPERSAND reduce using rule 259 (operator -> PLUS .)
    QUESTION        reduce using rule 259 (operator -> PLUS .)
    DOUBLE_PIPE     reduce using rule 259 (operator -> PLUS .)
    RBRACKET        reduce using rule 259 (operator -> PLUS .)
    EQ_TIMES        reduce using rule 259 (operator -> PLUS .)
    EQ_DIV          reduce using rule 259 (operator -> PLUS .)
    EQ_MODULO       reduce using rule 259 (operator -> PLUS .)
    EQ_PLUS         reduce using rule 259 (operator -> PLUS .)
    EQ_MINUS        reduce using rule 259 (operator -> PLUS .)
    RBRACE          reduce using rule 259 (operator -> PLUS .)
    COLON           reduce using rule 259 (operator -> PLUS .)
    ELLIPSIS        reduce using rule 259 (operator -> PLUS .)


state 65

    (267) operator -> TILDE .

    LPAREN          reduce using rule 267 (operator -> TILDE .)
    LBRACKET        reduce using rule 267 (operator -> TILDE .)
    ASSIGN          reduce using rule 267 (operator -> TILDE .)
    LBRACE          reduce using rule 267 (operator -> TILDE .)
    SEMICOLON       reduce using rule 267 (operator -> TILDE .)
    COMMA           reduce using rule 267 (operator -> TILDE .)
    RPAREN          reduce using rule 267 (operator -> TILDE .)
    PLUS_PLUS       reduce using rule 267 (operator -> TILDE .)
    MINUS_MINUS     reduce using rule 267 (operator -> TILDE .)
    DOT             reduce using rule 267 (operator -> TILDE .)
    TIMES           reduce using rule 267 (operator -> TILDE .)
    DIV             reduce using rule 267 (operator -> TILDE .)
    MODULO          reduce using rule 267 (operator -> TILDE .)
    PLUS            reduce using rule 267 (operator -> TILDE .)
    MINUS           reduce using rule 267 (operator -> TILDE .)
    LESS            reduce using rule 267 (operator -> TILDE .)
    GREATER         reduce using rule 267 (operator -> TILDE .)
    LESS_EQ         reduce using rule 267 (operator -> TILDE .)
    GREATER_EQ      reduce using rule 267 (operator -> TILDE .)
    IS_EQ           reduce using rule 267 (operator -> TILDE .)
    NOT_EQ          reduce using rule 267 (operator -> TILDE .)
    DOUBLE_AMPERSAND reduce using rule 267 (operator -> TILDE .)
    QUESTION        reduce using rule 267 (operator -> TILDE .)
    DOUBLE_PIPE     reduce using rule 267 (operator -> TILDE .)
    RBRACKET        reduce using rule 267 (operator -> TILDE .)
    EQ_TIMES        reduce using rule 267 (operator -> TILDE .)
    EQ_DIV          reduce using rule 267 (operator -> TILDE .)
    EQ_MODULO       reduce using rule 267 (operator -> TILDE .)
    EQ_PLUS         reduce using rule 267 (operator -> TILDE .)
    EQ_MINUS        reduce using rule 267 (operator -> TILDE .)
    RBRACE          reduce using rule 267 (operator -> TILDE .)
    COLON           reduce using rule 267 (operator -> TILDE .)
    ELLIPSIS        reduce using rule 267 (operator -> TILDE .)


state 66

    (286) operator -> COMMA .

    LPAREN          reduce using rule 286 (operator -> COMMA .)
    LBRACKET        reduce using rule 286 (operator -> COMMA .)
    ASSIGN          reduce using rule 286 (operator -> COMMA .)
    LBRACE          reduce using rule 286 (operator -> COMMA .)
    SEMICOLON       reduce using rule 286 (operator -> COMMA .)
    COMMA           reduce using rule 286 (operator -> COMMA .)
    RPAREN          reduce using rule 286 (operator -> COMMA .)
    PLUS_PLUS       reduce using rule 286 (operator -> COMMA .)
    MINUS_MINUS     reduce using rule 286 (operator -> COMMA .)
    DOT             reduce using rule 286 (operator -> COMMA .)
    TIMES           reduce using rule 286 (operator -> COMMA .)
    DIV             reduce using rule 286 (operator -> COMMA .)
    MODULO          reduce using rule 286 (operator -> COMMA .)
    PLUS            reduce using rule 286 (operator -> COMMA .)
    MINUS           reduce using rule 286 (operator -> COMMA .)
    LESS            reduce using rule 286 (operator -> COMMA .)
    GREATER         reduce using rule 286 (operator -> COMMA .)
    LESS_EQ         reduce using rule 286 (operator -> COMMA .)
    GREATER_EQ      reduce using rule 286 (operator -> COMMA .)
    IS_EQ           reduce using rule 286 (operator -> COMMA .)
    NOT_EQ          reduce using rule 286 (operator -> COMMA .)
    DOUBLE_AMPERSAND reduce using rule 286 (operator -> COMMA .)
    QUESTION        reduce using rule 286 (operator -> COMMA .)
    DOUBLE_PIPE     reduce using rule 286 (operator -> COMMA .)
    RBRACKET        reduce using rule 286 (operator -> COMMA .)
    EQ_TIMES        reduce using rule 286 (operator -> COMMA .)
    EQ_DIV          reduce using rule 286 (operator -> COMMA .)
    EQ_MODULO       reduce using rule 286 (operator -> COMMA .)
    EQ_PLUS         reduce using rule 286 (operator -> COMMA .)
    EQ_MINUS        reduce using rule 286 (operator -> COMMA .)
    RBRACE          reduce using rule 286 (operator -> COMMA .)
    COLON           reduce using rule 286 (operator -> COMMA .)
    ELLIPSIS        reduce using rule 286 (operator -> COMMA .)


state 67

    (279) operator -> NOT_EQ .

    LPAREN          reduce using rule 279 (operator -> NOT_EQ .)
    LBRACKET        reduce using rule 279 (operator -> NOT_EQ .)
    ASSIGN          reduce using rule 279 (operator -> NOT_EQ .)
    LBRACE          reduce using rule 279 (operator -> NOT_EQ .)
    SEMICOLON       reduce using rule 279 (operator -> NOT_EQ .)
    COMMA           reduce using rule 279 (operator -> NOT_EQ .)
    RPAREN          reduce using rule 279 (operator -> NOT_EQ .)
    PLUS_PLUS       reduce using rule 279 (operator -> NOT_EQ .)
    MINUS_MINUS     reduce using rule 279 (operator -> NOT_EQ .)
    DOT             reduce using rule 279 (operator -> NOT_EQ .)
    TIMES           reduce using rule 279 (operator -> NOT_EQ .)
    DIV             reduce using rule 279 (operator -> NOT_EQ .)
    MODULO          reduce using rule 279 (operator -> NOT_EQ .)
    PLUS            reduce using rule 279 (operator -> NOT_EQ .)
    MINUS           reduce using rule 279 (operator -> NOT_EQ .)
    LESS            reduce using rule 279 (operator -> NOT_EQ .)
    GREATER         reduce using rule 279 (operator -> NOT_EQ .)
    LESS_EQ         reduce using rule 279 (operator -> NOT_EQ .)
    GREATER_EQ      reduce using rule 279 (operator -> NOT_EQ .)
    IS_EQ           reduce using rule 279 (operator -> NOT_EQ .)
    NOT_EQ          reduce using rule 279 (operator -> NOT_EQ .)
    DOUBLE_AMPERSAND reduce using rule 279 (operator -> NOT_EQ .)
    QUESTION        reduce using rule 279 (operator -> NOT_EQ .)
    DOUBLE_PIPE     reduce using rule 279 (operator -> NOT_EQ .)
    RBRACKET        reduce using rule 279 (operator -> NOT_EQ .)
    EQ_TIMES        reduce using rule 279 (operator -> NOT_EQ .)
    EQ_DIV          reduce using rule 279 (operator -> NOT_EQ .)
    EQ_MODULO       reduce using rule 279 (operator -> NOT_EQ .)
    EQ_PLUS         reduce using rule 279 (operator -> NOT_EQ .)
    EQ_MINUS        reduce using rule 279 (operator -> NOT_EQ .)
    RBRACE          reduce using rule 279 (operator -> NOT_EQ .)
    COLON           reduce using rule 279 (operator -> NOT_EQ .)
    ELLIPSIS        reduce using rule 279 (operator -> NOT_EQ .)


state 68

    (269) operator -> ASSIGN .

    LPAREN          reduce using rule 269 (operator -> ASSIGN .)
    LBRACKET        reduce using rule 269 (operator -> ASSIGN .)
    ASSIGN          reduce using rule 269 (operator -> ASSIGN .)
    LBRACE          reduce using rule 269 (operator -> ASSIGN .)
    SEMICOLON       reduce using rule 269 (operator -> ASSIGN .)
    COMMA           reduce using rule 269 (operator -> ASSIGN .)
    RPAREN          reduce using rule 269 (operator -> ASSIGN .)
    PLUS_PLUS       reduce using rule 269 (operator -> ASSIGN .)
    MINUS_MINUS     reduce using rule 269 (operator -> ASSIGN .)
    DOT             reduce using rule 269 (operator -> ASSIGN .)
    TIMES           reduce using rule 269 (operator -> ASSIGN .)
    DIV             reduce using rule 269 (operator -> ASSIGN .)
    MODULO          reduce using rule 269 (operator -> ASSIGN .)
    PLUS            reduce using rule 269 (operator -> ASSIGN .)
    MINUS           reduce using rule 269 (operator -> ASSIGN .)
    LESS            reduce using rule 269 (operator -> ASSIGN .)
    GREATER         reduce using rule 269 (operator -> ASSIGN .)
    LESS_EQ         reduce using rule 269 (operator -> ASSIGN .)
    GREATER_EQ      reduce using rule 269 (operator -> ASSIGN .)
    IS_EQ           reduce using rule 269 (operator -> ASSIGN .)
    NOT_EQ          reduce using rule 269 (operator -> ASSIGN .)
    DOUBLE_AMPERSAND reduce using rule 269 (operator -> ASSIGN .)
    QUESTION        reduce using rule 269 (operator -> ASSIGN .)
    DOUBLE_PIPE     reduce using rule 269 (operator -> ASSIGN .)
    RBRACKET        reduce using rule 269 (operator -> ASSIGN .)
    EQ_TIMES        reduce using rule 269 (operator -> ASSIGN .)
    EQ_DIV          reduce using rule 269 (operator -> ASSIGN .)
    EQ_MODULO       reduce using rule 269 (operator -> ASSIGN .)
    EQ_PLUS         reduce using rule 269 (operator -> ASSIGN .)
    EQ_MINUS        reduce using rule 269 (operator -> ASSIGN .)
    RBRACE          reduce using rule 269 (operator -> ASSIGN .)
    COLON           reduce using rule 269 (operator -> ASSIGN .)
    ELLIPSIS        reduce using rule 269 (operator -> ASSIGN .)


state 69

    (285) operator -> MINUS_MINUS .

    LPAREN          reduce using rule 285 (operator -> MINUS_MINUS .)
    LBRACKET        reduce using rule 285 (operator -> MINUS_MINUS .)
    ASSIGN          reduce using rule 285 (operator -> MINUS_MINUS .)
    LBRACE          reduce using rule 285 (operator -> MINUS_MINUS .)
    SEMICOLON       reduce using rule 285 (operator -> MINUS_MINUS .)
    COMMA           reduce using rule 285 (operator -> MINUS_MINUS .)
    RPAREN          reduce using rule 285 (operator -> MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 285 (operator -> MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 285 (operator -> MINUS_MINUS .)
    DOT             reduce using rule 285 (operator -> MINUS_MINUS .)
    TIMES           reduce using rule 285 (operator -> MINUS_MINUS .)
    DIV             reduce using rule 285 (operator -> MINUS_MINUS .)
    MODULO          reduce using rule 285 (operator -> MINUS_MINUS .)
    PLUS            reduce using rule 285 (operator -> MINUS_MINUS .)
    MINUS           reduce using rule 285 (operator -> MINUS_MINUS .)
    LESS            reduce using rule 285 (operator -> MINUS_MINUS .)
    GREATER         reduce using rule 285 (operator -> MINUS_MINUS .)
    LESS_EQ         reduce using rule 285 (operator -> MINUS_MINUS .)
    GREATER_EQ      reduce using rule 285 (operator -> MINUS_MINUS .)
    IS_EQ           reduce using rule 285 (operator -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 285 (operator -> MINUS_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 285 (operator -> MINUS_MINUS .)
    QUESTION        reduce using rule 285 (operator -> MINUS_MINUS .)
    DOUBLE_PIPE     reduce using rule 285 (operator -> MINUS_MINUS .)
    RBRACKET        reduce using rule 285 (operator -> MINUS_MINUS .)
    EQ_TIMES        reduce using rule 285 (operator -> MINUS_MINUS .)
    EQ_DIV          reduce using rule 285 (operator -> MINUS_MINUS .)
    EQ_MODULO       reduce using rule 285 (operator -> MINUS_MINUS .)
    EQ_PLUS         reduce using rule 285 (operator -> MINUS_MINUS .)
    EQ_MINUS        reduce using rule 285 (operator -> MINUS_MINUS .)
    RBRACE          reduce using rule 285 (operator -> MINUS_MINUS .)
    COLON           reduce using rule 285 (operator -> MINUS_MINUS .)
    ELLIPSIS        reduce using rule 285 (operator -> MINUS_MINUS .)


state 70

    (263) operator -> MODULO .

    LPAREN          reduce using rule 263 (operator -> MODULO .)
    LBRACKET        reduce using rule 263 (operator -> MODULO .)
    ASSIGN          reduce using rule 263 (operator -> MODULO .)
    LBRACE          reduce using rule 263 (operator -> MODULO .)
    SEMICOLON       reduce using rule 263 (operator -> MODULO .)
    COMMA           reduce using rule 263 (operator -> MODULO .)
    RPAREN          reduce using rule 263 (operator -> MODULO .)
    PLUS_PLUS       reduce using rule 263 (operator -> MODULO .)
    MINUS_MINUS     reduce using rule 263 (operator -> MODULO .)
    DOT             reduce using rule 263 (operator -> MODULO .)
    TIMES           reduce using rule 263 (operator -> MODULO .)
    DIV             reduce using rule 263 (operator -> MODULO .)
    MODULO          reduce using rule 263 (operator -> MODULO .)
    PLUS            reduce using rule 263 (operator -> MODULO .)
    MINUS           reduce using rule 263 (operator -> MODULO .)
    LESS            reduce using rule 263 (operator -> MODULO .)
    GREATER         reduce using rule 263 (operator -> MODULO .)
    LESS_EQ         reduce using rule 263 (operator -> MODULO .)
    GREATER_EQ      reduce using rule 263 (operator -> MODULO .)
    IS_EQ           reduce using rule 263 (operator -> MODULO .)
    NOT_EQ          reduce using rule 263 (operator -> MODULO .)
    DOUBLE_AMPERSAND reduce using rule 263 (operator -> MODULO .)
    QUESTION        reduce using rule 263 (operator -> MODULO .)
    DOUBLE_PIPE     reduce using rule 263 (operator -> MODULO .)
    RBRACKET        reduce using rule 263 (operator -> MODULO .)
    EQ_TIMES        reduce using rule 263 (operator -> MODULO .)
    EQ_DIV          reduce using rule 263 (operator -> MODULO .)
    EQ_MODULO       reduce using rule 263 (operator -> MODULO .)
    EQ_PLUS         reduce using rule 263 (operator -> MODULO .)
    EQ_MINUS        reduce using rule 263 (operator -> MODULO .)
    RBRACE          reduce using rule 263 (operator -> MODULO .)
    COLON           reduce using rule 263 (operator -> MODULO .)
    ELLIPSIS        reduce using rule 263 (operator -> MODULO .)


state 71

    (274) operator -> EQ_TIMES .

    LPAREN          reduce using rule 274 (operator -> EQ_TIMES .)
    LBRACKET        reduce using rule 274 (operator -> EQ_TIMES .)
    ASSIGN          reduce using rule 274 (operator -> EQ_TIMES .)
    LBRACE          reduce using rule 274 (operator -> EQ_TIMES .)
    SEMICOLON       reduce using rule 274 (operator -> EQ_TIMES .)
    COMMA           reduce using rule 274 (operator -> EQ_TIMES .)
    RPAREN          reduce using rule 274 (operator -> EQ_TIMES .)
    PLUS_PLUS       reduce using rule 274 (operator -> EQ_TIMES .)
    MINUS_MINUS     reduce using rule 274 (operator -> EQ_TIMES .)
    DOT             reduce using rule 274 (operator -> EQ_TIMES .)
    TIMES           reduce using rule 274 (operator -> EQ_TIMES .)
    DIV             reduce using rule 274 (operator -> EQ_TIMES .)
    MODULO          reduce using rule 274 (operator -> EQ_TIMES .)
    PLUS            reduce using rule 274 (operator -> EQ_TIMES .)
    MINUS           reduce using rule 274 (operator -> EQ_TIMES .)
    LESS            reduce using rule 274 (operator -> EQ_TIMES .)
    GREATER         reduce using rule 274 (operator -> EQ_TIMES .)
    LESS_EQ         reduce using rule 274 (operator -> EQ_TIMES .)
    GREATER_EQ      reduce using rule 274 (operator -> EQ_TIMES .)
    IS_EQ           reduce using rule 274 (operator -> EQ_TIMES .)
    NOT_EQ          reduce using rule 274 (operator -> EQ_TIMES .)
    DOUBLE_AMPERSAND reduce using rule 274 (operator -> EQ_TIMES .)
    QUESTION        reduce using rule 274 (operator -> EQ_TIMES .)
    DOUBLE_PIPE     reduce using rule 274 (operator -> EQ_TIMES .)
    RBRACKET        reduce using rule 274 (operator -> EQ_TIMES .)
    EQ_TIMES        reduce using rule 274 (operator -> EQ_TIMES .)
    EQ_DIV          reduce using rule 274 (operator -> EQ_TIMES .)
    EQ_MODULO       reduce using rule 274 (operator -> EQ_TIMES .)
    EQ_PLUS         reduce using rule 274 (operator -> EQ_TIMES .)
    EQ_MINUS        reduce using rule 274 (operator -> EQ_TIMES .)
    RBRACE          reduce using rule 274 (operator -> EQ_TIMES .)
    COLON           reduce using rule 274 (operator -> EQ_TIMES .)
    ELLIPSIS        reduce using rule 274 (operator -> EQ_TIMES .)


state 72

    (261) operator -> TIMES .

    LPAREN          reduce using rule 261 (operator -> TIMES .)
    LBRACKET        reduce using rule 261 (operator -> TIMES .)
    ASSIGN          reduce using rule 261 (operator -> TIMES .)
    LBRACE          reduce using rule 261 (operator -> TIMES .)
    SEMICOLON       reduce using rule 261 (operator -> TIMES .)
    COMMA           reduce using rule 261 (operator -> TIMES .)
    RPAREN          reduce using rule 261 (operator -> TIMES .)
    PLUS_PLUS       reduce using rule 261 (operator -> TIMES .)
    MINUS_MINUS     reduce using rule 261 (operator -> TIMES .)
    DOT             reduce using rule 261 (operator -> TIMES .)
    TIMES           reduce using rule 261 (operator -> TIMES .)
    DIV             reduce using rule 261 (operator -> TIMES .)
    MODULO          reduce using rule 261 (operator -> TIMES .)
    PLUS            reduce using rule 261 (operator -> TIMES .)
    MINUS           reduce using rule 261 (operator -> TIMES .)
    LESS            reduce using rule 261 (operator -> TIMES .)
    GREATER         reduce using rule 261 (operator -> TIMES .)
    LESS_EQ         reduce using rule 261 (operator -> TIMES .)
    GREATER_EQ      reduce using rule 261 (operator -> TIMES .)
    IS_EQ           reduce using rule 261 (operator -> TIMES .)
    NOT_EQ          reduce using rule 261 (operator -> TIMES .)
    DOUBLE_AMPERSAND reduce using rule 261 (operator -> TIMES .)
    QUESTION        reduce using rule 261 (operator -> TIMES .)
    DOUBLE_PIPE     reduce using rule 261 (operator -> TIMES .)
    RBRACKET        reduce using rule 261 (operator -> TIMES .)
    EQ_TIMES        reduce using rule 261 (operator -> TIMES .)
    EQ_DIV          reduce using rule 261 (operator -> TIMES .)
    EQ_MODULO       reduce using rule 261 (operator -> TIMES .)
    EQ_PLUS         reduce using rule 261 (operator -> TIMES .)
    EQ_MINUS        reduce using rule 261 (operator -> TIMES .)
    RBRACE          reduce using rule 261 (operator -> TIMES .)
    COLON           reduce using rule 261 (operator -> TIMES .)
    ELLIPSIS        reduce using rule 261 (operator -> TIMES .)


state 73

    (265) operator -> AMPERSAND .

    LPAREN          reduce using rule 265 (operator -> AMPERSAND .)
    LBRACKET        reduce using rule 265 (operator -> AMPERSAND .)
    ASSIGN          reduce using rule 265 (operator -> AMPERSAND .)
    LBRACE          reduce using rule 265 (operator -> AMPERSAND .)
    SEMICOLON       reduce using rule 265 (operator -> AMPERSAND .)
    COMMA           reduce using rule 265 (operator -> AMPERSAND .)
    RPAREN          reduce using rule 265 (operator -> AMPERSAND .)
    PLUS_PLUS       reduce using rule 265 (operator -> AMPERSAND .)
    MINUS_MINUS     reduce using rule 265 (operator -> AMPERSAND .)
    DOT             reduce using rule 265 (operator -> AMPERSAND .)
    TIMES           reduce using rule 265 (operator -> AMPERSAND .)
    DIV             reduce using rule 265 (operator -> AMPERSAND .)
    MODULO          reduce using rule 265 (operator -> AMPERSAND .)
    PLUS            reduce using rule 265 (operator -> AMPERSAND .)
    MINUS           reduce using rule 265 (operator -> AMPERSAND .)
    LESS            reduce using rule 265 (operator -> AMPERSAND .)
    GREATER         reduce using rule 265 (operator -> AMPERSAND .)
    LESS_EQ         reduce using rule 265 (operator -> AMPERSAND .)
    GREATER_EQ      reduce using rule 265 (operator -> AMPERSAND .)
    IS_EQ           reduce using rule 265 (operator -> AMPERSAND .)
    NOT_EQ          reduce using rule 265 (operator -> AMPERSAND .)
    DOUBLE_AMPERSAND reduce using rule 265 (operator -> AMPERSAND .)
    QUESTION        reduce using rule 265 (operator -> AMPERSAND .)
    DOUBLE_PIPE     reduce using rule 265 (operator -> AMPERSAND .)
    RBRACKET        reduce using rule 265 (operator -> AMPERSAND .)
    EQ_TIMES        reduce using rule 265 (operator -> AMPERSAND .)
    EQ_DIV          reduce using rule 265 (operator -> AMPERSAND .)
    EQ_MODULO       reduce using rule 265 (operator -> AMPERSAND .)
    EQ_PLUS         reduce using rule 265 (operator -> AMPERSAND .)
    EQ_MINUS        reduce using rule 265 (operator -> AMPERSAND .)
    RBRACE          reduce using rule 265 (operator -> AMPERSAND .)
    COLON           reduce using rule 265 (operator -> AMPERSAND .)
    ELLIPSIS        reduce using rule 265 (operator -> AMPERSAND .)


state 74

    (277) operator -> ARROW .

    LPAREN          reduce using rule 277 (operator -> ARROW .)
    LBRACKET        reduce using rule 277 (operator -> ARROW .)
    ASSIGN          reduce using rule 277 (operator -> ARROW .)
    LBRACE          reduce using rule 277 (operator -> ARROW .)
    SEMICOLON       reduce using rule 277 (operator -> ARROW .)
    COMMA           reduce using rule 277 (operator -> ARROW .)
    RPAREN          reduce using rule 277 (operator -> ARROW .)
    PLUS_PLUS       reduce using rule 277 (operator -> ARROW .)
    MINUS_MINUS     reduce using rule 277 (operator -> ARROW .)
    DOT             reduce using rule 277 (operator -> ARROW .)
    TIMES           reduce using rule 277 (operator -> ARROW .)
    DIV             reduce using rule 277 (operator -> ARROW .)
    MODULO          reduce using rule 277 (operator -> ARROW .)
    PLUS            reduce using rule 277 (operator -> ARROW .)
    MINUS           reduce using rule 277 (operator -> ARROW .)
    LESS            reduce using rule 277 (operator -> ARROW .)
    GREATER         reduce using rule 277 (operator -> ARROW .)
    LESS_EQ         reduce using rule 277 (operator -> ARROW .)
    GREATER_EQ      reduce using rule 277 (operator -> ARROW .)
    IS_EQ           reduce using rule 277 (operator -> ARROW .)
    NOT_EQ          reduce using rule 277 (operator -> ARROW .)
    DOUBLE_AMPERSAND reduce using rule 277 (operator -> ARROW .)
    QUESTION        reduce using rule 277 (operator -> ARROW .)
    DOUBLE_PIPE     reduce using rule 277 (operator -> ARROW .)
    RBRACKET        reduce using rule 277 (operator -> ARROW .)
    EQ_TIMES        reduce using rule 277 (operator -> ARROW .)
    EQ_DIV          reduce using rule 277 (operator -> ARROW .)
    EQ_MODULO       reduce using rule 277 (operator -> ARROW .)
    EQ_PLUS         reduce using rule 277 (operator -> ARROW .)
    EQ_MINUS        reduce using rule 277 (operator -> ARROW .)
    RBRACE          reduce using rule 277 (operator -> ARROW .)
    COLON           reduce using rule 277 (operator -> ARROW .)
    ELLIPSIS        reduce using rule 277 (operator -> ARROW .)


state 75

    (246) conversion_type_id -> type_specifier_seq .
    (247) conversion_type_id -> type_specifier_seq . conversion_declarator
    (248) conversion_declarator -> . ptr_operator
    (249) conversion_declarator -> . ptr_operator conversion_declarator
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND

    LPAREN          reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    LBRACKET        reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    ASSIGN          reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    LBRACE          reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    SEMICOLON       reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    COMMA           reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    RPAREN          reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    PLUS_PLUS       reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    MINUS_MINUS     reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    DOT             reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    TIMES           reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    DIV             reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    MODULO          reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    PLUS            reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    MINUS           reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    LESS            reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    GREATER         reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    LESS_EQ         reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    GREATER_EQ      reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    IS_EQ           reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    NOT_EQ          reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    DOUBLE_AMPERSAND reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    QUESTION        reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    DOUBLE_PIPE     reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    RBRACKET        reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    EQ_TIMES        reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    EQ_DIV          reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    EQ_MODULO       reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    EQ_PLUS         reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    EQ_MINUS        reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    RBRACE          reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    COLON           reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    ELLIPSIS        reduce using rule 246 (conversion_type_id -> type_specifier_seq .)
    AMPERSAND       shift and go to state 36

  ! TIMES           [ shift and go to state 35 ]

    ptr_operator                   shift and go to state 101
    conversion_declarator          shift and go to state 102

state 76

    (278) operator -> IS_EQ .

    LPAREN          reduce using rule 278 (operator -> IS_EQ .)
    LBRACKET        reduce using rule 278 (operator -> IS_EQ .)
    ASSIGN          reduce using rule 278 (operator -> IS_EQ .)
    LBRACE          reduce using rule 278 (operator -> IS_EQ .)
    SEMICOLON       reduce using rule 278 (operator -> IS_EQ .)
    COMMA           reduce using rule 278 (operator -> IS_EQ .)
    RPAREN          reduce using rule 278 (operator -> IS_EQ .)
    PLUS_PLUS       reduce using rule 278 (operator -> IS_EQ .)
    MINUS_MINUS     reduce using rule 278 (operator -> IS_EQ .)
    DOT             reduce using rule 278 (operator -> IS_EQ .)
    TIMES           reduce using rule 278 (operator -> IS_EQ .)
    DIV             reduce using rule 278 (operator -> IS_EQ .)
    MODULO          reduce using rule 278 (operator -> IS_EQ .)
    PLUS            reduce using rule 278 (operator -> IS_EQ .)
    MINUS           reduce using rule 278 (operator -> IS_EQ .)
    LESS            reduce using rule 278 (operator -> IS_EQ .)
    GREATER         reduce using rule 278 (operator -> IS_EQ .)
    LESS_EQ         reduce using rule 278 (operator -> IS_EQ .)
    GREATER_EQ      reduce using rule 278 (operator -> IS_EQ .)
    IS_EQ           reduce using rule 278 (operator -> IS_EQ .)
    NOT_EQ          reduce using rule 278 (operator -> IS_EQ .)
    DOUBLE_AMPERSAND reduce using rule 278 (operator -> IS_EQ .)
    QUESTION        reduce using rule 278 (operator -> IS_EQ .)
    DOUBLE_PIPE     reduce using rule 278 (operator -> IS_EQ .)
    RBRACKET        reduce using rule 278 (operator -> IS_EQ .)
    EQ_TIMES        reduce using rule 278 (operator -> IS_EQ .)
    EQ_DIV          reduce using rule 278 (operator -> IS_EQ .)
    EQ_MODULO       reduce using rule 278 (operator -> IS_EQ .)
    EQ_PLUS         reduce using rule 278 (operator -> IS_EQ .)
    EQ_MINUS        reduce using rule 278 (operator -> IS_EQ .)
    RBRACE          reduce using rule 278 (operator -> IS_EQ .)
    COLON           reduce using rule 278 (operator -> IS_EQ .)
    ELLIPSIS        reduce using rule 278 (operator -> IS_EQ .)


state 77

    (271) operator -> GREATER .

    LPAREN          reduce using rule 271 (operator -> GREATER .)
    LBRACKET        reduce using rule 271 (operator -> GREATER .)
    ASSIGN          reduce using rule 271 (operator -> GREATER .)
    LBRACE          reduce using rule 271 (operator -> GREATER .)
    SEMICOLON       reduce using rule 271 (operator -> GREATER .)
    COMMA           reduce using rule 271 (operator -> GREATER .)
    RPAREN          reduce using rule 271 (operator -> GREATER .)
    PLUS_PLUS       reduce using rule 271 (operator -> GREATER .)
    MINUS_MINUS     reduce using rule 271 (operator -> GREATER .)
    DOT             reduce using rule 271 (operator -> GREATER .)
    TIMES           reduce using rule 271 (operator -> GREATER .)
    DIV             reduce using rule 271 (operator -> GREATER .)
    MODULO          reduce using rule 271 (operator -> GREATER .)
    PLUS            reduce using rule 271 (operator -> GREATER .)
    MINUS           reduce using rule 271 (operator -> GREATER .)
    LESS            reduce using rule 271 (operator -> GREATER .)
    GREATER         reduce using rule 271 (operator -> GREATER .)
    LESS_EQ         reduce using rule 271 (operator -> GREATER .)
    GREATER_EQ      reduce using rule 271 (operator -> GREATER .)
    IS_EQ           reduce using rule 271 (operator -> GREATER .)
    NOT_EQ          reduce using rule 271 (operator -> GREATER .)
    DOUBLE_AMPERSAND reduce using rule 271 (operator -> GREATER .)
    QUESTION        reduce using rule 271 (operator -> GREATER .)
    DOUBLE_PIPE     reduce using rule 271 (operator -> GREATER .)
    RBRACKET        reduce using rule 271 (operator -> GREATER .)
    EQ_TIMES        reduce using rule 271 (operator -> GREATER .)
    EQ_DIV          reduce using rule 271 (operator -> GREATER .)
    EQ_MODULO       reduce using rule 271 (operator -> GREATER .)
    EQ_PLUS         reduce using rule 271 (operator -> GREATER .)
    EQ_MINUS        reduce using rule 271 (operator -> GREATER .)
    RBRACE          reduce using rule 271 (operator -> GREATER .)
    COLON           reduce using rule 271 (operator -> GREATER .)
    ELLIPSIS        reduce using rule 271 (operator -> GREATER .)


state 78

    (275) operator -> EQ_DIV .

    LPAREN          reduce using rule 275 (operator -> EQ_DIV .)
    LBRACKET        reduce using rule 275 (operator -> EQ_DIV .)
    ASSIGN          reduce using rule 275 (operator -> EQ_DIV .)
    LBRACE          reduce using rule 275 (operator -> EQ_DIV .)
    SEMICOLON       reduce using rule 275 (operator -> EQ_DIV .)
    COMMA           reduce using rule 275 (operator -> EQ_DIV .)
    RPAREN          reduce using rule 275 (operator -> EQ_DIV .)
    PLUS_PLUS       reduce using rule 275 (operator -> EQ_DIV .)
    MINUS_MINUS     reduce using rule 275 (operator -> EQ_DIV .)
    DOT             reduce using rule 275 (operator -> EQ_DIV .)
    TIMES           reduce using rule 275 (operator -> EQ_DIV .)
    DIV             reduce using rule 275 (operator -> EQ_DIV .)
    MODULO          reduce using rule 275 (operator -> EQ_DIV .)
    PLUS            reduce using rule 275 (operator -> EQ_DIV .)
    MINUS           reduce using rule 275 (operator -> EQ_DIV .)
    LESS            reduce using rule 275 (operator -> EQ_DIV .)
    GREATER         reduce using rule 275 (operator -> EQ_DIV .)
    LESS_EQ         reduce using rule 275 (operator -> EQ_DIV .)
    GREATER_EQ      reduce using rule 275 (operator -> EQ_DIV .)
    IS_EQ           reduce using rule 275 (operator -> EQ_DIV .)
    NOT_EQ          reduce using rule 275 (operator -> EQ_DIV .)
    DOUBLE_AMPERSAND reduce using rule 275 (operator -> EQ_DIV .)
    QUESTION        reduce using rule 275 (operator -> EQ_DIV .)
    DOUBLE_PIPE     reduce using rule 275 (operator -> EQ_DIV .)
    RBRACKET        reduce using rule 275 (operator -> EQ_DIV .)
    EQ_TIMES        reduce using rule 275 (operator -> EQ_DIV .)
    EQ_DIV          reduce using rule 275 (operator -> EQ_DIV .)
    EQ_MODULO       reduce using rule 275 (operator -> EQ_DIV .)
    EQ_PLUS         reduce using rule 275 (operator -> EQ_DIV .)
    EQ_MINUS        reduce using rule 275 (operator -> EQ_DIV .)
    RBRACE          reduce using rule 275 (operator -> EQ_DIV .)
    COLON           reduce using rule 275 (operator -> EQ_DIV .)
    ELLIPSIS        reduce using rule 275 (operator -> EQ_DIV .)


state 79

    (283) operator -> DOUBLE_PIPE .

    LPAREN          reduce using rule 283 (operator -> DOUBLE_PIPE .)
    LBRACKET        reduce using rule 283 (operator -> DOUBLE_PIPE .)
    ASSIGN          reduce using rule 283 (operator -> DOUBLE_PIPE .)
    LBRACE          reduce using rule 283 (operator -> DOUBLE_PIPE .)
    SEMICOLON       reduce using rule 283 (operator -> DOUBLE_PIPE .)
    COMMA           reduce using rule 283 (operator -> DOUBLE_PIPE .)
    RPAREN          reduce using rule 283 (operator -> DOUBLE_PIPE .)
    PLUS_PLUS       reduce using rule 283 (operator -> DOUBLE_PIPE .)
    MINUS_MINUS     reduce using rule 283 (operator -> DOUBLE_PIPE .)
    DOT             reduce using rule 283 (operator -> DOUBLE_PIPE .)
    TIMES           reduce using rule 283 (operator -> DOUBLE_PIPE .)
    DIV             reduce using rule 283 (operator -> DOUBLE_PIPE .)
    MODULO          reduce using rule 283 (operator -> DOUBLE_PIPE .)
    PLUS            reduce using rule 283 (operator -> DOUBLE_PIPE .)
    MINUS           reduce using rule 283 (operator -> DOUBLE_PIPE .)
    LESS            reduce using rule 283 (operator -> DOUBLE_PIPE .)
    GREATER         reduce using rule 283 (operator -> DOUBLE_PIPE .)
    LESS_EQ         reduce using rule 283 (operator -> DOUBLE_PIPE .)
    GREATER_EQ      reduce using rule 283 (operator -> DOUBLE_PIPE .)
    IS_EQ           reduce using rule 283 (operator -> DOUBLE_PIPE .)
    NOT_EQ          reduce using rule 283 (operator -> DOUBLE_PIPE .)
    DOUBLE_AMPERSAND reduce using rule 283 (operator -> DOUBLE_PIPE .)
    QUESTION        reduce using rule 283 (operator -> DOUBLE_PIPE .)
    DOUBLE_PIPE     reduce using rule 283 (operator -> DOUBLE_PIPE .)
    RBRACKET        reduce using rule 283 (operator -> DOUBLE_PIPE .)
    EQ_TIMES        reduce using rule 283 (operator -> DOUBLE_PIPE .)
    EQ_DIV          reduce using rule 283 (operator -> DOUBLE_PIPE .)
    EQ_MODULO       reduce using rule 283 (operator -> DOUBLE_PIPE .)
    EQ_PLUS         reduce using rule 283 (operator -> DOUBLE_PIPE .)
    EQ_MINUS        reduce using rule 283 (operator -> DOUBLE_PIPE .)
    RBRACE          reduce using rule 283 (operator -> DOUBLE_PIPE .)
    COLON           reduce using rule 283 (operator -> DOUBLE_PIPE .)
    ELLIPSIS        reduce using rule 283 (operator -> DOUBLE_PIPE .)


state 80

    (284) operator -> PLUS_PLUS .

    LPAREN          reduce using rule 284 (operator -> PLUS_PLUS .)
    LBRACKET        reduce using rule 284 (operator -> PLUS_PLUS .)
    ASSIGN          reduce using rule 284 (operator -> PLUS_PLUS .)
    LBRACE          reduce using rule 284 (operator -> PLUS_PLUS .)
    SEMICOLON       reduce using rule 284 (operator -> PLUS_PLUS .)
    COMMA           reduce using rule 284 (operator -> PLUS_PLUS .)
    RPAREN          reduce using rule 284 (operator -> PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 284 (operator -> PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 284 (operator -> PLUS_PLUS .)
    DOT             reduce using rule 284 (operator -> PLUS_PLUS .)
    TIMES           reduce using rule 284 (operator -> PLUS_PLUS .)
    DIV             reduce using rule 284 (operator -> PLUS_PLUS .)
    MODULO          reduce using rule 284 (operator -> PLUS_PLUS .)
    PLUS            reduce using rule 284 (operator -> PLUS_PLUS .)
    MINUS           reduce using rule 284 (operator -> PLUS_PLUS .)
    LESS            reduce using rule 284 (operator -> PLUS_PLUS .)
    GREATER         reduce using rule 284 (operator -> PLUS_PLUS .)
    LESS_EQ         reduce using rule 284 (operator -> PLUS_PLUS .)
    GREATER_EQ      reduce using rule 284 (operator -> PLUS_PLUS .)
    IS_EQ           reduce using rule 284 (operator -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 284 (operator -> PLUS_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 284 (operator -> PLUS_PLUS .)
    QUESTION        reduce using rule 284 (operator -> PLUS_PLUS .)
    DOUBLE_PIPE     reduce using rule 284 (operator -> PLUS_PLUS .)
    RBRACKET        reduce using rule 284 (operator -> PLUS_PLUS .)
    EQ_TIMES        reduce using rule 284 (operator -> PLUS_PLUS .)
    EQ_DIV          reduce using rule 284 (operator -> PLUS_PLUS .)
    EQ_MODULO       reduce using rule 284 (operator -> PLUS_PLUS .)
    EQ_PLUS         reduce using rule 284 (operator -> PLUS_PLUS .)
    EQ_MINUS        reduce using rule 284 (operator -> PLUS_PLUS .)
    RBRACE          reduce using rule 284 (operator -> PLUS_PLUS .)
    COLON           reduce using rule 284 (operator -> PLUS_PLUS .)
    ELLIPSIS        reduce using rule 284 (operator -> PLUS_PLUS .)


state 81

    (276) operator -> EQ_MODULO .

    LPAREN          reduce using rule 276 (operator -> EQ_MODULO .)
    LBRACKET        reduce using rule 276 (operator -> EQ_MODULO .)
    ASSIGN          reduce using rule 276 (operator -> EQ_MODULO .)
    LBRACE          reduce using rule 276 (operator -> EQ_MODULO .)
    SEMICOLON       reduce using rule 276 (operator -> EQ_MODULO .)
    COMMA           reduce using rule 276 (operator -> EQ_MODULO .)
    RPAREN          reduce using rule 276 (operator -> EQ_MODULO .)
    PLUS_PLUS       reduce using rule 276 (operator -> EQ_MODULO .)
    MINUS_MINUS     reduce using rule 276 (operator -> EQ_MODULO .)
    DOT             reduce using rule 276 (operator -> EQ_MODULO .)
    TIMES           reduce using rule 276 (operator -> EQ_MODULO .)
    DIV             reduce using rule 276 (operator -> EQ_MODULO .)
    MODULO          reduce using rule 276 (operator -> EQ_MODULO .)
    PLUS            reduce using rule 276 (operator -> EQ_MODULO .)
    MINUS           reduce using rule 276 (operator -> EQ_MODULO .)
    LESS            reduce using rule 276 (operator -> EQ_MODULO .)
    GREATER         reduce using rule 276 (operator -> EQ_MODULO .)
    LESS_EQ         reduce using rule 276 (operator -> EQ_MODULO .)
    GREATER_EQ      reduce using rule 276 (operator -> EQ_MODULO .)
    IS_EQ           reduce using rule 276 (operator -> EQ_MODULO .)
    NOT_EQ          reduce using rule 276 (operator -> EQ_MODULO .)
    DOUBLE_AMPERSAND reduce using rule 276 (operator -> EQ_MODULO .)
    QUESTION        reduce using rule 276 (operator -> EQ_MODULO .)
    DOUBLE_PIPE     reduce using rule 276 (operator -> EQ_MODULO .)
    RBRACKET        reduce using rule 276 (operator -> EQ_MODULO .)
    EQ_TIMES        reduce using rule 276 (operator -> EQ_MODULO .)
    EQ_DIV          reduce using rule 276 (operator -> EQ_MODULO .)
    EQ_MODULO       reduce using rule 276 (operator -> EQ_MODULO .)
    EQ_PLUS         reduce using rule 276 (operator -> EQ_MODULO .)
    EQ_MINUS        reduce using rule 276 (operator -> EQ_MODULO .)
    RBRACE          reduce using rule 276 (operator -> EQ_MODULO .)
    COLON           reduce using rule 276 (operator -> EQ_MODULO .)
    ELLIPSIS        reduce using rule 276 (operator -> EQ_MODULO .)


state 82

    (25) unqualified_id -> TILDE class_name .

    LBRACKET        reduce using rule 25 (unqualified_id -> TILDE class_name .)
    LPAREN          reduce using rule 25 (unqualified_id -> TILDE class_name .)
    PLUS_PLUS       reduce using rule 25 (unqualified_id -> TILDE class_name .)
    MINUS_MINUS     reduce using rule 25 (unqualified_id -> TILDE class_name .)
    DOT             reduce using rule 25 (unqualified_id -> TILDE class_name .)
    TIMES           reduce using rule 25 (unqualified_id -> TILDE class_name .)
    DIV             reduce using rule 25 (unqualified_id -> TILDE class_name .)
    MODULO          reduce using rule 25 (unqualified_id -> TILDE class_name .)
    PLUS            reduce using rule 25 (unqualified_id -> TILDE class_name .)
    MINUS           reduce using rule 25 (unqualified_id -> TILDE class_name .)
    LESS            reduce using rule 25 (unqualified_id -> TILDE class_name .)
    GREATER         reduce using rule 25 (unqualified_id -> TILDE class_name .)
    LESS_EQ         reduce using rule 25 (unqualified_id -> TILDE class_name .)
    GREATER_EQ      reduce using rule 25 (unqualified_id -> TILDE class_name .)
    IS_EQ           reduce using rule 25 (unqualified_id -> TILDE class_name .)
    NOT_EQ          reduce using rule 25 (unqualified_id -> TILDE class_name .)
    DOUBLE_AMPERSAND reduce using rule 25 (unqualified_id -> TILDE class_name .)
    QUESTION        reduce using rule 25 (unqualified_id -> TILDE class_name .)
    DOUBLE_PIPE     reduce using rule 25 (unqualified_id -> TILDE class_name .)
    RBRACKET        reduce using rule 25 (unqualified_id -> TILDE class_name .)
    ASSIGN          reduce using rule 25 (unqualified_id -> TILDE class_name .)
    EQ_TIMES        reduce using rule 25 (unqualified_id -> TILDE class_name .)
    EQ_DIV          reduce using rule 25 (unqualified_id -> TILDE class_name .)
    EQ_MODULO       reduce using rule 25 (unqualified_id -> TILDE class_name .)
    EQ_PLUS         reduce using rule 25 (unqualified_id -> TILDE class_name .)
    EQ_MINUS        reduce using rule 25 (unqualified_id -> TILDE class_name .)
    RPAREN          reduce using rule 25 (unqualified_id -> TILDE class_name .)
    COMMA           reduce using rule 25 (unqualified_id -> TILDE class_name .)
    SEMICOLON       reduce using rule 25 (unqualified_id -> TILDE class_name .)
    RBRACE          reduce using rule 25 (unqualified_id -> TILDE class_name .)
    COLON           reduce using rule 25 (unqualified_id -> TILDE class_name .)
    ELLIPSIS        reduce using rule 25 (unqualified_id -> TILDE class_name .)
    LBRACE          reduce using rule 25 (unqualified_id -> TILDE class_name .)


state 83

    (212) class_name -> IDENTIFIER .

    COMMA           reduce using rule 212 (class_name -> IDENTIFIER .)
    LBRACE          reduce using rule 212 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 212 (class_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 212 (class_name -> IDENTIFIER .)
    ASSIGN          reduce using rule 212 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 212 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 212 (class_name -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 212 (class_name -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 212 (class_name -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 212 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 212 (class_name -> IDENTIFIER .)
    TIMES           reduce using rule 212 (class_name -> IDENTIFIER .)
    DIV             reduce using rule 212 (class_name -> IDENTIFIER .)
    MODULO          reduce using rule 212 (class_name -> IDENTIFIER .)
    PLUS            reduce using rule 212 (class_name -> IDENTIFIER .)
    MINUS           reduce using rule 212 (class_name -> IDENTIFIER .)
    LESS            reduce using rule 212 (class_name -> IDENTIFIER .)
    GREATER         reduce using rule 212 (class_name -> IDENTIFIER .)
    LESS_EQ         reduce using rule 212 (class_name -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 212 (class_name -> IDENTIFIER .)
    IS_EQ           reduce using rule 212 (class_name -> IDENTIFIER .)
    NOT_EQ          reduce using rule 212 (class_name -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 212 (class_name -> IDENTIFIER .)
    QUESTION        reduce using rule 212 (class_name -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 212 (class_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 212 (class_name -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 212 (class_name -> IDENTIFIER .)
    EQ_DIV          reduce using rule 212 (class_name -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 212 (class_name -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 212 (class_name -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 212 (class_name -> IDENTIFIER .)
    RBRACE          reduce using rule 212 (class_name -> IDENTIFIER .)
    COLON           reduce using rule 212 (class_name -> IDENTIFIER .)


state 84

    (173) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (101) constant_expression_opt -> .
    (102) constant_expression_opt -> . constant_expression
    (100) constant_expression -> . conditional_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RBRACKET        reduce using rule 101 (constant_expression_opt -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    constant_expression_opt        shift and go to state 133
    logical_or_expression          shift and go to state 117
    conversion_function_id         shift and go to state 40
    constant_expression            shift and go to state 118
    conditional_expression         shift and go to state 138
    unqualified_id                 shift and go to state 42

state 85

    (172) direct_declarator -> direct_declarator LPAREN . parameter_declaration_clause RPAREN
    (192) parameter_declaration_clause -> .
    (193) parameter_declaration_clause -> . parameter_declaration_list
    (194) parameter_declaration_clause -> . parameter_declaration_list ELLIPSIS
    (195) parameter_declaration_clause -> . parameter_declaration_list COMMA ELLIPSIS
    (196) parameter_declaration_list -> . parameter_declaration
    (197) parameter_declaration_list -> . parameter_declaration_list COMMA parameter_declaration
    (198) parameter_declaration -> . decl_specifier_seq declarator
    (199) parameter_declaration -> . decl_specifier_seq declarator ASSIGN assignment_expression
    (200) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt
    (201) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression
    (148) decl_specifier_seq -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    RPAREN          reduce using rule 192 (parameter_declaration_clause -> .)
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    type_specifier                 shift and go to state 10
    set_class_scope                shift and go to state 15
    parameter_declaration_list     shift and go to state 143
    decl_specifier                 shift and go to state 16
    parameter_declaration          shift and go to state 141
    decl_specifier_seq             shift and go to state 140
    function_specifier             shift and go to state 8
    parameter_declaration_clause   shift and go to state 142
    simple_type_specifier          shift and go to state 11

state 86

    (174) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 144


state 87

    (170) declarator -> ptr_operator declarator .

    ASSIGN          reduce using rule 170 (declarator -> ptr_operator declarator .)
    LPAREN          reduce using rule 170 (declarator -> ptr_operator declarator .)
    LBRACE          reduce using rule 170 (declarator -> ptr_operator declarator .)
    SEMICOLON       reduce using rule 170 (declarator -> ptr_operator declarator .)
    COMMA           reduce using rule 170 (declarator -> ptr_operator declarator .)
    RPAREN          reduce using rule 170 (declarator -> ptr_operator declarator .)
    ELLIPSIS        reduce using rule 170 (declarator -> ptr_operator declarator .)


state 88

    (202) function_definition -> decl_specifier_seq declarator function_scope . function_body unset_function_scope
    (203) function_body -> . compound_statement
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE

    LBRACE          shift and go to state 145

    function_body                  shift and go to state 146
    compound_statement             shift and go to state 147

state 89

    (168) init_declarator -> declarator initializer_opt .

    SEMICOLON       reduce using rule 168 (init_declarator -> declarator initializer_opt .)
    COMMA           reduce using rule 168 (init_declarator -> declarator initializer_opt .)


state 90

    (206) initializer_opt -> LPAREN . expression_list RPAREN
    (33) expression_list -> . assignment_expression
    (34) expression_list -> . expression_list COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 151
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    expression_list                shift and go to state 152
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 91

    (205) initializer_opt -> ASSIGN . initializer_clause
    (207) initializer_clause -> . assignment_expression
    (208) initializer_clause -> . LBRACE initializer_list RBRACE
    (209) initializer_clause -> . LBRACE RBRACE
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LBRACE          shift and go to state 156
    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 131
    conditional_expression         shift and go to state 153
    initializer_clause             shift and go to state 155
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 92

    (146) simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .

    IDENTIFIER      reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    CASE            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    LBRACE          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    IF              reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    DO              reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    FOR             reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    PRINT           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    SCAN            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    MALLOC          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    INLINE          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    BOOL            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    INT             reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    VOID            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    PLUS_PLUS       reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    MINUS_MINUS     reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    EXCLAMATION     reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    TILDE           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    TIMES           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    AMPERSAND       reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    NEW             reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    DELETE          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    THIS            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    INUMBER         reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    DNUMBER         reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    LIT_CHAR        reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    LIT_STR         reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    TRUE            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    FALSE           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    RBRACE          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    CLASS           reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    ELSE            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)
    $end            reduce using rule 146 (simple_declaration -> IDENTIFIER init_declarator_list SEMICOLON .)


state 93

    (216) class_key -> CLASS .

    IDENTIFIER      reduce using rule 216 (class_key -> CLASS .)


state 94

    (213) class_specifier -> set_class_scope new_scope class_head . LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> set_class_scope new_scope class_head . LBRACE RBRACE finish_scope unset_class_scope

    LBRACE          shift and go to state 157


state 95

    (215) class_head -> class_key . IDENTIFIER base_clause_opt

    IDENTIFIER      shift and go to state 158


state 96

    (217) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 217 (class_key -> STRUCT .)


state 97

    (166) init_declarator_list -> init_declarator_list COMMA mark_1 . init_declarator
    (168) init_declarator -> . declarator initializer_opt
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    init_declarator                shift and go to state 159
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 44
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38

state 98

    (287) operator -> LPAREN RPAREN .

    LPAREN          reduce using rule 287 (operator -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 287 (operator -> LPAREN RPAREN .)
    ASSIGN          reduce using rule 287 (operator -> LPAREN RPAREN .)
    LBRACE          reduce using rule 287 (operator -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 287 (operator -> LPAREN RPAREN .)
    COMMA           reduce using rule 287 (operator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 287 (operator -> LPAREN RPAREN .)
    PLUS_PLUS       reduce using rule 287 (operator -> LPAREN RPAREN .)
    MINUS_MINUS     reduce using rule 287 (operator -> LPAREN RPAREN .)
    DOT             reduce using rule 287 (operator -> LPAREN RPAREN .)
    TIMES           reduce using rule 287 (operator -> LPAREN RPAREN .)
    DIV             reduce using rule 287 (operator -> LPAREN RPAREN .)
    MODULO          reduce using rule 287 (operator -> LPAREN RPAREN .)
    PLUS            reduce using rule 287 (operator -> LPAREN RPAREN .)
    MINUS           reduce using rule 287 (operator -> LPAREN RPAREN .)
    LESS            reduce using rule 287 (operator -> LPAREN RPAREN .)
    GREATER         reduce using rule 287 (operator -> LPAREN RPAREN .)
    LESS_EQ         reduce using rule 287 (operator -> LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 287 (operator -> LPAREN RPAREN .)
    IS_EQ           reduce using rule 287 (operator -> LPAREN RPAREN .)
    NOT_EQ          reduce using rule 287 (operator -> LPAREN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 287 (operator -> LPAREN RPAREN .)
    QUESTION        reduce using rule 287 (operator -> LPAREN RPAREN .)
    DOUBLE_PIPE     reduce using rule 287 (operator -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 287 (operator -> LPAREN RPAREN .)
    EQ_TIMES        reduce using rule 287 (operator -> LPAREN RPAREN .)
    EQ_DIV          reduce using rule 287 (operator -> LPAREN RPAREN .)
    EQ_MODULO       reduce using rule 287 (operator -> LPAREN RPAREN .)
    EQ_PLUS         reduce using rule 287 (operator -> LPAREN RPAREN .)
    EQ_MINUS        reduce using rule 287 (operator -> LPAREN RPAREN .)
    RBRACE          reduce using rule 287 (operator -> LPAREN RPAREN .)
    COLON           reduce using rule 287 (operator -> LPAREN RPAREN .)
    ELLIPSIS        reduce using rule 287 (operator -> LPAREN RPAREN .)


state 99

    (288) operator -> LBRACKET RBRACKET .

    LPAREN          reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    MINUS_MINUS     reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    DOT             reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    DIV             reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    MODULO          reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    LESS            reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    QUESTION        reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    COLON           reduce using rule 288 (operator -> LBRACKET RBRACKET .)
    ELLIPSIS        reduce using rule 288 (operator -> LBRACKET RBRACKET .)


state 100

    (181) type_specifier_seq -> type_specifier type_specifier_seq .

    LPAREN          reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    TIMES           reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    AMPERSAND       reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    IDENTIFIER      reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    TILDE           reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    OPERATOR        reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    LBRACKET        reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    RPAREN          reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    ASSIGN          reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    LBRACE          reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    SEMICOLON       reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    COMMA           reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    PLUS_PLUS       reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    MINUS_MINUS     reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    DOT             reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    DIV             reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    MODULO          reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    PLUS            reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    MINUS           reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    LESS            reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    GREATER         reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    LESS_EQ         reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    GREATER_EQ      reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    IS_EQ           reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    NOT_EQ          reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    DOUBLE_AMPERSAND reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    QUESTION        reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    DOUBLE_PIPE     reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    RBRACKET        reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    EQ_TIMES        reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    EQ_DIV          reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    EQ_MODULO       reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    EQ_PLUS         reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    EQ_MINUS        reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    RBRACE          reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    COLON           reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)
    ELLIPSIS        reduce using rule 181 (type_specifier_seq -> type_specifier type_specifier_seq .)


state 101

    (248) conversion_declarator -> ptr_operator .
    (249) conversion_declarator -> ptr_operator . conversion_declarator
    (248) conversion_declarator -> . ptr_operator
    (249) conversion_declarator -> . ptr_operator conversion_declarator
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND

    LPAREN          reduce using rule 248 (conversion_declarator -> ptr_operator .)
    LBRACKET        reduce using rule 248 (conversion_declarator -> ptr_operator .)
    ASSIGN          reduce using rule 248 (conversion_declarator -> ptr_operator .)
    LBRACE          reduce using rule 248 (conversion_declarator -> ptr_operator .)
    SEMICOLON       reduce using rule 248 (conversion_declarator -> ptr_operator .)
    COMMA           reduce using rule 248 (conversion_declarator -> ptr_operator .)
    RPAREN          reduce using rule 248 (conversion_declarator -> ptr_operator .)
    PLUS_PLUS       reduce using rule 248 (conversion_declarator -> ptr_operator .)
    MINUS_MINUS     reduce using rule 248 (conversion_declarator -> ptr_operator .)
    DOT             reduce using rule 248 (conversion_declarator -> ptr_operator .)
    TIMES           reduce using rule 248 (conversion_declarator -> ptr_operator .)
    DIV             reduce using rule 248 (conversion_declarator -> ptr_operator .)
    MODULO          reduce using rule 248 (conversion_declarator -> ptr_operator .)
    PLUS            reduce using rule 248 (conversion_declarator -> ptr_operator .)
    MINUS           reduce using rule 248 (conversion_declarator -> ptr_operator .)
    LESS            reduce using rule 248 (conversion_declarator -> ptr_operator .)
    GREATER         reduce using rule 248 (conversion_declarator -> ptr_operator .)
    LESS_EQ         reduce using rule 248 (conversion_declarator -> ptr_operator .)
    GREATER_EQ      reduce using rule 248 (conversion_declarator -> ptr_operator .)
    IS_EQ           reduce using rule 248 (conversion_declarator -> ptr_operator .)
    NOT_EQ          reduce using rule 248 (conversion_declarator -> ptr_operator .)
    DOUBLE_AMPERSAND reduce using rule 248 (conversion_declarator -> ptr_operator .)
    QUESTION        reduce using rule 248 (conversion_declarator -> ptr_operator .)
    DOUBLE_PIPE     reduce using rule 248 (conversion_declarator -> ptr_operator .)
    RBRACKET        reduce using rule 248 (conversion_declarator -> ptr_operator .)
    EQ_TIMES        reduce using rule 248 (conversion_declarator -> ptr_operator .)
    EQ_DIV          reduce using rule 248 (conversion_declarator -> ptr_operator .)
    EQ_MODULO       reduce using rule 248 (conversion_declarator -> ptr_operator .)
    EQ_PLUS         reduce using rule 248 (conversion_declarator -> ptr_operator .)
    EQ_MINUS        reduce using rule 248 (conversion_declarator -> ptr_operator .)
    RBRACE          reduce using rule 248 (conversion_declarator -> ptr_operator .)
    COLON           reduce using rule 248 (conversion_declarator -> ptr_operator .)
    ELLIPSIS        reduce using rule 248 (conversion_declarator -> ptr_operator .)
    AMPERSAND       shift and go to state 36

  ! TIMES           [ shift and go to state 35 ]

    ptr_operator                   shift and go to state 101
    conversion_declarator          shift and go to state 160

state 102

    (247) conversion_type_id -> type_specifier_seq conversion_declarator .

    LPAREN          reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    LBRACKET        reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    ASSIGN          reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    LBRACE          reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    SEMICOLON       reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    COMMA           reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    RPAREN          reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    PLUS_PLUS       reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    MINUS_MINUS     reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    DOT             reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    TIMES           reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    DIV             reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    MODULO          reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    PLUS            reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    MINUS           reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    LESS            reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    GREATER         reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    LESS_EQ         reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    GREATER_EQ      reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    IS_EQ           reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    NOT_EQ          reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    DOUBLE_AMPERSAND reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    QUESTION        reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    DOUBLE_PIPE     reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    RBRACKET        reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    EQ_TIMES        reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    EQ_DIV          reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    EQ_MODULO       reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    EQ_PLUS         reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    EQ_MINUS        reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    RBRACE          reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    COLON           reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)
    ELLIPSIS        reduce using rule 247 (conversion_type_id -> type_specifier_seq conversion_declarator .)


state 103

    (49) unary_expression -> EXCLAMATION .

    TIMES           reduce using rule 49 (unary_expression -> EXCLAMATION .)
    DIV             reduce using rule 49 (unary_expression -> EXCLAMATION .)
    MODULO          reduce using rule 49 (unary_expression -> EXCLAMATION .)
    PLUS            reduce using rule 49 (unary_expression -> EXCLAMATION .)
    MINUS           reduce using rule 49 (unary_expression -> EXCLAMATION .)
    LESS            reduce using rule 49 (unary_expression -> EXCLAMATION .)
    GREATER         reduce using rule 49 (unary_expression -> EXCLAMATION .)
    LESS_EQ         reduce using rule 49 (unary_expression -> EXCLAMATION .)
    GREATER_EQ      reduce using rule 49 (unary_expression -> EXCLAMATION .)
    IS_EQ           reduce using rule 49 (unary_expression -> EXCLAMATION .)
    NOT_EQ          reduce using rule 49 (unary_expression -> EXCLAMATION .)
    DOUBLE_AMPERSAND reduce using rule 49 (unary_expression -> EXCLAMATION .)
    QUESTION        reduce using rule 49 (unary_expression -> EXCLAMATION .)
    DOUBLE_PIPE     reduce using rule 49 (unary_expression -> EXCLAMATION .)
    ASSIGN          reduce using rule 49 (unary_expression -> EXCLAMATION .)
    EQ_TIMES        reduce using rule 49 (unary_expression -> EXCLAMATION .)
    EQ_DIV          reduce using rule 49 (unary_expression -> EXCLAMATION .)
    EQ_MODULO       reduce using rule 49 (unary_expression -> EXCLAMATION .)
    EQ_PLUS         reduce using rule 49 (unary_expression -> EXCLAMATION .)
    EQ_MINUS        reduce using rule 49 (unary_expression -> EXCLAMATION .)
    SEMICOLON       reduce using rule 49 (unary_expression -> EXCLAMATION .)
    COMMA           reduce using rule 49 (unary_expression -> EXCLAMATION .)
    ELLIPSIS        reduce using rule 49 (unary_expression -> EXCLAMATION .)
    RPAREN          reduce using rule 49 (unary_expression -> EXCLAMATION .)
    RBRACKET        reduce using rule 49 (unary_expression -> EXCLAMATION .)
    RBRACE          reduce using rule 49 (unary_expression -> EXCLAMATION .)
    COLON           reduce using rule 49 (unary_expression -> EXCLAMATION .)


state 104

    (66) cast_expression -> unary_expression .

    TIMES           reduce using rule 66 (cast_expression -> unary_expression .)
    DIV             reduce using rule 66 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 66 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 66 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 66 (cast_expression -> unary_expression .)
    LESS            reduce using rule 66 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 66 (cast_expression -> unary_expression .)
    LESS_EQ         reduce using rule 66 (cast_expression -> unary_expression .)
    GREATER_EQ      reduce using rule 66 (cast_expression -> unary_expression .)
    IS_EQ           reduce using rule 66 (cast_expression -> unary_expression .)
    NOT_EQ          reduce using rule 66 (cast_expression -> unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 66 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 66 (cast_expression -> unary_expression .)
    DOUBLE_PIPE     reduce using rule 66 (cast_expression -> unary_expression .)
    ASSIGN          reduce using rule 66 (cast_expression -> unary_expression .)
    EQ_TIMES        reduce using rule 66 (cast_expression -> unary_expression .)
    EQ_DIV          reduce using rule 66 (cast_expression -> unary_expression .)
    EQ_MODULO       reduce using rule 66 (cast_expression -> unary_expression .)
    EQ_PLUS         reduce using rule 66 (cast_expression -> unary_expression .)
    EQ_MINUS        reduce using rule 66 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 66 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 66 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 66 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 66 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 66 (cast_expression -> unary_expression .)
    COLON           reduce using rule 66 (cast_expression -> unary_expression .)
    ELLIPSIS        reduce using rule 66 (cast_expression -> unary_expression .)


state 105

    (44) unary_expression -> delete_expression .

    TIMES           reduce using rule 44 (unary_expression -> delete_expression .)
    DIV             reduce using rule 44 (unary_expression -> delete_expression .)
    MODULO          reduce using rule 44 (unary_expression -> delete_expression .)
    PLUS            reduce using rule 44 (unary_expression -> delete_expression .)
    MINUS           reduce using rule 44 (unary_expression -> delete_expression .)
    LESS            reduce using rule 44 (unary_expression -> delete_expression .)
    GREATER         reduce using rule 44 (unary_expression -> delete_expression .)
    LESS_EQ         reduce using rule 44 (unary_expression -> delete_expression .)
    GREATER_EQ      reduce using rule 44 (unary_expression -> delete_expression .)
    IS_EQ           reduce using rule 44 (unary_expression -> delete_expression .)
    NOT_EQ          reduce using rule 44 (unary_expression -> delete_expression .)
    DOUBLE_AMPERSAND reduce using rule 44 (unary_expression -> delete_expression .)
    QUESTION        reduce using rule 44 (unary_expression -> delete_expression .)
    DOUBLE_PIPE     reduce using rule 44 (unary_expression -> delete_expression .)
    ASSIGN          reduce using rule 44 (unary_expression -> delete_expression .)
    EQ_TIMES        reduce using rule 44 (unary_expression -> delete_expression .)
    EQ_DIV          reduce using rule 44 (unary_expression -> delete_expression .)
    EQ_MODULO       reduce using rule 44 (unary_expression -> delete_expression .)
    EQ_PLUS         reduce using rule 44 (unary_expression -> delete_expression .)
    EQ_MINUS        reduce using rule 44 (unary_expression -> delete_expression .)
    SEMICOLON       reduce using rule 44 (unary_expression -> delete_expression .)
    COMMA           reduce using rule 44 (unary_expression -> delete_expression .)
    ELLIPSIS        reduce using rule 44 (unary_expression -> delete_expression .)
    RPAREN          reduce using rule 44 (unary_expression -> delete_expression .)
    RBRACKET        reduce using rule 44 (unary_expression -> delete_expression .)
    RBRACE          reduce using rule 44 (unary_expression -> delete_expression .)
    COLON           reduce using rule 44 (unary_expression -> delete_expression .)


state 106

    (51) new_expression -> NEW . new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> NEW . new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (54) new_placement_opt -> .
    (55) new_placement_opt -> . new_placement
    (53) new_placement -> . LPAREN expression_list RPAREN

    BOOL            reduce using rule 54 (new_placement_opt -> .)
    CHAR            reduce using rule 54 (new_placement_opt -> .)
    INT             reduce using rule 54 (new_placement_opt -> .)
    FLOAT           reduce using rule 54 (new_placement_opt -> .)
    DOUBLE          reduce using rule 54 (new_placement_opt -> .)
    VOID            reduce using rule 54 (new_placement_opt -> .)
    CLASS           reduce using rule 54 (new_placement_opt -> .)
    STRUCT          reduce using rule 54 (new_placement_opt -> .)
    LPAREN          shift and go to state 163

  ! LPAREN          [ reduce using rule 54 (new_placement_opt -> .) ]

    new_placement                  shift and go to state 161
    new_placement_opt              shift and go to state 162

state 107

    (43) unary_expression -> new_expression .

    TIMES           reduce using rule 43 (unary_expression -> new_expression .)
    DIV             reduce using rule 43 (unary_expression -> new_expression .)
    MODULO          reduce using rule 43 (unary_expression -> new_expression .)
    PLUS            reduce using rule 43 (unary_expression -> new_expression .)
    MINUS           reduce using rule 43 (unary_expression -> new_expression .)
    LESS            reduce using rule 43 (unary_expression -> new_expression .)
    GREATER         reduce using rule 43 (unary_expression -> new_expression .)
    LESS_EQ         reduce using rule 43 (unary_expression -> new_expression .)
    GREATER_EQ      reduce using rule 43 (unary_expression -> new_expression .)
    IS_EQ           reduce using rule 43 (unary_expression -> new_expression .)
    NOT_EQ          reduce using rule 43 (unary_expression -> new_expression .)
    DOUBLE_AMPERSAND reduce using rule 43 (unary_expression -> new_expression .)
    QUESTION        reduce using rule 43 (unary_expression -> new_expression .)
    DOUBLE_PIPE     reduce using rule 43 (unary_expression -> new_expression .)
    ASSIGN          reduce using rule 43 (unary_expression -> new_expression .)
    EQ_TIMES        reduce using rule 43 (unary_expression -> new_expression .)
    EQ_DIV          reduce using rule 43 (unary_expression -> new_expression .)
    EQ_MODULO       reduce using rule 43 (unary_expression -> new_expression .)
    EQ_PLUS         reduce using rule 43 (unary_expression -> new_expression .)
    EQ_MINUS        reduce using rule 43 (unary_expression -> new_expression .)
    SEMICOLON       reduce using rule 43 (unary_expression -> new_expression .)
    COMMA           reduce using rule 43 (unary_expression -> new_expression .)
    ELLIPSIS        reduce using rule 43 (unary_expression -> new_expression .)
    RPAREN          reduce using rule 43 (unary_expression -> new_expression .)
    RBRACKET        reduce using rule 43 (unary_expression -> new_expression .)
    RBRACE          reduce using rule 43 (unary_expression -> new_expression .)
    COLON           reduce using rule 43 (unary_expression -> new_expression .)


state 108

    (15) literal -> TRUE .

    LBRACKET        reduce using rule 15 (literal -> TRUE .)
    LPAREN          reduce using rule 15 (literal -> TRUE .)
    PLUS_PLUS       reduce using rule 15 (literal -> TRUE .)
    MINUS_MINUS     reduce using rule 15 (literal -> TRUE .)
    DOT             reduce using rule 15 (literal -> TRUE .)
    TIMES           reduce using rule 15 (literal -> TRUE .)
    DIV             reduce using rule 15 (literal -> TRUE .)
    MODULO          reduce using rule 15 (literal -> TRUE .)
    PLUS            reduce using rule 15 (literal -> TRUE .)
    MINUS           reduce using rule 15 (literal -> TRUE .)
    LESS            reduce using rule 15 (literal -> TRUE .)
    GREATER         reduce using rule 15 (literal -> TRUE .)
    LESS_EQ         reduce using rule 15 (literal -> TRUE .)
    GREATER_EQ      reduce using rule 15 (literal -> TRUE .)
    IS_EQ           reduce using rule 15 (literal -> TRUE .)
    NOT_EQ          reduce using rule 15 (literal -> TRUE .)
    DOUBLE_AMPERSAND reduce using rule 15 (literal -> TRUE .)
    QUESTION        reduce using rule 15 (literal -> TRUE .)
    DOUBLE_PIPE     reduce using rule 15 (literal -> TRUE .)
    ASSIGN          reduce using rule 15 (literal -> TRUE .)
    EQ_TIMES        reduce using rule 15 (literal -> TRUE .)
    EQ_DIV          reduce using rule 15 (literal -> TRUE .)
    EQ_MODULO       reduce using rule 15 (literal -> TRUE .)
    EQ_PLUS         reduce using rule 15 (literal -> TRUE .)
    EQ_MINUS        reduce using rule 15 (literal -> TRUE .)
    SEMICOLON       reduce using rule 15 (literal -> TRUE .)
    COMMA           reduce using rule 15 (literal -> TRUE .)
    ELLIPSIS        reduce using rule 15 (literal -> TRUE .)
    RPAREN          reduce using rule 15 (literal -> TRUE .)
    RBRACKET        reduce using rule 15 (literal -> TRUE .)
    RBRACE          reduce using rule 15 (literal -> TRUE .)
    COLON           reduce using rule 15 (literal -> TRUE .)


state 109

    (48) unary_operator -> MINUS .

    LPAREN          reduce using rule 48 (unary_operator -> MINUS .)
    PLUS_PLUS       reduce using rule 48 (unary_operator -> MINUS .)
    MINUS_MINUS     reduce using rule 48 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 48 (unary_operator -> MINUS .)
    EXCLAMATION     reduce using rule 48 (unary_operator -> MINUS .)
    TILDE           reduce using rule 48 (unary_operator -> MINUS .)
    TIMES           reduce using rule 48 (unary_operator -> MINUS .)
    AMPERSAND       reduce using rule 48 (unary_operator -> MINUS .)
    PLUS            reduce using rule 48 (unary_operator -> MINUS .)
    MINUS           reduce using rule 48 (unary_operator -> MINUS .)
    NEW             reduce using rule 48 (unary_operator -> MINUS .)
    DELETE          reduce using rule 48 (unary_operator -> MINUS .)
    THIS            reduce using rule 48 (unary_operator -> MINUS .)
    INUMBER         reduce using rule 48 (unary_operator -> MINUS .)
    DNUMBER         reduce using rule 48 (unary_operator -> MINUS .)
    LIT_CHAR        reduce using rule 48 (unary_operator -> MINUS .)
    LIT_STR         reduce using rule 48 (unary_operator -> MINUS .)
    TRUE            reduce using rule 48 (unary_operator -> MINUS .)
    FALSE           reduce using rule 48 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 48 (unary_operator -> MINUS .)
    OPERATOR        reduce using rule 48 (unary_operator -> MINUS .)


state 110

    (75) relational_expression -> additive_expression .
    (73) additive_expression -> additive_expression . PLUS multiplicative_expression
    (74) additive_expression -> additive_expression . MINUS multiplicative_expression

    LESS            reduce using rule 75 (relational_expression -> additive_expression .)
    GREATER         reduce using rule 75 (relational_expression -> additive_expression .)
    LESS_EQ         reduce using rule 75 (relational_expression -> additive_expression .)
    GREATER_EQ      reduce using rule 75 (relational_expression -> additive_expression .)
    IS_EQ           reduce using rule 75 (relational_expression -> additive_expression .)
    NOT_EQ          reduce using rule 75 (relational_expression -> additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 75 (relational_expression -> additive_expression .)
    QUESTION        reduce using rule 75 (relational_expression -> additive_expression .)
    DOUBLE_PIPE     reduce using rule 75 (relational_expression -> additive_expression .)
    ASSIGN          reduce using rule 75 (relational_expression -> additive_expression .)
    EQ_TIMES        reduce using rule 75 (relational_expression -> additive_expression .)
    EQ_DIV          reduce using rule 75 (relational_expression -> additive_expression .)
    EQ_MODULO       reduce using rule 75 (relational_expression -> additive_expression .)
    EQ_PLUS         reduce using rule 75 (relational_expression -> additive_expression .)
    EQ_MINUS        reduce using rule 75 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 75 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 75 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 75 (relational_expression -> additive_expression .)
    RBRACE          reduce using rule 75 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 75 (relational_expression -> additive_expression .)
    COLON           reduce using rule 75 (relational_expression -> additive_expression .)
    ELLIPSIS        reduce using rule 75 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165


state 111

    (13) literal -> LIT_CHAR .

    LBRACKET        reduce using rule 13 (literal -> LIT_CHAR .)
    LPAREN          reduce using rule 13 (literal -> LIT_CHAR .)
    PLUS_PLUS       reduce using rule 13 (literal -> LIT_CHAR .)
    MINUS_MINUS     reduce using rule 13 (literal -> LIT_CHAR .)
    DOT             reduce using rule 13 (literal -> LIT_CHAR .)
    TIMES           reduce using rule 13 (literal -> LIT_CHAR .)
    DIV             reduce using rule 13 (literal -> LIT_CHAR .)
    MODULO          reduce using rule 13 (literal -> LIT_CHAR .)
    PLUS            reduce using rule 13 (literal -> LIT_CHAR .)
    MINUS           reduce using rule 13 (literal -> LIT_CHAR .)
    LESS            reduce using rule 13 (literal -> LIT_CHAR .)
    GREATER         reduce using rule 13 (literal -> LIT_CHAR .)
    LESS_EQ         reduce using rule 13 (literal -> LIT_CHAR .)
    GREATER_EQ      reduce using rule 13 (literal -> LIT_CHAR .)
    IS_EQ           reduce using rule 13 (literal -> LIT_CHAR .)
    NOT_EQ          reduce using rule 13 (literal -> LIT_CHAR .)
    DOUBLE_AMPERSAND reduce using rule 13 (literal -> LIT_CHAR .)
    QUESTION        reduce using rule 13 (literal -> LIT_CHAR .)
    DOUBLE_PIPE     reduce using rule 13 (literal -> LIT_CHAR .)
    ASSIGN          reduce using rule 13 (literal -> LIT_CHAR .)
    EQ_TIMES        reduce using rule 13 (literal -> LIT_CHAR .)
    EQ_DIV          reduce using rule 13 (literal -> LIT_CHAR .)
    EQ_MODULO       reduce using rule 13 (literal -> LIT_CHAR .)
    EQ_PLUS         reduce using rule 13 (literal -> LIT_CHAR .)
    EQ_MINUS        reduce using rule 13 (literal -> LIT_CHAR .)
    SEMICOLON       reduce using rule 13 (literal -> LIT_CHAR .)
    COMMA           reduce using rule 13 (literal -> LIT_CHAR .)
    ELLIPSIS        reduce using rule 13 (literal -> LIT_CHAR .)
    RPAREN          reduce using rule 13 (literal -> LIT_CHAR .)
    RBRACKET        reduce using rule 13 (literal -> LIT_CHAR .)
    RBRACE          reduce using rule 13 (literal -> LIT_CHAR .)
    COLON           reduce using rule 13 (literal -> LIT_CHAR .)


state 112

    (37) unary_expression -> postfix_expression .
    (27) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (28) postfix_expression -> postfix_expression . LPAREN RPAREN
    (29) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (30) postfix_expression -> postfix_expression . PLUS_PLUS
    (31) postfix_expression -> postfix_expression . MINUS_MINUS
    (32) postfix_expression -> postfix_expression . DOT id_expression

    TIMES           reduce using rule 37 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 37 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 37 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 37 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 37 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 37 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 37 (unary_expression -> postfix_expression .)
    LESS_EQ         reduce using rule 37 (unary_expression -> postfix_expression .)
    GREATER_EQ      reduce using rule 37 (unary_expression -> postfix_expression .)
    IS_EQ           reduce using rule 37 (unary_expression -> postfix_expression .)
    NOT_EQ          reduce using rule 37 (unary_expression -> postfix_expression .)
    DOUBLE_AMPERSAND reduce using rule 37 (unary_expression -> postfix_expression .)
    QUESTION        reduce using rule 37 (unary_expression -> postfix_expression .)
    DOUBLE_PIPE     reduce using rule 37 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 37 (unary_expression -> postfix_expression .)
    EQ_TIMES        reduce using rule 37 (unary_expression -> postfix_expression .)
    EQ_DIV          reduce using rule 37 (unary_expression -> postfix_expression .)
    EQ_MODULO       reduce using rule 37 (unary_expression -> postfix_expression .)
    EQ_PLUS         reduce using rule 37 (unary_expression -> postfix_expression .)
    EQ_MINUS        reduce using rule 37 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 37 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 37 (unary_expression -> postfix_expression .)
    ELLIPSIS        reduce using rule 37 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 37 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 37 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 37 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 37 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 167
    LPAREN          shift and go to state 169
    PLUS_PLUS       shift and go to state 166
    MINUS_MINUS     shift and go to state 170
    DOT             shift and go to state 168


state 113

    (17) primary_expression -> literal .

    LBRACKET        reduce using rule 17 (primary_expression -> literal .)
    LPAREN          reduce using rule 17 (primary_expression -> literal .)
    PLUS_PLUS       reduce using rule 17 (primary_expression -> literal .)
    MINUS_MINUS     reduce using rule 17 (primary_expression -> literal .)
    DOT             reduce using rule 17 (primary_expression -> literal .)
    TIMES           reduce using rule 17 (primary_expression -> literal .)
    DIV             reduce using rule 17 (primary_expression -> literal .)
    MODULO          reduce using rule 17 (primary_expression -> literal .)
    PLUS            reduce using rule 17 (primary_expression -> literal .)
    MINUS           reduce using rule 17 (primary_expression -> literal .)
    LESS            reduce using rule 17 (primary_expression -> literal .)
    GREATER         reduce using rule 17 (primary_expression -> literal .)
    LESS_EQ         reduce using rule 17 (primary_expression -> literal .)
    GREATER_EQ      reduce using rule 17 (primary_expression -> literal .)
    IS_EQ           reduce using rule 17 (primary_expression -> literal .)
    NOT_EQ          reduce using rule 17 (primary_expression -> literal .)
    DOUBLE_AMPERSAND reduce using rule 17 (primary_expression -> literal .)
    QUESTION        reduce using rule 17 (primary_expression -> literal .)
    DOUBLE_PIPE     reduce using rule 17 (primary_expression -> literal .)
    ASSIGN          reduce using rule 17 (primary_expression -> literal .)
    EQ_TIMES        reduce using rule 17 (primary_expression -> literal .)
    EQ_DIV          reduce using rule 17 (primary_expression -> literal .)
    EQ_MODULO       reduce using rule 17 (primary_expression -> literal .)
    EQ_PLUS         reduce using rule 17 (primary_expression -> literal .)
    EQ_MINUS        reduce using rule 17 (primary_expression -> literal .)
    COLON           reduce using rule 17 (primary_expression -> literal .)
    COMMA           reduce using rule 17 (primary_expression -> literal .)
    RPAREN          reduce using rule 17 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 17 (primary_expression -> literal .)
    RBRACE          reduce using rule 17 (primary_expression -> literal .)
    RBRACKET        reduce using rule 17 (primary_expression -> literal .)
    ELLIPSIS        reduce using rule 17 (primary_expression -> literal .)


state 114

    (80) equality_expression -> relational_expression .
    (76) relational_expression -> relational_expression . LESS additive_expression
    (77) relational_expression -> relational_expression . GREATER additive_expression
    (78) relational_expression -> relational_expression . LESS_EQ additive_expression
    (79) relational_expression -> relational_expression . GREATER_EQ additive_expression

    IS_EQ           reduce using rule 80 (equality_expression -> relational_expression .)
    NOT_EQ          reduce using rule 80 (equality_expression -> relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 80 (equality_expression -> relational_expression .)
    QUESTION        reduce using rule 80 (equality_expression -> relational_expression .)
    DOUBLE_PIPE     reduce using rule 80 (equality_expression -> relational_expression .)
    ASSIGN          reduce using rule 80 (equality_expression -> relational_expression .)
    EQ_TIMES        reduce using rule 80 (equality_expression -> relational_expression .)
    EQ_DIV          reduce using rule 80 (equality_expression -> relational_expression .)
    EQ_MODULO       reduce using rule 80 (equality_expression -> relational_expression .)
    EQ_PLUS         reduce using rule 80 (equality_expression -> relational_expression .)
    EQ_MINUS        reduce using rule 80 (equality_expression -> relational_expression .)
    ELLIPSIS        reduce using rule 80 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 80 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 80 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 80 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 80 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 80 (equality_expression -> relational_expression .)
    COLON           reduce using rule 80 (equality_expression -> relational_expression .)
    LESS            shift and go to state 173
    GREATER         shift and go to state 172
    LESS_EQ         shift and go to state 171
    GREATER_EQ      shift and go to state 174


state 115

    (40) unary_expression -> unary_operator . cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    unqualified_id                 shift and go to state 42
    unary_expression               shift and go to state 104
    operator_function_id           shift and go to state 29
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    new_expression                 shift and go to state 107
    cast_expression                shift and go to state 175
    unary_operator                 shift and go to state 115

state 116

    (47) unary_operator -> PLUS .

    LPAREN          reduce using rule 47 (unary_operator -> PLUS .)
    PLUS_PLUS       reduce using rule 47 (unary_operator -> PLUS .)
    MINUS_MINUS     reduce using rule 47 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 47 (unary_operator -> PLUS .)
    EXCLAMATION     reduce using rule 47 (unary_operator -> PLUS .)
    TILDE           reduce using rule 47 (unary_operator -> PLUS .)
    TIMES           reduce using rule 47 (unary_operator -> PLUS .)
    AMPERSAND       reduce using rule 47 (unary_operator -> PLUS .)
    PLUS            reduce using rule 47 (unary_operator -> PLUS .)
    MINUS           reduce using rule 47 (unary_operator -> PLUS .)
    NEW             reduce using rule 47 (unary_operator -> PLUS .)
    DELETE          reduce using rule 47 (unary_operator -> PLUS .)
    THIS            reduce using rule 47 (unary_operator -> PLUS .)
    INUMBER         reduce using rule 47 (unary_operator -> PLUS .)
    DNUMBER         reduce using rule 47 (unary_operator -> PLUS .)
    LIT_CHAR        reduce using rule 47 (unary_operator -> PLUS .)
    LIT_STR         reduce using rule 47 (unary_operator -> PLUS .)
    TRUE            reduce using rule 47 (unary_operator -> PLUS .)
    FALSE           reduce using rule 47 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 47 (unary_operator -> PLUS .)
    OPERATOR        reduce using rule 47 (unary_operator -> PLUS .)


state 117

    (87) conditional_expression -> logical_or_expression .
    (88) conditional_expression -> logical_or_expression . QUESTION expression COLON assignment_expression
    (86) logical_or_expression -> logical_or_expression . DOUBLE_PIPE logical_and_expression

    RBRACKET        reduce using rule 87 (conditional_expression -> logical_or_expression .)
    SEMICOLON       reduce using rule 87 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 87 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 87 (conditional_expression -> logical_or_expression .)
    QUESTION        shift and go to state 176
    DOUBLE_PIPE     shift and go to state 177


state 118

    (102) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 102 (constant_expression_opt -> constant_expression .)


state 119

    (20) primary_expression -> id_expression .

    LBRACKET        reduce using rule 20 (primary_expression -> id_expression .)
    LPAREN          reduce using rule 20 (primary_expression -> id_expression .)
    PLUS_PLUS       reduce using rule 20 (primary_expression -> id_expression .)
    MINUS_MINUS     reduce using rule 20 (primary_expression -> id_expression .)
    DOT             reduce using rule 20 (primary_expression -> id_expression .)
    TIMES           reduce using rule 20 (primary_expression -> id_expression .)
    DIV             reduce using rule 20 (primary_expression -> id_expression .)
    MODULO          reduce using rule 20 (primary_expression -> id_expression .)
    PLUS            reduce using rule 20 (primary_expression -> id_expression .)
    MINUS           reduce using rule 20 (primary_expression -> id_expression .)
    LESS            reduce using rule 20 (primary_expression -> id_expression .)
    GREATER         reduce using rule 20 (primary_expression -> id_expression .)
    LESS_EQ         reduce using rule 20 (primary_expression -> id_expression .)
    GREATER_EQ      reduce using rule 20 (primary_expression -> id_expression .)
    IS_EQ           reduce using rule 20 (primary_expression -> id_expression .)
    NOT_EQ          reduce using rule 20 (primary_expression -> id_expression .)
    DOUBLE_AMPERSAND reduce using rule 20 (primary_expression -> id_expression .)
    QUESTION        reduce using rule 20 (primary_expression -> id_expression .)
    DOUBLE_PIPE     reduce using rule 20 (primary_expression -> id_expression .)
    ASSIGN          reduce using rule 20 (primary_expression -> id_expression .)
    EQ_TIMES        reduce using rule 20 (primary_expression -> id_expression .)
    EQ_DIV          reduce using rule 20 (primary_expression -> id_expression .)
    EQ_MODULO       reduce using rule 20 (primary_expression -> id_expression .)
    EQ_PLUS         reduce using rule 20 (primary_expression -> id_expression .)
    EQ_MINUS        reduce using rule 20 (primary_expression -> id_expression .)
    COLON           reduce using rule 20 (primary_expression -> id_expression .)
    COMMA           reduce using rule 20 (primary_expression -> id_expression .)
    RPAREN          reduce using rule 20 (primary_expression -> id_expression .)
    SEMICOLON       reduce using rule 20 (primary_expression -> id_expression .)
    RBRACE          reduce using rule 20 (primary_expression -> id_expression .)
    RBRACKET        reduce using rule 20 (primary_expression -> id_expression .)
    ELLIPSIS        reduce using rule 20 (primary_expression -> id_expression .)


state 120

    (41) unary_expression -> SIZEOF . unary_expression
    (42) unary_expression -> SIZEOF . LPAREN type_id RPAREN
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 179
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    unqualified_id                 shift and go to state 42
    unary_expression               shift and go to state 178
    operator_function_id           shift and go to state 29
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    new_expression                 shift and go to state 107
    unary_operator                 shift and go to state 115

state 121

    (12) literal -> DNUMBER .

    LBRACKET        reduce using rule 12 (literal -> DNUMBER .)
    LPAREN          reduce using rule 12 (literal -> DNUMBER .)
    PLUS_PLUS       reduce using rule 12 (literal -> DNUMBER .)
    MINUS_MINUS     reduce using rule 12 (literal -> DNUMBER .)
    DOT             reduce using rule 12 (literal -> DNUMBER .)
    TIMES           reduce using rule 12 (literal -> DNUMBER .)
    DIV             reduce using rule 12 (literal -> DNUMBER .)
    MODULO          reduce using rule 12 (literal -> DNUMBER .)
    PLUS            reduce using rule 12 (literal -> DNUMBER .)
    MINUS           reduce using rule 12 (literal -> DNUMBER .)
    LESS            reduce using rule 12 (literal -> DNUMBER .)
    GREATER         reduce using rule 12 (literal -> DNUMBER .)
    LESS_EQ         reduce using rule 12 (literal -> DNUMBER .)
    GREATER_EQ      reduce using rule 12 (literal -> DNUMBER .)
    IS_EQ           reduce using rule 12 (literal -> DNUMBER .)
    NOT_EQ          reduce using rule 12 (literal -> DNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 12 (literal -> DNUMBER .)
    QUESTION        reduce using rule 12 (literal -> DNUMBER .)
    DOUBLE_PIPE     reduce using rule 12 (literal -> DNUMBER .)
    ASSIGN          reduce using rule 12 (literal -> DNUMBER .)
    EQ_TIMES        reduce using rule 12 (literal -> DNUMBER .)
    EQ_DIV          reduce using rule 12 (literal -> DNUMBER .)
    EQ_MODULO       reduce using rule 12 (literal -> DNUMBER .)
    EQ_PLUS         reduce using rule 12 (literal -> DNUMBER .)
    EQ_MINUS        reduce using rule 12 (literal -> DNUMBER .)
    SEMICOLON       reduce using rule 12 (literal -> DNUMBER .)
    COMMA           reduce using rule 12 (literal -> DNUMBER .)
    ELLIPSIS        reduce using rule 12 (literal -> DNUMBER .)
    RPAREN          reduce using rule 12 (literal -> DNUMBER .)
    RBRACKET        reduce using rule 12 (literal -> DNUMBER .)
    RBRACE          reduce using rule 12 (literal -> DNUMBER .)
    COLON           reduce using rule 12 (literal -> DNUMBER .)


state 122

    (50) unary_expression -> TILDE .
    (25) unqualified_id -> TILDE . class_name
    (212) class_name -> . IDENTIFIER

    TIMES           reduce using rule 50 (unary_expression -> TILDE .)
    DIV             reduce using rule 50 (unary_expression -> TILDE .)
    MODULO          reduce using rule 50 (unary_expression -> TILDE .)
    PLUS            reduce using rule 50 (unary_expression -> TILDE .)
    MINUS           reduce using rule 50 (unary_expression -> TILDE .)
    LESS            reduce using rule 50 (unary_expression -> TILDE .)
    GREATER         reduce using rule 50 (unary_expression -> TILDE .)
    LESS_EQ         reduce using rule 50 (unary_expression -> TILDE .)
    GREATER_EQ      reduce using rule 50 (unary_expression -> TILDE .)
    IS_EQ           reduce using rule 50 (unary_expression -> TILDE .)
    NOT_EQ          reduce using rule 50 (unary_expression -> TILDE .)
    DOUBLE_AMPERSAND reduce using rule 50 (unary_expression -> TILDE .)
    QUESTION        reduce using rule 50 (unary_expression -> TILDE .)
    DOUBLE_PIPE     reduce using rule 50 (unary_expression -> TILDE .)
    ASSIGN          reduce using rule 50 (unary_expression -> TILDE .)
    EQ_TIMES        reduce using rule 50 (unary_expression -> TILDE .)
    EQ_DIV          reduce using rule 50 (unary_expression -> TILDE .)
    EQ_MODULO       reduce using rule 50 (unary_expression -> TILDE .)
    EQ_PLUS         reduce using rule 50 (unary_expression -> TILDE .)
    EQ_MINUS        reduce using rule 50 (unary_expression -> TILDE .)
    SEMICOLON       reduce using rule 50 (unary_expression -> TILDE .)
    COMMA           reduce using rule 50 (unary_expression -> TILDE .)
    ELLIPSIS        reduce using rule 50 (unary_expression -> TILDE .)
    RPAREN          reduce using rule 50 (unary_expression -> TILDE .)
    RBRACKET        reduce using rule 50 (unary_expression -> TILDE .)
    RBRACE          reduce using rule 50 (unary_expression -> TILDE .)
    COLON           reduce using rule 50 (unary_expression -> TILDE .)
    IDENTIFIER      shift and go to state 83

    class_name                     shift and go to state 82

state 123

    (45) unary_operator -> TIMES .

    LPAREN          reduce using rule 45 (unary_operator -> TIMES .)
    PLUS_PLUS       reduce using rule 45 (unary_operator -> TIMES .)
    MINUS_MINUS     reduce using rule 45 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 45 (unary_operator -> TIMES .)
    EXCLAMATION     reduce using rule 45 (unary_operator -> TIMES .)
    TILDE           reduce using rule 45 (unary_operator -> TIMES .)
    TIMES           reduce using rule 45 (unary_operator -> TIMES .)
    AMPERSAND       reduce using rule 45 (unary_operator -> TIMES .)
    PLUS            reduce using rule 45 (unary_operator -> TIMES .)
    MINUS           reduce using rule 45 (unary_operator -> TIMES .)
    NEW             reduce using rule 45 (unary_operator -> TIMES .)
    DELETE          reduce using rule 45 (unary_operator -> TIMES .)
    THIS            reduce using rule 45 (unary_operator -> TIMES .)
    INUMBER         reduce using rule 45 (unary_operator -> TIMES .)
    DNUMBER         reduce using rule 45 (unary_operator -> TIMES .)
    LIT_CHAR        reduce using rule 45 (unary_operator -> TIMES .)
    LIT_STR         reduce using rule 45 (unary_operator -> TIMES .)
    TRUE            reduce using rule 45 (unary_operator -> TIMES .)
    FALSE           reduce using rule 45 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 45 (unary_operator -> TIMES .)
    OPERATOR        reduce using rule 45 (unary_operator -> TIMES .)


state 124

    (46) unary_operator -> AMPERSAND .

    LPAREN          reduce using rule 46 (unary_operator -> AMPERSAND .)
    PLUS_PLUS       reduce using rule 46 (unary_operator -> AMPERSAND .)
    MINUS_MINUS     reduce using rule 46 (unary_operator -> AMPERSAND .)
    SIZEOF          reduce using rule 46 (unary_operator -> AMPERSAND .)
    EXCLAMATION     reduce using rule 46 (unary_operator -> AMPERSAND .)
    TILDE           reduce using rule 46 (unary_operator -> AMPERSAND .)
    TIMES           reduce using rule 46 (unary_operator -> AMPERSAND .)
    AMPERSAND       reduce using rule 46 (unary_operator -> AMPERSAND .)
    PLUS            reduce using rule 46 (unary_operator -> AMPERSAND .)
    MINUS           reduce using rule 46 (unary_operator -> AMPERSAND .)
    NEW             reduce using rule 46 (unary_operator -> AMPERSAND .)
    DELETE          reduce using rule 46 (unary_operator -> AMPERSAND .)
    THIS            reduce using rule 46 (unary_operator -> AMPERSAND .)
    INUMBER         reduce using rule 46 (unary_operator -> AMPERSAND .)
    DNUMBER         reduce using rule 46 (unary_operator -> AMPERSAND .)
    LIT_CHAR        reduce using rule 46 (unary_operator -> AMPERSAND .)
    LIT_STR         reduce using rule 46 (unary_operator -> AMPERSAND .)
    TRUE            reduce using rule 46 (unary_operator -> AMPERSAND .)
    FALSE           reduce using rule 46 (unary_operator -> AMPERSAND .)
    IDENTIFIER      reduce using rule 46 (unary_operator -> AMPERSAND .)
    OPERATOR        reduce using rule 46 (unary_operator -> AMPERSAND .)


state 125

    (26) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 26 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 26 (postfix_expression -> primary_expression .)
    PLUS_PLUS       reduce using rule 26 (postfix_expression -> primary_expression .)
    MINUS_MINUS     reduce using rule 26 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 26 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 26 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 26 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 26 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 26 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 26 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 26 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 26 (postfix_expression -> primary_expression .)
    LESS_EQ         reduce using rule 26 (postfix_expression -> primary_expression .)
    GREATER_EQ      reduce using rule 26 (postfix_expression -> primary_expression .)
    IS_EQ           reduce using rule 26 (postfix_expression -> primary_expression .)
    NOT_EQ          reduce using rule 26 (postfix_expression -> primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 26 (postfix_expression -> primary_expression .)
    QUESTION        reduce using rule 26 (postfix_expression -> primary_expression .)
    DOUBLE_PIPE     reduce using rule 26 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 26 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 26 (postfix_expression -> primary_expression .)
    EQ_TIMES        reduce using rule 26 (postfix_expression -> primary_expression .)
    EQ_DIV          reduce using rule 26 (postfix_expression -> primary_expression .)
    EQ_MODULO       reduce using rule 26 (postfix_expression -> primary_expression .)
    EQ_PLUS         reduce using rule 26 (postfix_expression -> primary_expression .)
    EQ_MINUS        reduce using rule 26 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 26 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 26 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 26 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 26 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 26 (postfix_expression -> primary_expression .)
    ELLIPSIS        reduce using rule 26 (postfix_expression -> primary_expression .)


state 126

    (67) cast_expression -> LPAREN . type_id RPAREN cast_expression
    (19) primary_expression -> LPAREN . expression RPAREN
    (179) type_id -> . type_specifier_seq abstract_declarator_opt
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (5) set_class_scope -> .
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    class_specifier                shift and go to state 2
    unary_expression               shift and go to state 104
    type_id                        shift and go to state 180
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    type_specifier_seq             shift and go to state 182
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 181

state 127

    (68) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 68 (multiplicative_expression -> cast_expression .)
    DIV             reduce using rule 68 (multiplicative_expression -> cast_expression .)
    MODULO          reduce using rule 68 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 68 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 68 (multiplicative_expression -> cast_expression .)
    LESS            reduce using rule 68 (multiplicative_expression -> cast_expression .)
    GREATER         reduce using rule 68 (multiplicative_expression -> cast_expression .)
    LESS_EQ         reduce using rule 68 (multiplicative_expression -> cast_expression .)
    GREATER_EQ      reduce using rule 68 (multiplicative_expression -> cast_expression .)
    IS_EQ           reduce using rule 68 (multiplicative_expression -> cast_expression .)
    NOT_EQ          reduce using rule 68 (multiplicative_expression -> cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 68 (multiplicative_expression -> cast_expression .)
    QUESTION        reduce using rule 68 (multiplicative_expression -> cast_expression .)
    DOUBLE_PIPE     reduce using rule 68 (multiplicative_expression -> cast_expression .)
    ASSIGN          reduce using rule 68 (multiplicative_expression -> cast_expression .)
    EQ_TIMES        reduce using rule 68 (multiplicative_expression -> cast_expression .)
    EQ_DIV          reduce using rule 68 (multiplicative_expression -> cast_expression .)
    EQ_MODULO       reduce using rule 68 (multiplicative_expression -> cast_expression .)
    EQ_PLUS         reduce using rule 68 (multiplicative_expression -> cast_expression .)
    EQ_MINUS        reduce using rule 68 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 68 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 68 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 68 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 68 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 68 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 68 (multiplicative_expression -> cast_expression .)
    ELLIPSIS        reduce using rule 68 (multiplicative_expression -> cast_expression .)


state 128

    (16) literal -> FALSE .

    LBRACKET        reduce using rule 16 (literal -> FALSE .)
    LPAREN          reduce using rule 16 (literal -> FALSE .)
    PLUS_PLUS       reduce using rule 16 (literal -> FALSE .)
    MINUS_MINUS     reduce using rule 16 (literal -> FALSE .)
    DOT             reduce using rule 16 (literal -> FALSE .)
    TIMES           reduce using rule 16 (literal -> FALSE .)
    DIV             reduce using rule 16 (literal -> FALSE .)
    MODULO          reduce using rule 16 (literal -> FALSE .)
    PLUS            reduce using rule 16 (literal -> FALSE .)
    MINUS           reduce using rule 16 (literal -> FALSE .)
    LESS            reduce using rule 16 (literal -> FALSE .)
    GREATER         reduce using rule 16 (literal -> FALSE .)
    LESS_EQ         reduce using rule 16 (literal -> FALSE .)
    GREATER_EQ      reduce using rule 16 (literal -> FALSE .)
    IS_EQ           reduce using rule 16 (literal -> FALSE .)
    NOT_EQ          reduce using rule 16 (literal -> FALSE .)
    DOUBLE_AMPERSAND reduce using rule 16 (literal -> FALSE .)
    QUESTION        reduce using rule 16 (literal -> FALSE .)
    DOUBLE_PIPE     reduce using rule 16 (literal -> FALSE .)
    ASSIGN          reduce using rule 16 (literal -> FALSE .)
    EQ_TIMES        reduce using rule 16 (literal -> FALSE .)
    EQ_DIV          reduce using rule 16 (literal -> FALSE .)
    EQ_MODULO       reduce using rule 16 (literal -> FALSE .)
    EQ_PLUS         reduce using rule 16 (literal -> FALSE .)
    EQ_MINUS        reduce using rule 16 (literal -> FALSE .)
    SEMICOLON       reduce using rule 16 (literal -> FALSE .)
    COMMA           reduce using rule 16 (literal -> FALSE .)
    ELLIPSIS        reduce using rule 16 (literal -> FALSE .)
    RPAREN          reduce using rule 16 (literal -> FALSE .)
    RBRACKET        reduce using rule 16 (literal -> FALSE .)
    RBRACE          reduce using rule 16 (literal -> FALSE .)
    COLON           reduce using rule 16 (literal -> FALSE .)


state 129

    (85) logical_or_expression -> logical_and_expression .
    (84) logical_and_expression -> logical_and_expression . DOUBLE_AMPERSAND equality_expression

    QUESTION        reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    DOUBLE_PIPE     reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    ASSIGN          reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    EQ_TIMES        reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    EQ_DIV          reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    EQ_MODULO       reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    EQ_PLUS         reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    EQ_MINUS        reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    ELLIPSIS        reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 85 (logical_or_expression -> logical_and_expression .)
    DOUBLE_AMPERSAND shift and go to state 184


state 130

    (83) logical_and_expression -> equality_expression .
    (81) equality_expression -> equality_expression . IS_EQ relational_expression
    (82) equality_expression -> equality_expression . NOT_EQ relational_expression

    DOUBLE_AMPERSAND reduce using rule 83 (logical_and_expression -> equality_expression .)
    QUESTION        reduce using rule 83 (logical_and_expression -> equality_expression .)
    DOUBLE_PIPE     reduce using rule 83 (logical_and_expression -> equality_expression .)
    ASSIGN          reduce using rule 83 (logical_and_expression -> equality_expression .)
    EQ_TIMES        reduce using rule 83 (logical_and_expression -> equality_expression .)
    EQ_DIV          reduce using rule 83 (logical_and_expression -> equality_expression .)
    EQ_MODULO       reduce using rule 83 (logical_and_expression -> equality_expression .)
    EQ_PLUS         reduce using rule 83 (logical_and_expression -> equality_expression .)
    EQ_MINUS        reduce using rule 83 (logical_and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 83 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 83 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 83 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 83 (logical_and_expression -> equality_expression .)
    RBRACE          reduce using rule 83 (logical_and_expression -> equality_expression .)
    COLON           reduce using rule 83 (logical_and_expression -> equality_expression .)
    ELLIPSIS        reduce using rule 83 (logical_and_expression -> equality_expression .)
    IS_EQ           shift and go to state 186
    NOT_EQ          shift and go to state 185


state 131

    (72) additive_expression -> multiplicative_expression .
    (69) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (70) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (71) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 72 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 72 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 72 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 72 (additive_expression -> multiplicative_expression .)
    LESS_EQ         reduce using rule 72 (additive_expression -> multiplicative_expression .)
    GREATER_EQ      reduce using rule 72 (additive_expression -> multiplicative_expression .)
    IS_EQ           reduce using rule 72 (additive_expression -> multiplicative_expression .)
    NOT_EQ          reduce using rule 72 (additive_expression -> multiplicative_expression .)
    DOUBLE_AMPERSAND reduce using rule 72 (additive_expression -> multiplicative_expression .)
    QUESTION        reduce using rule 72 (additive_expression -> multiplicative_expression .)
    DOUBLE_PIPE     reduce using rule 72 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 72 (additive_expression -> multiplicative_expression .)
    ASSIGN          reduce using rule 72 (additive_expression -> multiplicative_expression .)
    EQ_TIMES        reduce using rule 72 (additive_expression -> multiplicative_expression .)
    EQ_DIV          reduce using rule 72 (additive_expression -> multiplicative_expression .)
    EQ_MODULO       reduce using rule 72 (additive_expression -> multiplicative_expression .)
    EQ_PLUS         reduce using rule 72 (additive_expression -> multiplicative_expression .)
    EQ_MINUS        reduce using rule 72 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 72 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 72 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 72 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 72 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 72 (additive_expression -> multiplicative_expression .)
    ELLIPSIS        reduce using rule 72 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 189
    DIV             shift and go to state 188
    MODULO          shift and go to state 187


state 132

    (11) literal -> INUMBER .

    LBRACKET        reduce using rule 11 (literal -> INUMBER .)
    LPAREN          reduce using rule 11 (literal -> INUMBER .)
    PLUS_PLUS       reduce using rule 11 (literal -> INUMBER .)
    MINUS_MINUS     reduce using rule 11 (literal -> INUMBER .)
    DOT             reduce using rule 11 (literal -> INUMBER .)
    TIMES           reduce using rule 11 (literal -> INUMBER .)
    DIV             reduce using rule 11 (literal -> INUMBER .)
    MODULO          reduce using rule 11 (literal -> INUMBER .)
    PLUS            reduce using rule 11 (literal -> INUMBER .)
    MINUS           reduce using rule 11 (literal -> INUMBER .)
    LESS            reduce using rule 11 (literal -> INUMBER .)
    GREATER         reduce using rule 11 (literal -> INUMBER .)
    LESS_EQ         reduce using rule 11 (literal -> INUMBER .)
    GREATER_EQ      reduce using rule 11 (literal -> INUMBER .)
    IS_EQ           reduce using rule 11 (literal -> INUMBER .)
    NOT_EQ          reduce using rule 11 (literal -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 11 (literal -> INUMBER .)
    QUESTION        reduce using rule 11 (literal -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 11 (literal -> INUMBER .)
    ASSIGN          reduce using rule 11 (literal -> INUMBER .)
    EQ_TIMES        reduce using rule 11 (literal -> INUMBER .)
    EQ_DIV          reduce using rule 11 (literal -> INUMBER .)
    EQ_MODULO       reduce using rule 11 (literal -> INUMBER .)
    EQ_PLUS         reduce using rule 11 (literal -> INUMBER .)
    EQ_MINUS        reduce using rule 11 (literal -> INUMBER .)
    SEMICOLON       reduce using rule 11 (literal -> INUMBER .)
    COMMA           reduce using rule 11 (literal -> INUMBER .)
    ELLIPSIS        reduce using rule 11 (literal -> INUMBER .)
    RPAREN          reduce using rule 11 (literal -> INUMBER .)
    RBRACKET        reduce using rule 11 (literal -> INUMBER .)
    RBRACE          reduce using rule 11 (literal -> INUMBER .)
    COLON           reduce using rule 11 (literal -> INUMBER .)


state 133

    (173) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 190


state 134

    (14) literal -> LIT_STR .

    LBRACKET        reduce using rule 14 (literal -> LIT_STR .)
    LPAREN          reduce using rule 14 (literal -> LIT_STR .)
    PLUS_PLUS       reduce using rule 14 (literal -> LIT_STR .)
    MINUS_MINUS     reduce using rule 14 (literal -> LIT_STR .)
    DOT             reduce using rule 14 (literal -> LIT_STR .)
    TIMES           reduce using rule 14 (literal -> LIT_STR .)
    DIV             reduce using rule 14 (literal -> LIT_STR .)
    MODULO          reduce using rule 14 (literal -> LIT_STR .)
    PLUS            reduce using rule 14 (literal -> LIT_STR .)
    MINUS           reduce using rule 14 (literal -> LIT_STR .)
    LESS            reduce using rule 14 (literal -> LIT_STR .)
    GREATER         reduce using rule 14 (literal -> LIT_STR .)
    LESS_EQ         reduce using rule 14 (literal -> LIT_STR .)
    GREATER_EQ      reduce using rule 14 (literal -> LIT_STR .)
    IS_EQ           reduce using rule 14 (literal -> LIT_STR .)
    NOT_EQ          reduce using rule 14 (literal -> LIT_STR .)
    DOUBLE_AMPERSAND reduce using rule 14 (literal -> LIT_STR .)
    QUESTION        reduce using rule 14 (literal -> LIT_STR .)
    DOUBLE_PIPE     reduce using rule 14 (literal -> LIT_STR .)
    ASSIGN          reduce using rule 14 (literal -> LIT_STR .)
    EQ_TIMES        reduce using rule 14 (literal -> LIT_STR .)
    EQ_DIV          reduce using rule 14 (literal -> LIT_STR .)
    EQ_MODULO       reduce using rule 14 (literal -> LIT_STR .)
    EQ_PLUS         reduce using rule 14 (literal -> LIT_STR .)
    EQ_MINUS        reduce using rule 14 (literal -> LIT_STR .)
    SEMICOLON       reduce using rule 14 (literal -> LIT_STR .)
    COMMA           reduce using rule 14 (literal -> LIT_STR .)
    ELLIPSIS        reduce using rule 14 (literal -> LIT_STR .)
    RPAREN          reduce using rule 14 (literal -> LIT_STR .)
    RBRACKET        reduce using rule 14 (literal -> LIT_STR .)
    RBRACE          reduce using rule 14 (literal -> LIT_STR .)
    COLON           reduce using rule 14 (literal -> LIT_STR .)


state 135

    (18) primary_expression -> THIS .

    LBRACKET        reduce using rule 18 (primary_expression -> THIS .)
    LPAREN          reduce using rule 18 (primary_expression -> THIS .)
    PLUS_PLUS       reduce using rule 18 (primary_expression -> THIS .)
    MINUS_MINUS     reduce using rule 18 (primary_expression -> THIS .)
    DOT             reduce using rule 18 (primary_expression -> THIS .)
    TIMES           reduce using rule 18 (primary_expression -> THIS .)
    DIV             reduce using rule 18 (primary_expression -> THIS .)
    MODULO          reduce using rule 18 (primary_expression -> THIS .)
    PLUS            reduce using rule 18 (primary_expression -> THIS .)
    MINUS           reduce using rule 18 (primary_expression -> THIS .)
    LESS            reduce using rule 18 (primary_expression -> THIS .)
    GREATER         reduce using rule 18 (primary_expression -> THIS .)
    LESS_EQ         reduce using rule 18 (primary_expression -> THIS .)
    GREATER_EQ      reduce using rule 18 (primary_expression -> THIS .)
    IS_EQ           reduce using rule 18 (primary_expression -> THIS .)
    NOT_EQ          reduce using rule 18 (primary_expression -> THIS .)
    DOUBLE_AMPERSAND reduce using rule 18 (primary_expression -> THIS .)
    QUESTION        reduce using rule 18 (primary_expression -> THIS .)
    DOUBLE_PIPE     reduce using rule 18 (primary_expression -> THIS .)
    ASSIGN          reduce using rule 18 (primary_expression -> THIS .)
    EQ_TIMES        reduce using rule 18 (primary_expression -> THIS .)
    EQ_DIV          reduce using rule 18 (primary_expression -> THIS .)
    EQ_MODULO       reduce using rule 18 (primary_expression -> THIS .)
    EQ_PLUS         reduce using rule 18 (primary_expression -> THIS .)
    EQ_MINUS        reduce using rule 18 (primary_expression -> THIS .)
    COLON           reduce using rule 18 (primary_expression -> THIS .)
    COMMA           reduce using rule 18 (primary_expression -> THIS .)
    RPAREN          reduce using rule 18 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 18 (primary_expression -> THIS .)
    RBRACE          reduce using rule 18 (primary_expression -> THIS .)
    RBRACKET        reduce using rule 18 (primary_expression -> THIS .)
    ELLIPSIS        reduce using rule 18 (primary_expression -> THIS .)


state 136

    (39) unary_expression -> MINUS_MINUS . cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    unqualified_id                 shift and go to state 42
    unary_expression               shift and go to state 104
    operator_function_id           shift and go to state 29
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    new_expression                 shift and go to state 107
    cast_expression                shift and go to state 191
    unary_operator                 shift and go to state 115

state 137

    (38) unary_expression -> PLUS_PLUS . cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    unqualified_id                 shift and go to state 42
    unary_expression               shift and go to state 104
    operator_function_id           shift and go to state 29
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    new_expression                 shift and go to state 107
    cast_expression                shift and go to state 192
    unary_operator                 shift and go to state 115

state 138

    (100) constant_expression -> conditional_expression .

    SEMICOLON       reduce using rule 100 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 100 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 100 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 100 (constant_expression -> conditional_expression .)


state 139

    (64) delete_expression -> DELETE . cast_expression
    (65) delete_expression -> DELETE . LBRACKET RBRACKET cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LBRACKET        shift and go to state 193
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    unqualified_id                 shift and go to state 42
    unary_expression               shift and go to state 104
    operator_function_id           shift and go to state 29
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    new_expression                 shift and go to state 107
    cast_expression                shift and go to state 194
    unary_operator                 shift and go to state 115

state 140

    (198) parameter_declaration -> decl_specifier_seq . declarator
    (199) parameter_declaration -> decl_specifier_seq . declarator ASSIGN assignment_expression
    (200) parameter_declaration -> decl_specifier_seq . abstract_declarator_opt
    (201) parameter_declaration -> decl_specifier_seq . abstract_declarator_opt ASSIGN assignment_expression
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (184) abstract_declarator_opt -> .
    (185) abstract_declarator_opt -> . abstract_declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (182) abstract_declarator -> . ptr_operator abstract_declarator_opt
    (183) abstract_declarator -> . direct_abstract_declarator
    (178) declarator_id -> . id_expression
    (186) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (187) direct_abstract_declarator -> . LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (188) direct_abstract_declarator -> . direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET
    (189) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (21) id_expression -> . unqualified_id
    (190) direct_abstract_declarator_opt -> .
    (191) direct_abstract_declarator_opt -> . direct_abstract_declarator
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    ASSIGN          reduce using rule 184 (abstract_declarator_opt -> .)
    ELLIPSIS        reduce using rule 184 (abstract_declarator_opt -> .)
    COMMA           reduce using rule 184 (abstract_declarator_opt -> .)
    RPAREN          reduce using rule 184 (abstract_declarator_opt -> .)
    LPAREN          shift and go to state 196
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    LBRACKET        reduce using rule 190 (direct_abstract_declarator_opt -> .)
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 198
    direct_declarator              shift and go to state 33
    abstract_declarator_opt        shift and go to state 195
    abstract_declarator            shift and go to state 199
    direct_abstract_declarator     shift and go to state 201
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 200
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38
    direct_abstract_declarator_opt shift and go to state 197

state 141

    (196) parameter_declaration_list -> parameter_declaration .

    ELLIPSIS        reduce using rule 196 (parameter_declaration_list -> parameter_declaration .)
    COMMA           reduce using rule 196 (parameter_declaration_list -> parameter_declaration .)
    RPAREN          reduce using rule 196 (parameter_declaration_list -> parameter_declaration .)


state 142

    (172) direct_declarator -> direct_declarator LPAREN parameter_declaration_clause . RPAREN

    RPAREN          shift and go to state 202


state 143

    (193) parameter_declaration_clause -> parameter_declaration_list .
    (194) parameter_declaration_clause -> parameter_declaration_list . ELLIPSIS
    (195) parameter_declaration_clause -> parameter_declaration_list . COMMA ELLIPSIS
    (197) parameter_declaration_list -> parameter_declaration_list . COMMA parameter_declaration

    RPAREN          reduce using rule 193 (parameter_declaration_clause -> parameter_declaration_list .)
    ELLIPSIS        shift and go to state 203
    COMMA           shift and go to state 204


state 144

    (174) direct_declarator -> LPAREN declarator RPAREN .

    LPAREN          reduce using rule 174 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACKET        reduce using rule 174 (direct_declarator -> LPAREN declarator RPAREN .)
    ASSIGN          reduce using rule 174 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 174 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 174 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 174 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 174 (direct_declarator -> LPAREN declarator RPAREN .)
    ELLIPSIS        reduce using rule 174 (direct_declarator -> LPAREN declarator RPAREN .)


state 145

    (117) compound_statement -> LBRACE . RBRACE
    (118) compound_statement -> LBRACE . new_scope statement_seq finish_scope RBRACE
    (3) new_scope -> .

    RBRACE          shift and go to state 206
    IDENTIFIER      reduce using rule 3 (new_scope -> .)
    CASE            reduce using rule 3 (new_scope -> .)
    DEFAULT         reduce using rule 3 (new_scope -> .)
    SEMICOLON       reduce using rule 3 (new_scope -> .)
    LBRACE          reduce using rule 3 (new_scope -> .)
    IF              reduce using rule 3 (new_scope -> .)
    SWITCH          reduce using rule 3 (new_scope -> .)
    WHILE           reduce using rule 3 (new_scope -> .)
    DO              reduce using rule 3 (new_scope -> .)
    FOR             reduce using rule 3 (new_scope -> .)
    BREAK           reduce using rule 3 (new_scope -> .)
    CONTINUE        reduce using rule 3 (new_scope -> .)
    RETURN          reduce using rule 3 (new_scope -> .)
    PRINT           reduce using rule 3 (new_scope -> .)
    SCAN            reduce using rule 3 (new_scope -> .)
    MALLOC          reduce using rule 3 (new_scope -> .)
    AUTO            reduce using rule 3 (new_scope -> .)
    EXTERN          reduce using rule 3 (new_scope -> .)
    INLINE          reduce using rule 3 (new_scope -> .)
    BOOL            reduce using rule 3 (new_scope -> .)
    CHAR            reduce using rule 3 (new_scope -> .)
    INT             reduce using rule 3 (new_scope -> .)
    FLOAT           reduce using rule 3 (new_scope -> .)
    DOUBLE          reduce using rule 3 (new_scope -> .)
    VOID            reduce using rule 3 (new_scope -> .)
    LPAREN          reduce using rule 3 (new_scope -> .)
    PLUS_PLUS       reduce using rule 3 (new_scope -> .)
    MINUS_MINUS     reduce using rule 3 (new_scope -> .)
    SIZEOF          reduce using rule 3 (new_scope -> .)
    EXCLAMATION     reduce using rule 3 (new_scope -> .)
    TILDE           reduce using rule 3 (new_scope -> .)
    TIMES           reduce using rule 3 (new_scope -> .)
    AMPERSAND       reduce using rule 3 (new_scope -> .)
    PLUS            reduce using rule 3 (new_scope -> .)
    MINUS           reduce using rule 3 (new_scope -> .)
    NEW             reduce using rule 3 (new_scope -> .)
    DELETE          reduce using rule 3 (new_scope -> .)
    THIS            reduce using rule 3 (new_scope -> .)
    INUMBER         reduce using rule 3 (new_scope -> .)
    DNUMBER         reduce using rule 3 (new_scope -> .)
    LIT_CHAR        reduce using rule 3 (new_scope -> .)
    LIT_STR         reduce using rule 3 (new_scope -> .)
    TRUE            reduce using rule 3 (new_scope -> .)
    FALSE           reduce using rule 3 (new_scope -> .)
    OPERATOR        reduce using rule 3 (new_scope -> .)
    CLASS           reduce using rule 3 (new_scope -> .)
    STRUCT          reduce using rule 3 (new_scope -> .)

    new_scope                      shift and go to state 205

state 146

    (202) function_definition -> decl_specifier_seq declarator function_scope function_body . unset_function_scope
    (8) unset_function_scope -> .

    IDENTIFIER      reduce using rule 8 (unset_function_scope -> .)
    AUTO            reduce using rule 8 (unset_function_scope -> .)
    EXTERN          reduce using rule 8 (unset_function_scope -> .)
    INLINE          reduce using rule 8 (unset_function_scope -> .)
    BOOL            reduce using rule 8 (unset_function_scope -> .)
    CHAR            reduce using rule 8 (unset_function_scope -> .)
    INT             reduce using rule 8 (unset_function_scope -> .)
    FLOAT           reduce using rule 8 (unset_function_scope -> .)
    DOUBLE          reduce using rule 8 (unset_function_scope -> .)
    VOID            reduce using rule 8 (unset_function_scope -> .)
    CLASS           reduce using rule 8 (unset_function_scope -> .)
    STRUCT          reduce using rule 8 (unset_function_scope -> .)
    $end            reduce using rule 8 (unset_function_scope -> .)
    SEMICOLON       reduce using rule 8 (unset_function_scope -> .)
    PUBLIC          reduce using rule 8 (unset_function_scope -> .)
    PRIVATE         reduce using rule 8 (unset_function_scope -> .)
    PROTECTED       reduce using rule 8 (unset_function_scope -> .)
    COLON           reduce using rule 8 (unset_function_scope -> .)
    LPAREN          reduce using rule 8 (unset_function_scope -> .)
    TIMES           reduce using rule 8 (unset_function_scope -> .)
    AMPERSAND       reduce using rule 8 (unset_function_scope -> .)
    TILDE           reduce using rule 8 (unset_function_scope -> .)
    OPERATOR        reduce using rule 8 (unset_function_scope -> .)
    RBRACE          reduce using rule 8 (unset_function_scope -> .)

    unset_function_scope           shift and go to state 207

state 147

    (203) function_body -> compound_statement .

    IDENTIFIER      reduce using rule 203 (function_body -> compound_statement .)
    AUTO            reduce using rule 203 (function_body -> compound_statement .)
    EXTERN          reduce using rule 203 (function_body -> compound_statement .)
    INLINE          reduce using rule 203 (function_body -> compound_statement .)
    BOOL            reduce using rule 203 (function_body -> compound_statement .)
    CHAR            reduce using rule 203 (function_body -> compound_statement .)
    INT             reduce using rule 203 (function_body -> compound_statement .)
    FLOAT           reduce using rule 203 (function_body -> compound_statement .)
    DOUBLE          reduce using rule 203 (function_body -> compound_statement .)
    VOID            reduce using rule 203 (function_body -> compound_statement .)
    CLASS           reduce using rule 203 (function_body -> compound_statement .)
    STRUCT          reduce using rule 203 (function_body -> compound_statement .)
    $end            reduce using rule 203 (function_body -> compound_statement .)
    SEMICOLON       reduce using rule 203 (function_body -> compound_statement .)
    PUBLIC          reduce using rule 203 (function_body -> compound_statement .)
    PRIVATE         reduce using rule 203 (function_body -> compound_statement .)
    PROTECTED       reduce using rule 203 (function_body -> compound_statement .)
    COLON           reduce using rule 203 (function_body -> compound_statement .)
    LPAREN          reduce using rule 203 (function_body -> compound_statement .)
    TIMES           reduce using rule 203 (function_body -> compound_statement .)
    AMPERSAND       reduce using rule 203 (function_body -> compound_statement .)
    TILDE           reduce using rule 203 (function_body -> compound_statement .)
    OPERATOR        reduce using rule 203 (function_body -> compound_statement .)
    RBRACE          reduce using rule 203 (function_body -> compound_statement .)


state 148

    (90) assignment_expression -> malloc_statement .

    RBRACE          reduce using rule 90 (assignment_expression -> malloc_statement .)
    COMMA           reduce using rule 90 (assignment_expression -> malloc_statement .)
    RPAREN          reduce using rule 90 (assignment_expression -> malloc_statement .)
    SEMICOLON       reduce using rule 90 (assignment_expression -> malloc_statement .)
    COLON           reduce using rule 90 (assignment_expression -> malloc_statement .)
    RBRACKET        reduce using rule 90 (assignment_expression -> malloc_statement .)
    ELLIPSIS        reduce using rule 90 (assignment_expression -> malloc_statement .)


state 149

    (91) assignment_expression -> logical_or_expression . assignment_operator assignment_expression
    (87) conditional_expression -> logical_or_expression .
    (88) conditional_expression -> logical_or_expression . QUESTION expression COLON assignment_expression
    (86) logical_or_expression -> logical_or_expression . DOUBLE_PIPE logical_and_expression
    (92) assignment_operator -> . ASSIGN
    (93) assignment_operator -> . EQ_TIMES
    (94) assignment_operator -> . EQ_DIV
    (95) assignment_operator -> . EQ_MODULO
    (96) assignment_operator -> . EQ_PLUS
    (97) assignment_operator -> . EQ_MINUS

    RPAREN          reduce using rule 87 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 87 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 87 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 87 (conditional_expression -> logical_or_expression .)
    SEMICOLON       reduce using rule 87 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 87 (conditional_expression -> logical_or_expression .)
    ELLIPSIS        reduce using rule 87 (conditional_expression -> logical_or_expression .)
    QUESTION        shift and go to state 176
    DOUBLE_PIPE     shift and go to state 177
    ASSIGN          shift and go to state 210
    EQ_TIMES        shift and go to state 214
    EQ_DIV          shift and go to state 209
    EQ_MODULO       shift and go to state 211
    EQ_PLUS         shift and go to state 208
    EQ_MINUS        shift and go to state 213

    assignment_operator            shift and go to state 212

state 150

    (134) malloc_statement -> MALLOC . LPAREN postfix_expression RPAREN

    LPAREN          shift and go to state 215


state 151

    (33) expression_list -> assignment_expression .

    RPAREN          reduce using rule 33 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 33 (expression_list -> assignment_expression .)


state 152

    (206) initializer_opt -> LPAREN expression_list . RPAREN
    (34) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 217
    COMMA           shift and go to state 216


state 153

    (89) assignment_expression -> conditional_expression .

    RBRACE          reduce using rule 89 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 89 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 89 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 89 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 89 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 89 (assignment_expression -> conditional_expression .)
    ELLIPSIS        reduce using rule 89 (assignment_expression -> conditional_expression .)


state 154

    (207) initializer_clause -> assignment_expression .

    RBRACE          reduce using rule 207 (initializer_clause -> assignment_expression .)
    COMMA           reduce using rule 207 (initializer_clause -> assignment_expression .)
    SEMICOLON       reduce using rule 207 (initializer_clause -> assignment_expression .)


state 155

    (205) initializer_opt -> ASSIGN initializer_clause .

    SEMICOLON       reduce using rule 205 (initializer_opt -> ASSIGN initializer_clause .)
    COMMA           reduce using rule 205 (initializer_opt -> ASSIGN initializer_clause .)


state 156

    (208) initializer_clause -> LBRACE . initializer_list RBRACE
    (209) initializer_clause -> LBRACE . RBRACE
    (210) initializer_list -> . initializer_clause
    (211) initializer_list -> . initializer_list COMMA initializer_clause
    (207) initializer_clause -> . assignment_expression
    (208) initializer_clause -> . LBRACE initializer_list RBRACE
    (209) initializer_clause -> . LBRACE RBRACE
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RBRACE          shift and go to state 218
    LBRACE          shift and go to state 156
    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 131
    conditional_expression         shift and go to state 153
    initializer_clause             shift and go to state 220
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    initializer_list               shift and go to state 219
    unqualified_id                 shift and go to state 42

state 157

    (213) class_specifier -> set_class_scope new_scope class_head LBRACE . member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> set_class_scope new_scope class_head LBRACE . RBRACE finish_scope unset_class_scope
    (218) member_specification -> . member_declaration
    (219) member_specification -> . member_declaration member_specification
    (220) member_specification -> . access_specifier COLON member_specification
    (221) member_specification -> . access_specifier COLON
    (222) member_declaration -> . decl_specifier_seq member_declarator_list SEMICOLON
    (223) member_declaration -> . decl_specifier_seq SEMICOLON
    (224) member_declaration -> . member_declarator_list SEMICOLON
    (225) member_declaration -> . SEMICOLON
    (226) member_declaration -> . function_definition SEMICOLON
    (227) member_declaration -> . function_definition
    (242) access_specifier -> . PUBLIC
    (243) access_specifier -> . PRIVATE
    (244) access_specifier -> . PROTECTED
    (148) decl_specifier_seq -> . decl_specifier
    (228) member_declarator_list -> . member_declarator
    (229) member_declarator_list -> . member_declarator_list COMMA mark_2 member_declarator
    (202) function_definition -> . decl_specifier_seq declarator function_scope function_body unset_function_scope
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (231) member_declarator -> . declarator
    (232) member_declarator -> . declarator constant_initializer
    (233) member_declarator -> . IDENTIFIER COLON constant_expression
    (234) member_declarator -> . COLON constant_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (5) set_class_scope -> .
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RBRACE          shift and go to state 228
    SEMICOLON       shift and go to state 224
    PUBLIC          shift and go to state 235
    PRIVATE         shift and go to state 223
    PROTECTED       shift and go to state 222
    IDENTIFIER      shift and go to state 231
    COLON           shift and go to state 227
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    set_class_scope                shift and go to state 15
    member_declarator_list         shift and go to state 221
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    decl_specifier_seq             shift and go to state 225
    access_specifier               shift and go to state 226
    id_expression                  shift and go to state 32
    unqualified_id                 shift and go to state 42
    decl_specifier                 shift and go to state 16
    direct_declarator              shift and go to state 33
    member_specification           shift and go to state 230
    ptr_operator                   shift and go to state 39
    declarator_id                  shift and go to state 38
    function_definition            shift and go to state 229
    member_declarator              shift and go to state 232
    function_specifier             shift and go to state 8
    conversion_function_id         shift and go to state 40
    declarator                     shift and go to state 233
    member_declaration             shift and go to state 234

state 158

    (215) class_head -> class_key IDENTIFIER . base_clause_opt
    (236) base_clause_opt -> .
    (237) base_clause_opt -> . COLON base_specifier_list

    LBRACE          reduce using rule 236 (base_clause_opt -> .)
    COLON           shift and go to state 237

    base_clause_opt                shift and go to state 236

state 159

    (166) init_declarator_list -> init_declarator_list COMMA mark_1 init_declarator .

    SEMICOLON       reduce using rule 166 (init_declarator_list -> init_declarator_list COMMA mark_1 init_declarator .)
    COMMA           reduce using rule 166 (init_declarator_list -> init_declarator_list COMMA mark_1 init_declarator .)


state 160

    (249) conversion_declarator -> ptr_operator conversion_declarator .

    LPAREN          reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    LBRACKET        reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    ASSIGN          reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    LBRACE          reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    SEMICOLON       reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    COMMA           reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    RPAREN          reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    PLUS_PLUS       reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    MINUS_MINUS     reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    DOT             reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    TIMES           reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    DIV             reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    MODULO          reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    PLUS            reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    MINUS           reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    LESS            reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    GREATER         reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    LESS_EQ         reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    GREATER_EQ      reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    IS_EQ           reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    NOT_EQ          reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    DOUBLE_AMPERSAND reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    QUESTION        reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    DOUBLE_PIPE     reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    RBRACKET        reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    EQ_TIMES        reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    EQ_DIV          reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    EQ_MODULO       reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    EQ_PLUS         reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    EQ_MINUS        reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    RBRACE          reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    COLON           reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)
    ELLIPSIS        reduce using rule 249 (conversion_declarator -> ptr_operator conversion_declarator .)


state 161

    (55) new_placement_opt -> new_placement .

    LPAREN          reduce using rule 55 (new_placement_opt -> new_placement .)
    BOOL            reduce using rule 55 (new_placement_opt -> new_placement .)
    CHAR            reduce using rule 55 (new_placement_opt -> new_placement .)
    INT             reduce using rule 55 (new_placement_opt -> new_placement .)
    FLOAT           reduce using rule 55 (new_placement_opt -> new_placement .)
    DOUBLE          reduce using rule 55 (new_placement_opt -> new_placement .)
    VOID            reduce using rule 55 (new_placement_opt -> new_placement .)
    CLASS           reduce using rule 55 (new_placement_opt -> new_placement .)
    STRUCT          reduce using rule 55 (new_placement_opt -> new_placement .)


state 162

    (51) new_expression -> NEW new_placement_opt . new_type_id new_initializer_opt
    (52) new_expression -> NEW new_placement_opt . LPAREN type_id RPAREN new_initializer_opt
    (56) new_type_id -> . type_specifier_seq new_declarator_opt
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    LPAREN          shift and go to state 238
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    class_specifier                shift and go to state 2
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    set_class_scope                shift and go to state 15
    new_type_id                    shift and go to state 240
    type_specifier_seq             shift and go to state 239

state 163

    (53) new_placement -> LPAREN . expression_list RPAREN
    (33) expression_list -> . assignment_expression
    (34) expression_list -> . expression_list COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 151
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    expression_list                shift and go to state 241
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 164

    (73) additive_expression -> additive_expression PLUS . multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 242
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 165

    (74) additive_expression -> additive_expression MINUS . multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 243
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 166

    (30) postfix_expression -> postfix_expression PLUS_PLUS .

    LBRACKET        reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LPAREN          reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DOT             reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    TIMES           reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIV             reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MODULO          reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS            reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS           reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LESS            reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GREATER         reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LESS_EQ         reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GREATER_EQ      reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    IS_EQ           reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    NOT_EQ          reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    QUESTION        reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DOUBLE_PIPE     reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RBRACKET        reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN          reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQ_TIMES        reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQ_DIV          reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQ_MODULO       reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQ_PLUS         reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQ_MINUS        reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RPAREN          reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    COMMA           reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SEMICOLON       reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RBRACE          reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    COLON           reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ELLIPSIS        reduce using rule 30 (postfix_expression -> postfix_expression PLUS_PLUS .)


state 167

    (27) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    malloc_statement               shift and go to state 148
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 244

state 168

    (32) postfix_expression -> postfix_expression DOT . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 245
    operator_function_id           shift and go to state 29
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 169

    (28) postfix_expression -> postfix_expression LPAREN . RPAREN
    (29) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (33) expression_list -> . assignment_expression
    (34) expression_list -> . expression_list COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RPAREN          shift and go to state 246
    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    malloc_statement               shift and go to state 148
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 151
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    expression_list                shift and go to state 247
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 170

    (31) postfix_expression -> postfix_expression MINUS_MINUS .

    LBRACKET        reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LPAREN          reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DOT             reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    TIMES           reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIV             reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MODULO          reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS            reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS           reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LESS            reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GREATER         reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LESS_EQ         reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GREATER_EQ      reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    IS_EQ           reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    NOT_EQ          reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    QUESTION        reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DOUBLE_PIPE     reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RBRACKET        reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN          reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQ_TIMES        reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQ_DIV          reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQ_MODULO       reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQ_PLUS         reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQ_MINUS        reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RPAREN          reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    COMMA           reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SEMICOLON       reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RBRACE          reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    COLON           reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ELLIPSIS        reduce using rule 31 (postfix_expression -> postfix_expression MINUS_MINUS .)


state 171

    (78) relational_expression -> relational_expression LESS_EQ . additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 248
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 172

    (77) relational_expression -> relational_expression GREATER . additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 249
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 173

    (76) relational_expression -> relational_expression LESS . additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 250
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 174

    (79) relational_expression -> relational_expression GREATER_EQ . additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 251
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 175

    (40) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    DIV             reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    MODULO          reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    LESS            reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    GREATER         reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    LESS_EQ         reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    GREATER_EQ      reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    IS_EQ           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    NOT_EQ          reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    QUESTION        reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    DOUBLE_PIPE     reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    ASSIGN          reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    EQ_TIMES        reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    EQ_DIV          reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    EQ_MODULO       reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    EQ_PLUS         reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    EQ_MINUS        reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    ELLIPSIS        reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)


state 176

    (88) conditional_expression -> logical_or_expression QUESTION . expression COLON assignment_expression
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 252

state 177

    (86) logical_or_expression -> logical_or_expression DOUBLE_PIPE . logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    logical_and_expression         shift and go to state 253
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 178

    (41) unary_expression -> SIZEOF unary_expression .

    TIMES           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    DIV             reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MODULO          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LESS            reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    GREATER         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LESS_EQ         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    GREATER_EQ      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    IS_EQ           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    NOT_EQ          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    QUESTION        reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    DOUBLE_PIPE     reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    ASSIGN          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    EQ_TIMES        reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    EQ_DIV          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    EQ_MODULO       reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    EQ_PLUS         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    EQ_MINUS        reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    ELLIPSIS        reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)


state 179

    (42) unary_expression -> SIZEOF LPAREN . type_id RPAREN
    (19) primary_expression -> LPAREN . expression RPAREN
    (179) type_id -> . type_specifier_seq abstract_declarator_opt
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (5) set_class_scope -> .
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    class_specifier                shift and go to state 2
    unary_expression               shift and go to state 104
    type_id                        shift and go to state 254
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    type_specifier_seq             shift and go to state 182
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 181

state 180

    (67) cast_expression -> LPAREN type_id . RPAREN cast_expression

    RPAREN          shift and go to state 255


state 181

    (19) primary_expression -> LPAREN expression . RPAREN
    (99) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 256
    COMMA           shift and go to state 257


state 182

    (179) type_id -> type_specifier_seq . abstract_declarator_opt
    (184) abstract_declarator_opt -> .
    (185) abstract_declarator_opt -> . abstract_declarator
    (182) abstract_declarator -> . ptr_operator abstract_declarator_opt
    (183) abstract_declarator -> . direct_abstract_declarator
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (186) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (187) direct_abstract_declarator -> . LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (188) direct_abstract_declarator -> . direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET
    (189) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (190) direct_abstract_declarator_opt -> .
    (191) direct_abstract_declarator_opt -> . direct_abstract_declarator

    RPAREN          reduce using rule 184 (abstract_declarator_opt -> .)
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    LPAREN          shift and go to state 260
    LBRACKET        reduce using rule 190 (direct_abstract_declarator_opt -> .)

    ptr_operator                   shift and go to state 258
    abstract_declarator_opt        shift and go to state 259
    abstract_declarator            shift and go to state 199
    direct_abstract_declarator     shift and go to state 201
    direct_abstract_declarator_opt shift and go to state 197

state 183

    (98) expression -> assignment_expression .

    COMMA           reduce using rule 98 (expression -> assignment_expression .)
    RPAREN          reduce using rule 98 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 98 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 98 (expression -> assignment_expression .)
    COLON           reduce using rule 98 (expression -> assignment_expression .)


state 184

    (84) logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND . equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    equality_expression            shift and go to state 261
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 185

    (82) equality_expression -> equality_expression NOT_EQ . relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 262
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 186

    (81) equality_expression -> equality_expression IS_EQ . relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 263
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 187

    (71) multiplicative_expression -> multiplicative_expression MODULO . cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 264
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 188

    (70) multiplicative_expression -> multiplicative_expression DIV . cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 265
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 189

    (69) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 266
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    primary_expression             shift and go to state 125
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 190

    (173) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LPAREN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    ASSIGN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMICOLON       reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    ELLIPSIS        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 191

    (39) unary_expression -> MINUS_MINUS cast_expression .

    TIMES           reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    DIV             reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    MODULO          reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    PLUS            reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    MINUS           reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    LESS            reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    GREATER         reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    LESS_EQ         reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    GREATER_EQ      reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    IS_EQ           reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    NOT_EQ          reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    QUESTION        reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    DOUBLE_PIPE     reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    ASSIGN          reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    EQ_TIMES        reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    EQ_DIV          reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    EQ_MODULO       reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    EQ_PLUS         reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    EQ_MINUS        reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    SEMICOLON       reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    COMMA           reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    ELLIPSIS        reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    RPAREN          reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    RBRACKET        reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    RBRACE          reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)
    COLON           reduce using rule 39 (unary_expression -> MINUS_MINUS cast_expression .)


state 192

    (38) unary_expression -> PLUS_PLUS cast_expression .

    TIMES           reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    DIV             reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    MODULO          reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    PLUS            reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    MINUS           reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    LESS            reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    GREATER         reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    LESS_EQ         reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    GREATER_EQ      reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    IS_EQ           reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    NOT_EQ          reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    QUESTION        reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    DOUBLE_PIPE     reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    ASSIGN          reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    EQ_TIMES        reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    EQ_DIV          reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    EQ_MODULO       reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    EQ_PLUS         reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    EQ_MINUS        reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    SEMICOLON       reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    COMMA           reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    ELLIPSIS        reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    RPAREN          reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    RBRACKET        reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    RBRACE          reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)
    COLON           reduce using rule 38 (unary_expression -> PLUS_PLUS cast_expression .)


state 193

    (65) delete_expression -> DELETE LBRACKET . RBRACKET cast_expression

    RBRACKET        shift and go to state 267


state 194

    (64) delete_expression -> DELETE cast_expression .

    TIMES           reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    DIV             reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    MODULO          reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    PLUS            reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    MINUS           reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    LESS            reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    GREATER         reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    LESS_EQ         reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    GREATER_EQ      reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    IS_EQ           reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    NOT_EQ          reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    QUESTION        reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    DOUBLE_PIPE     reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    ASSIGN          reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    EQ_TIMES        reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    EQ_DIV          reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    EQ_MODULO       reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    EQ_PLUS         reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    EQ_MINUS        reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    RBRACE          reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    RBRACKET        reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    COLON           reduce using rule 64 (delete_expression -> DELETE cast_expression .)
    ELLIPSIS        reduce using rule 64 (delete_expression -> DELETE cast_expression .)


state 195

    (200) parameter_declaration -> decl_specifier_seq abstract_declarator_opt .
    (201) parameter_declaration -> decl_specifier_seq abstract_declarator_opt . ASSIGN assignment_expression

    ELLIPSIS        reduce using rule 200 (parameter_declaration -> decl_specifier_seq abstract_declarator_opt .)
    COMMA           reduce using rule 200 (parameter_declaration -> decl_specifier_seq abstract_declarator_opt .)
    RPAREN          reduce using rule 200 (parameter_declaration -> decl_specifier_seq abstract_declarator_opt .)
    ASSIGN          shift and go to state 268


state 196

    (174) direct_declarator -> LPAREN . declarator RPAREN
    (187) direct_abstract_declarator -> LPAREN . parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (189) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (192) parameter_declaration_clause -> .
    (193) parameter_declaration_clause -> . parameter_declaration_list
    (194) parameter_declaration_clause -> . parameter_declaration_list ELLIPSIS
    (195) parameter_declaration_clause -> . parameter_declaration_list COMMA ELLIPSIS
    (182) abstract_declarator -> . ptr_operator abstract_declarator_opt
    (183) abstract_declarator -> . direct_abstract_declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (196) parameter_declaration_list -> . parameter_declaration
    (197) parameter_declaration_list -> . parameter_declaration_list COMMA parameter_declaration
    (186) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (187) direct_abstract_declarator -> . LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (188) direct_abstract_declarator -> . direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET
    (189) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (178) declarator_id -> . id_expression
    (198) parameter_declaration -> . decl_specifier_seq declarator
    (199) parameter_declaration -> . decl_specifier_seq declarator ASSIGN assignment_expression
    (200) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt
    (201) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression
    (190) direct_abstract_declarator_opt -> .
    (191) direct_abstract_declarator_opt -> . direct_abstract_declarator
    (21) id_expression -> . unqualified_id
    (148) decl_specifier_seq -> . decl_specifier
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    RPAREN          reduce using rule 192 (parameter_declaration_clause -> .)
    LPAREN          shift and go to state 196
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    LBRACKET        reduce using rule 190 (direct_abstract_declarator_opt -> .)
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    set_class_scope                shift and go to state 15
    function_specifier             shift and go to state 8
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    decl_specifier_seq             shift and go to state 140
    id_expression                  shift and go to state 32
    decl_specifier                 shift and go to state 16
    parameter_declaration          shift and go to state 141
    direct_declarator              shift and go to state 33
    parameter_declaration_clause   shift and go to state 269
    declarator_id                  shift and go to state 38
    direct_abstract_declarator_opt shift and go to state 197
    parameter_declaration_list     shift and go to state 143
    ptr_operator                   shift and go to state 198
    abstract_declarator            shift and go to state 270
    conversion_function_id         shift and go to state 40
    declarator                     shift and go to state 86
    direct_abstract_declarator     shift and go to state 201
    unqualified_id                 shift and go to state 42

state 197

    (188) direct_abstract_declarator -> direct_abstract_declarator_opt . LBRACKET constant_expression_opt RBRACKET

    LBRACKET        shift and go to state 271


state 198

    (170) declarator -> ptr_operator . declarator
    (182) abstract_declarator -> ptr_operator . abstract_declarator_opt
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (184) abstract_declarator_opt -> .
    (185) abstract_declarator_opt -> . abstract_declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (182) abstract_declarator -> . ptr_operator abstract_declarator_opt
    (183) abstract_declarator -> . direct_abstract_declarator
    (178) declarator_id -> . id_expression
    (186) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (187) direct_abstract_declarator -> . LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (188) direct_abstract_declarator -> . direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET
    (189) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (21) id_expression -> . unqualified_id
    (190) direct_abstract_declarator_opt -> .
    (191) direct_abstract_declarator_opt -> . direct_abstract_declarator
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    ASSIGN          reduce using rule 184 (abstract_declarator_opt -> .)
    ELLIPSIS        reduce using rule 184 (abstract_declarator_opt -> .)
    COMMA           reduce using rule 184 (abstract_declarator_opt -> .)
    RPAREN          reduce using rule 184 (abstract_declarator_opt -> .)
    LPAREN          shift and go to state 196
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    LBRACKET        reduce using rule 190 (direct_abstract_declarator_opt -> .)
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 198
    direct_declarator              shift and go to state 33
    abstract_declarator_opt        shift and go to state 272
    abstract_declarator            shift and go to state 199
    direct_abstract_declarator     shift and go to state 201
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 87
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38
    direct_abstract_declarator_opt shift and go to state 197

state 199

    (185) abstract_declarator_opt -> abstract_declarator .

    ASSIGN          reduce using rule 185 (abstract_declarator_opt -> abstract_declarator .)
    ELLIPSIS        reduce using rule 185 (abstract_declarator_opt -> abstract_declarator .)
    COMMA           reduce using rule 185 (abstract_declarator_opt -> abstract_declarator .)
    RPAREN          reduce using rule 185 (abstract_declarator_opt -> abstract_declarator .)


state 200

    (198) parameter_declaration -> decl_specifier_seq declarator .
    (199) parameter_declaration -> decl_specifier_seq declarator . ASSIGN assignment_expression

    ELLIPSIS        reduce using rule 198 (parameter_declaration -> decl_specifier_seq declarator .)
    COMMA           reduce using rule 198 (parameter_declaration -> decl_specifier_seq declarator .)
    RPAREN          reduce using rule 198 (parameter_declaration -> decl_specifier_seq declarator .)
    ASSIGN          shift and go to state 273


state 201

    (183) abstract_declarator -> direct_abstract_declarator .
    (186) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (191) direct_abstract_declarator_opt -> direct_abstract_declarator .

    RPAREN          reduce using rule 183 (abstract_declarator -> direct_abstract_declarator .)
    ASSIGN          reduce using rule 183 (abstract_declarator -> direct_abstract_declarator .)
    ELLIPSIS        reduce using rule 183 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 183 (abstract_declarator -> direct_abstract_declarator .)
    LPAREN          shift and go to state 274
    LBRACKET        reduce using rule 191 (direct_abstract_declarator_opt -> direct_abstract_declarator .)


state 202

    (172) direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .

    LPAREN          reduce using rule 172 (direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .)
    LBRACKET        reduce using rule 172 (direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .)
    ASSIGN          reduce using rule 172 (direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .)
    SEMICOLON       reduce using rule 172 (direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .)
    COMMA           reduce using rule 172 (direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .)
    LBRACE          reduce using rule 172 (direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .)
    RPAREN          reduce using rule 172 (direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .)
    ELLIPSIS        reduce using rule 172 (direct_declarator -> direct_declarator LPAREN parameter_declaration_clause RPAREN .)


state 203

    (194) parameter_declaration_clause -> parameter_declaration_list ELLIPSIS .

    RPAREN          reduce using rule 194 (parameter_declaration_clause -> parameter_declaration_list ELLIPSIS .)


state 204

    (195) parameter_declaration_clause -> parameter_declaration_list COMMA . ELLIPSIS
    (197) parameter_declaration_list -> parameter_declaration_list COMMA . parameter_declaration
    (198) parameter_declaration -> . decl_specifier_seq declarator
    (199) parameter_declaration -> . decl_specifier_seq declarator ASSIGN assignment_expression
    (200) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt
    (201) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression
    (148) decl_specifier_seq -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    ELLIPSIS        shift and go to state 276
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    type_specifier                 shift and go to state 10
    set_class_scope                shift and go to state 15
    decl_specifier                 shift and go to state 16
    parameter_declaration          shift and go to state 275
    decl_specifier_seq             shift and go to state 140
    function_specifier             shift and go to state 8
    simple_type_specifier          shift and go to state 11

state 205

    (118) compound_statement -> LBRACE new_scope . statement_seq finish_scope RBRACE
    (119) statement_seq -> . statement
    (120) statement_seq -> . statement_seq statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    statement_seq                  shift and go to state 294
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 296
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 206

    (117) compound_statement -> LBRACE RBRACE .

    IDENTIFIER      reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    PRINT           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    SCAN            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    MALLOC          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    AUTO            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    INLINE          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    BOOL            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    PLUS_PLUS       reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    MINUS_MINUS     reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    EXCLAMATION     reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    TILDE           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    AMPERSAND       reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    NEW             reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    DELETE          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    THIS            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    INUMBER         reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    DNUMBER         reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    LIT_CHAR        reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    LIT_STR         reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    TRUE            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    FALSE           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    OPERATOR        reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    CLASS           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    STRUCT          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 117 (compound_statement -> LBRACE RBRACE .)
    COLON           reduce using rule 117 (compound_statement -> LBRACE RBRACE .)


state 207

    (202) function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .

    SEMICOLON       reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    PUBLIC          reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    PRIVATE         reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    PROTECTED       reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    IDENTIFIER      reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    COLON           reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    AUTO            reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    EXTERN          reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    INLINE          reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    BOOL            reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    CHAR            reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    INT             reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    FLOAT           reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    DOUBLE          reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    VOID            reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    LPAREN          reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    TIMES           reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    AMPERSAND       reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    TILDE           reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    OPERATOR        reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    CLASS           reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    STRUCT          reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    RBRACE          reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)
    $end            reduce using rule 202 (function_definition -> decl_specifier_seq declarator function_scope function_body unset_function_scope .)


state 208

    (96) assignment_operator -> EQ_PLUS .

    MALLOC          reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    LPAREN          reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    PLUS_PLUS       reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    MINUS_MINUS     reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    SIZEOF          reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    EXCLAMATION     reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    TILDE           reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    TIMES           reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    AMPERSAND       reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    PLUS            reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    MINUS           reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    NEW             reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    DELETE          reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    THIS            reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    INUMBER         reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    DNUMBER         reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    LIT_CHAR        reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    LIT_STR         reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    TRUE            reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    FALSE           reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    IDENTIFIER      reduce using rule 96 (assignment_operator -> EQ_PLUS .)
    OPERATOR        reduce using rule 96 (assignment_operator -> EQ_PLUS .)


state 209

    (94) assignment_operator -> EQ_DIV .

    MALLOC          reduce using rule 94 (assignment_operator -> EQ_DIV .)
    LPAREN          reduce using rule 94 (assignment_operator -> EQ_DIV .)
    PLUS_PLUS       reduce using rule 94 (assignment_operator -> EQ_DIV .)
    MINUS_MINUS     reduce using rule 94 (assignment_operator -> EQ_DIV .)
    SIZEOF          reduce using rule 94 (assignment_operator -> EQ_DIV .)
    EXCLAMATION     reduce using rule 94 (assignment_operator -> EQ_DIV .)
    TILDE           reduce using rule 94 (assignment_operator -> EQ_DIV .)
    TIMES           reduce using rule 94 (assignment_operator -> EQ_DIV .)
    AMPERSAND       reduce using rule 94 (assignment_operator -> EQ_DIV .)
    PLUS            reduce using rule 94 (assignment_operator -> EQ_DIV .)
    MINUS           reduce using rule 94 (assignment_operator -> EQ_DIV .)
    NEW             reduce using rule 94 (assignment_operator -> EQ_DIV .)
    DELETE          reduce using rule 94 (assignment_operator -> EQ_DIV .)
    THIS            reduce using rule 94 (assignment_operator -> EQ_DIV .)
    INUMBER         reduce using rule 94 (assignment_operator -> EQ_DIV .)
    DNUMBER         reduce using rule 94 (assignment_operator -> EQ_DIV .)
    LIT_CHAR        reduce using rule 94 (assignment_operator -> EQ_DIV .)
    LIT_STR         reduce using rule 94 (assignment_operator -> EQ_DIV .)
    TRUE            reduce using rule 94 (assignment_operator -> EQ_DIV .)
    FALSE           reduce using rule 94 (assignment_operator -> EQ_DIV .)
    IDENTIFIER      reduce using rule 94 (assignment_operator -> EQ_DIV .)
    OPERATOR        reduce using rule 94 (assignment_operator -> EQ_DIV .)


state 210

    (92) assignment_operator -> ASSIGN .

    MALLOC          reduce using rule 92 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 92 (assignment_operator -> ASSIGN .)
    PLUS_PLUS       reduce using rule 92 (assignment_operator -> ASSIGN .)
    MINUS_MINUS     reduce using rule 92 (assignment_operator -> ASSIGN .)
    SIZEOF          reduce using rule 92 (assignment_operator -> ASSIGN .)
    EXCLAMATION     reduce using rule 92 (assignment_operator -> ASSIGN .)
    TILDE           reduce using rule 92 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 92 (assignment_operator -> ASSIGN .)
    AMPERSAND       reduce using rule 92 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 92 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 92 (assignment_operator -> ASSIGN .)
    NEW             reduce using rule 92 (assignment_operator -> ASSIGN .)
    DELETE          reduce using rule 92 (assignment_operator -> ASSIGN .)
    THIS            reduce using rule 92 (assignment_operator -> ASSIGN .)
    INUMBER         reduce using rule 92 (assignment_operator -> ASSIGN .)
    DNUMBER         reduce using rule 92 (assignment_operator -> ASSIGN .)
    LIT_CHAR        reduce using rule 92 (assignment_operator -> ASSIGN .)
    LIT_STR         reduce using rule 92 (assignment_operator -> ASSIGN .)
    TRUE            reduce using rule 92 (assignment_operator -> ASSIGN .)
    FALSE           reduce using rule 92 (assignment_operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 92 (assignment_operator -> ASSIGN .)
    OPERATOR        reduce using rule 92 (assignment_operator -> ASSIGN .)


state 211

    (95) assignment_operator -> EQ_MODULO .

    MALLOC          reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    LPAREN          reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    PLUS_PLUS       reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    MINUS_MINUS     reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    SIZEOF          reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    EXCLAMATION     reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    TILDE           reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    TIMES           reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    AMPERSAND       reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    PLUS            reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    MINUS           reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    NEW             reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    DELETE          reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    THIS            reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    INUMBER         reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    DNUMBER         reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    LIT_CHAR        reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    LIT_STR         reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    TRUE            reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    FALSE           reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    IDENTIFIER      reduce using rule 95 (assignment_operator -> EQ_MODULO .)
    OPERATOR        reduce using rule 95 (assignment_operator -> EQ_MODULO .)


state 212

    (91) assignment_expression -> logical_or_expression assignment_operator . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 305
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 213

    (97) assignment_operator -> EQ_MINUS .

    MALLOC          reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    LPAREN          reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    PLUS_PLUS       reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    MINUS_MINUS     reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    SIZEOF          reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    EXCLAMATION     reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    TILDE           reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    TIMES           reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    AMPERSAND       reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    PLUS            reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    MINUS           reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    NEW             reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    DELETE          reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    THIS            reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    INUMBER         reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    DNUMBER         reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    LIT_CHAR        reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    LIT_STR         reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    TRUE            reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    FALSE           reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    IDENTIFIER      reduce using rule 97 (assignment_operator -> EQ_MINUS .)
    OPERATOR        reduce using rule 97 (assignment_operator -> EQ_MINUS .)


state 214

    (93) assignment_operator -> EQ_TIMES .

    MALLOC          reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    LPAREN          reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    PLUS_PLUS       reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    MINUS_MINUS     reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    SIZEOF          reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    EXCLAMATION     reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    TILDE           reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    TIMES           reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    AMPERSAND       reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    PLUS            reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    MINUS           reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    NEW             reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    DELETE          reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    THIS            reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    INUMBER         reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    DNUMBER         reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    LIT_CHAR        reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    LIT_STR         reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    TRUE            reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    FALSE           reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    IDENTIFIER      reduce using rule 93 (assignment_operator -> EQ_TIMES .)
    OPERATOR        reduce using rule 93 (assignment_operator -> EQ_TIMES .)


state 215

    (134) malloc_statement -> MALLOC LPAREN . postfix_expression RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    THIS            shift and go to state 135
    LPAREN          shift and go to state 307
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 306
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    unqualified_id                 shift and go to state 42

state 216

    (34) expression_list -> expression_list COMMA . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 308
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 217

    (206) initializer_opt -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 206 (initializer_opt -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 206 (initializer_opt -> LPAREN expression_list RPAREN .)


state 218

    (209) initializer_clause -> LBRACE RBRACE .

    RBRACE          reduce using rule 209 (initializer_clause -> LBRACE RBRACE .)
    COMMA           reduce using rule 209 (initializer_clause -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 209 (initializer_clause -> LBRACE RBRACE .)


state 219

    (208) initializer_clause -> LBRACE initializer_list . RBRACE
    (211) initializer_list -> initializer_list . COMMA initializer_clause

    RBRACE          shift and go to state 310
    COMMA           shift and go to state 309


state 220

    (210) initializer_list -> initializer_clause .

    RBRACE          reduce using rule 210 (initializer_list -> initializer_clause .)
    COMMA           reduce using rule 210 (initializer_list -> initializer_clause .)


state 221

    (224) member_declaration -> member_declarator_list . SEMICOLON
    (229) member_declarator_list -> member_declarator_list . COMMA mark_2 member_declarator

    SEMICOLON       shift and go to state 312
    COMMA           shift and go to state 311


state 222

    (244) access_specifier -> PROTECTED .

    COLON           reduce using rule 244 (access_specifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 244 (access_specifier -> PROTECTED .)


state 223

    (243) access_specifier -> PRIVATE .

    COLON           reduce using rule 243 (access_specifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 243 (access_specifier -> PRIVATE .)


state 224

    (225) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 225 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 225 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 225 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 225 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 225 (member_declaration -> SEMICOLON .)
    COLON           reduce using rule 225 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 225 (member_declaration -> SEMICOLON .)
    EXTERN          reduce using rule 225 (member_declaration -> SEMICOLON .)
    INLINE          reduce using rule 225 (member_declaration -> SEMICOLON .)
    BOOL            reduce using rule 225 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 225 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 225 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 225 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 225 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 225 (member_declaration -> SEMICOLON .)
    LPAREN          reduce using rule 225 (member_declaration -> SEMICOLON .)
    TIMES           reduce using rule 225 (member_declaration -> SEMICOLON .)
    AMPERSAND       reduce using rule 225 (member_declaration -> SEMICOLON .)
    TILDE           reduce using rule 225 (member_declaration -> SEMICOLON .)
    OPERATOR        reduce using rule 225 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 225 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 225 (member_declaration -> SEMICOLON .)
    RBRACE          reduce using rule 225 (member_declaration -> SEMICOLON .)


state 225

    (222) member_declaration -> decl_specifier_seq . member_declarator_list SEMICOLON
    (223) member_declaration -> decl_specifier_seq . SEMICOLON
    (202) function_definition -> decl_specifier_seq . declarator function_scope function_body unset_function_scope
    (228) member_declarator_list -> . member_declarator
    (229) member_declarator_list -> . member_declarator_list COMMA mark_2 member_declarator
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (231) member_declarator -> . declarator
    (232) member_declarator -> . declarator constant_initializer
    (233) member_declarator -> . IDENTIFIER COLON constant_expression
    (234) member_declarator -> . COLON constant_expression
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    SEMICOLON       shift and go to state 314
    IDENTIFIER      shift and go to state 231
    COLON           shift and go to state 227
    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    member_declarator_list         shift and go to state 313
    operator_function_id           shift and go to state 29
    id_expression                  shift and go to state 32
    direct_declarator              shift and go to state 33
    declarator                     shift and go to state 315
    declarator_id                  shift and go to state 38
    member_declarator              shift and go to state 232
    conversion_function_id         shift and go to state 40
    ptr_operator                   shift and go to state 39
    unqualified_id                 shift and go to state 42

state 226

    (220) member_specification -> access_specifier . COLON member_specification
    (221) member_specification -> access_specifier . COLON

    COLON           shift and go to state 316


state 227

    (234) member_declarator -> COLON . constant_expression
    (100) constant_expression -> . conditional_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 117
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    constant_expression            shift and go to state 317
    conditional_expression         shift and go to state 138
    unqualified_id                 shift and go to state 42

state 228

    (214) class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE . finish_scope unset_class_scope
    (4) finish_scope -> .

    SEMICOLON       reduce using rule 4 (finish_scope -> .)
    LPAREN          reduce using rule 4 (finish_scope -> .)
    TIMES           reduce using rule 4 (finish_scope -> .)
    AMPERSAND       reduce using rule 4 (finish_scope -> .)
    IDENTIFIER      reduce using rule 4 (finish_scope -> .)
    TILDE           reduce using rule 4 (finish_scope -> .)
    OPERATOR        reduce using rule 4 (finish_scope -> .)
    BOOL            reduce using rule 4 (finish_scope -> .)
    CHAR            reduce using rule 4 (finish_scope -> .)
    INT             reduce using rule 4 (finish_scope -> .)
    FLOAT           reduce using rule 4 (finish_scope -> .)
    DOUBLE          reduce using rule 4 (finish_scope -> .)
    VOID            reduce using rule 4 (finish_scope -> .)
    CLASS           reduce using rule 4 (finish_scope -> .)
    STRUCT          reduce using rule 4 (finish_scope -> .)
    LBRACKET        reduce using rule 4 (finish_scope -> .)
    ASSIGN          reduce using rule 4 (finish_scope -> .)
    LBRACE          reduce using rule 4 (finish_scope -> .)
    COMMA           reduce using rule 4 (finish_scope -> .)
    RPAREN          reduce using rule 4 (finish_scope -> .)
    PLUS_PLUS       reduce using rule 4 (finish_scope -> .)
    MINUS_MINUS     reduce using rule 4 (finish_scope -> .)
    DOT             reduce using rule 4 (finish_scope -> .)
    DIV             reduce using rule 4 (finish_scope -> .)
    MODULO          reduce using rule 4 (finish_scope -> .)
    PLUS            reduce using rule 4 (finish_scope -> .)
    MINUS           reduce using rule 4 (finish_scope -> .)
    LESS            reduce using rule 4 (finish_scope -> .)
    GREATER         reduce using rule 4 (finish_scope -> .)
    LESS_EQ         reduce using rule 4 (finish_scope -> .)
    GREATER_EQ      reduce using rule 4 (finish_scope -> .)
    IS_EQ           reduce using rule 4 (finish_scope -> .)
    NOT_EQ          reduce using rule 4 (finish_scope -> .)
    DOUBLE_AMPERSAND reduce using rule 4 (finish_scope -> .)
    QUESTION        reduce using rule 4 (finish_scope -> .)
    DOUBLE_PIPE     reduce using rule 4 (finish_scope -> .)
    RBRACKET        reduce using rule 4 (finish_scope -> .)
    EQ_TIMES        reduce using rule 4 (finish_scope -> .)
    EQ_DIV          reduce using rule 4 (finish_scope -> .)
    EQ_MODULO       reduce using rule 4 (finish_scope -> .)
    EQ_PLUS         reduce using rule 4 (finish_scope -> .)
    EQ_MINUS        reduce using rule 4 (finish_scope -> .)
    RBRACE          reduce using rule 4 (finish_scope -> .)
    COLON           reduce using rule 4 (finish_scope -> .)
    ELLIPSIS        reduce using rule 4 (finish_scope -> .)

    finish_scope                   shift and go to state 318

state 229

    (226) member_declaration -> function_definition . SEMICOLON
    (227) member_declaration -> function_definition .

    SEMICOLON       shift and go to state 319
    PUBLIC          reduce using rule 227 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 227 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 227 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 227 (member_declaration -> function_definition .)
    COLON           reduce using rule 227 (member_declaration -> function_definition .)
    AUTO            reduce using rule 227 (member_declaration -> function_definition .)
    EXTERN          reduce using rule 227 (member_declaration -> function_definition .)
    INLINE          reduce using rule 227 (member_declaration -> function_definition .)
    BOOL            reduce using rule 227 (member_declaration -> function_definition .)
    CHAR            reduce using rule 227 (member_declaration -> function_definition .)
    INT             reduce using rule 227 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 227 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 227 (member_declaration -> function_definition .)
    VOID            reduce using rule 227 (member_declaration -> function_definition .)
    LPAREN          reduce using rule 227 (member_declaration -> function_definition .)
    TIMES           reduce using rule 227 (member_declaration -> function_definition .)
    AMPERSAND       reduce using rule 227 (member_declaration -> function_definition .)
    TILDE           reduce using rule 227 (member_declaration -> function_definition .)
    OPERATOR        reduce using rule 227 (member_declaration -> function_definition .)
    CLASS           reduce using rule 227 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 227 (member_declaration -> function_definition .)
    RBRACE          reduce using rule 227 (member_declaration -> function_definition .)

  ! SEMICOLON       [ reduce using rule 227 (member_declaration -> function_definition .) ]


state 230

    (213) class_specifier -> set_class_scope new_scope class_head LBRACE member_specification . RBRACE finish_scope unset_class_scope

    RBRACE          shift and go to state 320


state 231

    (233) member_declarator -> IDENTIFIER . COLON constant_expression
    (22) unqualified_id -> IDENTIFIER .

    COLON           shift and go to state 321
    LPAREN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LBRACKET        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    ASSIGN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    SEMICOLON       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    COMMA           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LBRACE          reduce using rule 22 (unqualified_id -> IDENTIFIER .)


state 232

    (228) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 228 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 228 (member_declarator_list -> member_declarator .)


state 233

    (231) member_declarator -> declarator .
    (232) member_declarator -> declarator . constant_initializer
    (235) constant_initializer -> . ASSIGN constant_expression

    SEMICOLON       reduce using rule 231 (member_declarator -> declarator .)
    COMMA           reduce using rule 231 (member_declarator -> declarator .)
    ASSIGN          shift and go to state 323

    constant_initializer           shift and go to state 322

state 234

    (218) member_specification -> member_declaration .
    (219) member_specification -> member_declaration . member_specification
    (218) member_specification -> . member_declaration
    (219) member_specification -> . member_declaration member_specification
    (220) member_specification -> . access_specifier COLON member_specification
    (221) member_specification -> . access_specifier COLON
    (222) member_declaration -> . decl_specifier_seq member_declarator_list SEMICOLON
    (223) member_declaration -> . decl_specifier_seq SEMICOLON
    (224) member_declaration -> . member_declarator_list SEMICOLON
    (225) member_declaration -> . SEMICOLON
    (226) member_declaration -> . function_definition SEMICOLON
    (227) member_declaration -> . function_definition
    (242) access_specifier -> . PUBLIC
    (243) access_specifier -> . PRIVATE
    (244) access_specifier -> . PROTECTED
    (148) decl_specifier_seq -> . decl_specifier
    (228) member_declarator_list -> . member_declarator
    (229) member_declarator_list -> . member_declarator_list COMMA mark_2 member_declarator
    (202) function_definition -> . decl_specifier_seq declarator function_scope function_body unset_function_scope
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (231) member_declarator -> . declarator
    (232) member_declarator -> . declarator constant_initializer
    (233) member_declarator -> . IDENTIFIER COLON constant_expression
    (234) member_declarator -> . COLON constant_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (5) set_class_scope -> .
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RBRACE          reduce using rule 218 (member_specification -> member_declaration .)
    SEMICOLON       shift and go to state 224
    PUBLIC          shift and go to state 235
    PRIVATE         shift and go to state 223
    PROTECTED       shift and go to state 222
    IDENTIFIER      shift and go to state 231
    COLON           shift and go to state 227
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    set_class_scope                shift and go to state 15
    member_declarator_list         shift and go to state 221
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    decl_specifier_seq             shift and go to state 225
    access_specifier               shift and go to state 226
    id_expression                  shift and go to state 32
    unqualified_id                 shift and go to state 42
    decl_specifier                 shift and go to state 16
    direct_declarator              shift and go to state 33
    declarator                     shift and go to state 233
    member_specification           shift and go to state 324
    declarator_id                  shift and go to state 38
    function_definition            shift and go to state 229
    member_declarator              shift and go to state 232
    function_specifier             shift and go to state 8
    conversion_function_id         shift and go to state 40
    ptr_operator                   shift and go to state 39
    member_declaration             shift and go to state 234

state 235

    (242) access_specifier -> PUBLIC .

    COLON           reduce using rule 242 (access_specifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 242 (access_specifier -> PUBLIC .)


state 236

    (215) class_head -> class_key IDENTIFIER base_clause_opt .

    LBRACE          reduce using rule 215 (class_head -> class_key IDENTIFIER base_clause_opt .)


state 237

    (237) base_clause_opt -> COLON . base_specifier_list
    (238) base_specifier_list -> . base_specifier_list COMMA base_specifier
    (239) base_specifier_list -> . base_specifier
    (240) base_specifier -> . class_name
    (241) base_specifier -> . access_specifier class_name
    (212) class_name -> . IDENTIFIER
    (242) access_specifier -> . PUBLIC
    (243) access_specifier -> . PRIVATE
    (244) access_specifier -> . PROTECTED

    IDENTIFIER      shift and go to state 83
    PUBLIC          shift and go to state 235
    PRIVATE         shift and go to state 223
    PROTECTED       shift and go to state 222

    base_specifier                 shift and go to state 327
    class_name                     shift and go to state 325
    base_specifier_list            shift and go to state 328
    access_specifier               shift and go to state 326

state 238

    (52) new_expression -> NEW new_placement_opt LPAREN . type_id RPAREN new_initializer_opt
    (179) type_id -> . type_specifier_seq abstract_declarator_opt
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    class_specifier                shift and go to state 2
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    type_id                        shift and go to state 329
    set_class_scope                shift and go to state 15
    type_specifier_seq             shift and go to state 182

state 239

    (56) new_type_id -> type_specifier_seq . new_declarator_opt
    (57) new_declarator_opt -> .
    (58) new_declarator_opt -> . ptr_operator new_declarator_opt
    (59) new_declarator_opt -> . direct_new_declarator
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (60) direct_new_declarator -> . LBRACKET expression RBRACKET
    (61) direct_new_declarator -> . direct_new_declarator LBRACKET constant_expression RBRACKET

    LPAREN          reduce using rule 57 (new_declarator_opt -> .)
    DIV             reduce using rule 57 (new_declarator_opt -> .)
    MODULO          reduce using rule 57 (new_declarator_opt -> .)
    PLUS            reduce using rule 57 (new_declarator_opt -> .)
    MINUS           reduce using rule 57 (new_declarator_opt -> .)
    LESS            reduce using rule 57 (new_declarator_opt -> .)
    GREATER         reduce using rule 57 (new_declarator_opt -> .)
    LESS_EQ         reduce using rule 57 (new_declarator_opt -> .)
    GREATER_EQ      reduce using rule 57 (new_declarator_opt -> .)
    IS_EQ           reduce using rule 57 (new_declarator_opt -> .)
    NOT_EQ          reduce using rule 57 (new_declarator_opt -> .)
    DOUBLE_AMPERSAND reduce using rule 57 (new_declarator_opt -> .)
    QUESTION        reduce using rule 57 (new_declarator_opt -> .)
    DOUBLE_PIPE     reduce using rule 57 (new_declarator_opt -> .)
    RBRACKET        reduce using rule 57 (new_declarator_opt -> .)
    ASSIGN          reduce using rule 57 (new_declarator_opt -> .)
    EQ_TIMES        reduce using rule 57 (new_declarator_opt -> .)
    EQ_DIV          reduce using rule 57 (new_declarator_opt -> .)
    EQ_MODULO       reduce using rule 57 (new_declarator_opt -> .)
    EQ_PLUS         reduce using rule 57 (new_declarator_opt -> .)
    EQ_MINUS        reduce using rule 57 (new_declarator_opt -> .)
    RPAREN          reduce using rule 57 (new_declarator_opt -> .)
    COMMA           reduce using rule 57 (new_declarator_opt -> .)
    SEMICOLON       reduce using rule 57 (new_declarator_opt -> .)
    RBRACE          reduce using rule 57 (new_declarator_opt -> .)
    COLON           reduce using rule 57 (new_declarator_opt -> .)
    ELLIPSIS        reduce using rule 57 (new_declarator_opt -> .)
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    LBRACKET        shift and go to state 333

  ! TIMES           [ reduce using rule 57 (new_declarator_opt -> .) ]

    new_declarator_opt             shift and go to state 330
    direct_new_declarator          shift and go to state 331
    ptr_operator                   shift and go to state 332

state 240

    (51) new_expression -> NEW new_placement_opt new_type_id . new_initializer_opt
    (62) new_initializer_opt -> .
    (63) new_initializer_opt -> . LPAREN expression_list_opt RPAREN

    TIMES           reduce using rule 62 (new_initializer_opt -> .)
    DIV             reduce using rule 62 (new_initializer_opt -> .)
    MODULO          reduce using rule 62 (new_initializer_opt -> .)
    PLUS            reduce using rule 62 (new_initializer_opt -> .)
    MINUS           reduce using rule 62 (new_initializer_opt -> .)
    LESS            reduce using rule 62 (new_initializer_opt -> .)
    GREATER         reduce using rule 62 (new_initializer_opt -> .)
    LESS_EQ         reduce using rule 62 (new_initializer_opt -> .)
    GREATER_EQ      reduce using rule 62 (new_initializer_opt -> .)
    IS_EQ           reduce using rule 62 (new_initializer_opt -> .)
    NOT_EQ          reduce using rule 62 (new_initializer_opt -> .)
    DOUBLE_AMPERSAND reduce using rule 62 (new_initializer_opt -> .)
    QUESTION        reduce using rule 62 (new_initializer_opt -> .)
    DOUBLE_PIPE     reduce using rule 62 (new_initializer_opt -> .)
    RBRACKET        reduce using rule 62 (new_initializer_opt -> .)
    ASSIGN          reduce using rule 62 (new_initializer_opt -> .)
    EQ_TIMES        reduce using rule 62 (new_initializer_opt -> .)
    EQ_DIV          reduce using rule 62 (new_initializer_opt -> .)
    EQ_MODULO       reduce using rule 62 (new_initializer_opt -> .)
    EQ_PLUS         reduce using rule 62 (new_initializer_opt -> .)
    EQ_MINUS        reduce using rule 62 (new_initializer_opt -> .)
    RPAREN          reduce using rule 62 (new_initializer_opt -> .)
    COMMA           reduce using rule 62 (new_initializer_opt -> .)
    SEMICOLON       reduce using rule 62 (new_initializer_opt -> .)
    RBRACE          reduce using rule 62 (new_initializer_opt -> .)
    COLON           reduce using rule 62 (new_initializer_opt -> .)
    ELLIPSIS        reduce using rule 62 (new_initializer_opt -> .)
    LPAREN          shift and go to state 334

    new_initializer_opt            shift and go to state 335

state 241

    (53) new_placement -> LPAREN expression_list . RPAREN
    (34) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 336
    COMMA           shift and go to state 216


state 242

    (73) additive_expression -> additive_expression PLUS multiplicative_expression .
    (69) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (70) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (71) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER         reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_EQ         reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_EQ      reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_EQ           reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQ          reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOUBLE_AMPERSAND reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUESTION        reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOUBLE_PIPE     reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASSIGN          reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_TIMES        reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_DIV          reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_MODULO       reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_PLUS         reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_MINUS        reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELLIPSIS        reduce using rule 73 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 189
    DIV             shift and go to state 188
    MODULO          shift and go to state 187


state 243

    (74) additive_expression -> additive_expression MINUS multiplicative_expression .
    (69) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (70) multiplicative_expression -> multiplicative_expression . DIV cast_expression
    (71) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS            reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER         reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_EQ         reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_EQ      reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IS_EQ           reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQ          reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOUBLE_AMPERSAND reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUESTION        reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOUBLE_PIPE     reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASSIGN          reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_TIMES        reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_DIV          reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_MODULO       reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_PLUS         reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_MINUS        reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELLIPSIS        reduce using rule 74 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 189
    DIV             shift and go to state 188
    MODULO          shift and go to state 187


state 244

    (27) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (99) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 337
    COMMA           shift and go to state 257


state 245

    (32) postfix_expression -> postfix_expression DOT id_expression .

    LBRACKET        reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    LPAREN          reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    PLUS_PLUS       reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    MINUS_MINUS     reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    DOT             reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    TIMES           reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    DIV             reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    MODULO          reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    PLUS            reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    MINUS           reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    LESS            reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    GREATER         reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    LESS_EQ         reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    GREATER_EQ      reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    IS_EQ           reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    NOT_EQ          reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    DOUBLE_AMPERSAND reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    QUESTION        reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    DOUBLE_PIPE     reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    RBRACKET        reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    ASSIGN          reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    EQ_TIMES        reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    EQ_DIV          reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    EQ_MODULO       reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    EQ_PLUS         reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    EQ_MINUS        reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    RPAREN          reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    COMMA           reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    SEMICOLON       reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    RBRACE          reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    COLON           reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)
    ELLIPSIS        reduce using rule 32 (postfix_expression -> postfix_expression DOT id_expression .)


state 246

    (28) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS_PLUS       reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS_MINUS     reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV             reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODULO          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS            reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS_EQ         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    IS_EQ           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT_EQ          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESTION        reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE_PIPE     reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_TIMES        reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_DIV          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_MODULO       reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_PLUS         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_MINUS        reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ELLIPSIS        reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 247

    (29) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (34) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 338
    COMMA           shift and go to state 216


state 248

    (78) relational_expression -> relational_expression LESS_EQ additive_expression .
    (73) additive_expression -> additive_expression . PLUS multiplicative_expression
    (74) additive_expression -> additive_expression . MINUS multiplicative_expression

    LESS            reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    GREATER         reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    LESS_EQ         reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    GREATER_EQ      reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    IS_EQ           reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    NOT_EQ          reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    QUESTION        reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    DOUBLE_PIPE     reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    ASSIGN          reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ_TIMES        reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ_DIV          reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ_MODULO       reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ_PLUS         reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ_MINUS        reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    SEMICOLON       reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    COMMA           reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    RPAREN          reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    RBRACE          reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    RBRACKET        reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    COLON           reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    ELLIPSIS        reduce using rule 78 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165


state 249

    (77) relational_expression -> relational_expression GREATER additive_expression .
    (73) additive_expression -> additive_expression . PLUS multiplicative_expression
    (74) additive_expression -> additive_expression . MINUS multiplicative_expression

    LESS            reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    GREATER         reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    LESS_EQ         reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    GREATER_EQ      reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    IS_EQ           reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    NOT_EQ          reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    QUESTION        reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    DOUBLE_PIPE     reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    ASSIGN          reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ_TIMES        reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ_DIV          reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ_MODULO       reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ_PLUS         reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ_MINUS        reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    SEMICOLON       reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    COMMA           reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    RPAREN          reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    RBRACE          reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    RBRACKET        reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    COLON           reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    ELLIPSIS        reduce using rule 77 (relational_expression -> relational_expression GREATER additive_expression .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165


state 250

    (76) relational_expression -> relational_expression LESS additive_expression .
    (73) additive_expression -> additive_expression . PLUS multiplicative_expression
    (74) additive_expression -> additive_expression . MINUS multiplicative_expression

    LESS            reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    GREATER         reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    LESS_EQ         reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    GREATER_EQ      reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    IS_EQ           reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    NOT_EQ          reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    QUESTION        reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    DOUBLE_PIPE     reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    ASSIGN          reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    EQ_TIMES        reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    EQ_DIV          reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    EQ_MODULO       reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    EQ_PLUS         reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    EQ_MINUS        reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    SEMICOLON       reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    COMMA           reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    RPAREN          reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    RBRACE          reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    RBRACKET        reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    COLON           reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    ELLIPSIS        reduce using rule 76 (relational_expression -> relational_expression LESS additive_expression .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165


state 251

    (79) relational_expression -> relational_expression GREATER_EQ additive_expression .
    (73) additive_expression -> additive_expression . PLUS multiplicative_expression
    (74) additive_expression -> additive_expression . MINUS multiplicative_expression

    LESS            reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    GREATER         reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    LESS_EQ         reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    GREATER_EQ      reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    IS_EQ           reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    NOT_EQ          reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    QUESTION        reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    DOUBLE_PIPE     reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    ASSIGN          reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ_TIMES        reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ_DIV          reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ_MODULO       reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ_PLUS         reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ_MINUS        reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    SEMICOLON       reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    COMMA           reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    RPAREN          reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    RBRACE          reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    RBRACKET        reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    COLON           reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    ELLIPSIS        reduce using rule 79 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165


state 252

    (88) conditional_expression -> logical_or_expression QUESTION expression . COLON assignment_expression
    (99) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 339
    COMMA           shift and go to state 257


state 253

    (86) logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .
    (84) logical_and_expression -> logical_and_expression . DOUBLE_AMPERSAND equality_expression

    QUESTION        reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    DOUBLE_PIPE     reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    ASSIGN          reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    EQ_TIMES        reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    EQ_DIV          reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    EQ_MODULO       reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    EQ_PLUS         reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    EQ_MINUS        reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    RPAREN          reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    COMMA           reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    SEMICOLON       reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    RBRACKET        reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    ELLIPSIS        reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    COLON           reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    RBRACE          reduce using rule 86 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    DOUBLE_AMPERSAND shift and go to state 184


state 254

    (42) unary_expression -> SIZEOF LPAREN type_id . RPAREN

    RPAREN          shift and go to state 340


state 255

    (67) cast_expression -> LPAREN type_id RPAREN . cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    unqualified_id                 shift and go to state 42
    unary_expression               shift and go to state 104
    operator_function_id           shift and go to state 29
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    new_expression                 shift and go to state 107
    cast_expression                shift and go to state 341
    unary_operator                 shift and go to state 115

state 256

    (19) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    PLUS_PLUS       reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    MINUS_MINUS     reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    IS_EQ           reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    QUESTION        reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    EQ_TIMES        reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    EQ_DIV          reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    EQ_MODULO       reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    EQ_PLUS         reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    EQ_MINUS        reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)
    ELLIPSIS        reduce using rule 19 (primary_expression -> LPAREN expression RPAREN .)


state 257

    (99) expression -> expression COMMA . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 342
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 258

    (182) abstract_declarator -> ptr_operator . abstract_declarator_opt
    (184) abstract_declarator_opt -> .
    (185) abstract_declarator_opt -> . abstract_declarator
    (182) abstract_declarator -> . ptr_operator abstract_declarator_opt
    (183) abstract_declarator -> . direct_abstract_declarator
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (186) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (187) direct_abstract_declarator -> . LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (188) direct_abstract_declarator -> . direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET
    (189) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (190) direct_abstract_declarator_opt -> .
    (191) direct_abstract_declarator_opt -> . direct_abstract_declarator

    RPAREN          reduce using rule 184 (abstract_declarator_opt -> .)
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    LPAREN          shift and go to state 260
    LBRACKET        reduce using rule 190 (direct_abstract_declarator_opt -> .)

    ptr_operator                   shift and go to state 258
    abstract_declarator_opt        shift and go to state 272
    abstract_declarator            shift and go to state 199
    direct_abstract_declarator     shift and go to state 201
    direct_abstract_declarator_opt shift and go to state 197

state 259

    (179) type_id -> type_specifier_seq abstract_declarator_opt .

    RPAREN          reduce using rule 179 (type_id -> type_specifier_seq abstract_declarator_opt .)


state 260

    (187) direct_abstract_declarator -> LPAREN . parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (189) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (192) parameter_declaration_clause -> .
    (193) parameter_declaration_clause -> . parameter_declaration_list
    (194) parameter_declaration_clause -> . parameter_declaration_list ELLIPSIS
    (195) parameter_declaration_clause -> . parameter_declaration_list COMMA ELLIPSIS
    (182) abstract_declarator -> . ptr_operator abstract_declarator_opt
    (183) abstract_declarator -> . direct_abstract_declarator
    (196) parameter_declaration_list -> . parameter_declaration
    (197) parameter_declaration_list -> . parameter_declaration_list COMMA parameter_declaration
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (186) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (187) direct_abstract_declarator -> . LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (188) direct_abstract_declarator -> . direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET
    (189) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (198) parameter_declaration -> . decl_specifier_seq declarator
    (199) parameter_declaration -> . decl_specifier_seq declarator ASSIGN assignment_expression
    (200) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt
    (201) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression
    (190) direct_abstract_declarator_opt -> .
    (191) direct_abstract_declarator_opt -> . direct_abstract_declarator
    (148) decl_specifier_seq -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    RPAREN          reduce using rule 192 (parameter_declaration_clause -> .)
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    LPAREN          shift and go to state 260
    LBRACKET        reduce using rule 190 (direct_abstract_declarator_opt -> .)
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    set_class_scope                shift and go to state 15
    function_specifier             shift and go to state 8
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    decl_specifier_seq             shift and go to state 140
    decl_specifier                 shift and go to state 16
    parameter_declaration          shift and go to state 141
    parameter_declaration_clause   shift and go to state 269
    direct_abstract_declarator_opt shift and go to state 197
    parameter_declaration_list     shift and go to state 143
    ptr_operator                   shift and go to state 258
    abstract_declarator            shift and go to state 270
    direct_abstract_declarator     shift and go to state 201

state 261

    (84) logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .
    (81) equality_expression -> equality_expression . IS_EQ relational_expression
    (82) equality_expression -> equality_expression . NOT_EQ relational_expression

    DOUBLE_AMPERSAND reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    QUESTION        reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    DOUBLE_PIPE     reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    ASSIGN          reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    EQ_TIMES        reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    EQ_DIV          reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    EQ_MODULO       reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    EQ_PLUS         reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    EQ_MINUS        reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    SEMICOLON       reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    COMMA           reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    RPAREN          reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    RBRACKET        reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    RBRACE          reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    COLON           reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    ELLIPSIS        reduce using rule 84 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND equality_expression .)
    IS_EQ           shift and go to state 186
    NOT_EQ          shift and go to state 185


state 262

    (82) equality_expression -> equality_expression NOT_EQ relational_expression .
    (76) relational_expression -> relational_expression . LESS additive_expression
    (77) relational_expression -> relational_expression . GREATER additive_expression
    (78) relational_expression -> relational_expression . LESS_EQ additive_expression
    (79) relational_expression -> relational_expression . GREATER_EQ additive_expression

    IS_EQ           reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    NOT_EQ          reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    QUESTION        reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    DOUBLE_PIPE     reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    ASSIGN          reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ_TIMES        reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ_DIV          reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ_MODULO       reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ_PLUS         reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ_MINUS        reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    ELLIPSIS        reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    COMMA           reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RPAREN          reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RBRACKET        reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    SEMICOLON       reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RBRACE          reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    COLON           reduce using rule 82 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LESS            shift and go to state 173
    GREATER         shift and go to state 172
    LESS_EQ         shift and go to state 171
    GREATER_EQ      shift and go to state 174


state 263

    (81) equality_expression -> equality_expression IS_EQ relational_expression .
    (76) relational_expression -> relational_expression . LESS additive_expression
    (77) relational_expression -> relational_expression . GREATER additive_expression
    (78) relational_expression -> relational_expression . LESS_EQ additive_expression
    (79) relational_expression -> relational_expression . GREATER_EQ additive_expression

    IS_EQ           reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    NOT_EQ          reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    QUESTION        reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    DOUBLE_PIPE     reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    ASSIGN          reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    EQ_TIMES        reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    EQ_DIV          reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    EQ_MODULO       reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    EQ_PLUS         reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    EQ_MINUS        reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    ELLIPSIS        reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    COMMA           reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    RPAREN          reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    RBRACKET        reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    SEMICOLON       reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    RBRACE          reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    COLON           reduce using rule 81 (equality_expression -> equality_expression IS_EQ relational_expression .)
    LESS            shift and go to state 173
    GREATER         shift and go to state 172
    LESS_EQ         shift and go to state 171
    GREATER_EQ      shift and go to state 174


state 264

    (71) multiplicative_expression -> multiplicative_expression MODULO cast_expression .

    TIMES           reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    DIV             reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    MODULO          reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    PLUS            reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    MINUS           reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LESS            reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    GREATER         reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LESS_EQ         reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    GREATER_EQ      reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    IS_EQ           reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    NOT_EQ          reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    QUESTION        reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    DOUBLE_PIPE     reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    ASSIGN          reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    EQ_TIMES        reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    EQ_DIV          reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    EQ_MODULO       reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    EQ_PLUS         reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    EQ_MINUS        reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    SEMICOLON       reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    COMMA           reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RPAREN          reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RBRACKET        reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RBRACE          reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    COLON           reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    ELLIPSIS        reduce using rule 71 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)


state 265

    (70) multiplicative_expression -> multiplicative_expression DIV cast_expression .

    TIMES           reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    DIV             reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    MODULO          reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    PLUS            reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    MINUS           reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LESS            reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    GREATER         reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    LESS_EQ         reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    GREATER_EQ      reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    IS_EQ           reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    NOT_EQ          reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    QUESTION        reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    DOUBLE_PIPE     reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    ASSIGN          reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    EQ_TIMES        reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    EQ_DIV          reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    EQ_MODULO       reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    EQ_PLUS         reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    EQ_MINUS        reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    SEMICOLON       reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    COMMA           reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RPAREN          reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RBRACKET        reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    RBRACE          reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    COLON           reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)
    ELLIPSIS        reduce using rule 70 (multiplicative_expression -> multiplicative_expression DIV cast_expression .)


state 266

    (69) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIV             reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MODULO          reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LESS            reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GREATER         reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LESS_EQ         reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GREATER_EQ      reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    IS_EQ           reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NOT_EQ          reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    QUESTION        reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DOUBLE_PIPE     reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    ASSIGN          reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_TIMES        reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_DIV          reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_MODULO       reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_PLUS         reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_MINUS        reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMICOLON       reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    ELLIPSIS        reduce using rule 69 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 267

    (65) delete_expression -> DELETE LBRACKET RBRACKET . cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    unqualified_id                 shift and go to state 42
    unary_expression               shift and go to state 104
    operator_function_id           shift and go to state 29
    delete_expression              shift and go to state 105
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    new_expression                 shift and go to state 107
    cast_expression                shift and go to state 343
    unary_operator                 shift and go to state 115

state 268

    (201) parameter_declaration -> decl_specifier_seq abstract_declarator_opt ASSIGN . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 344
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 269

    (187) direct_abstract_declarator -> LPAREN parameter_declaration_clause . RPAREN cv_qualifier_seq_opt

    RPAREN          shift and go to state 345


state 270

    (189) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 346


state 271

    (188) direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET . constant_expression_opt RBRACKET
    (101) constant_expression_opt -> .
    (102) constant_expression_opt -> . constant_expression
    (100) constant_expression -> . conditional_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RBRACKET        reduce using rule 101 (constant_expression_opt -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 117
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    constant_expression_opt        shift and go to state 347
    conversion_function_id         shift and go to state 40
    constant_expression            shift and go to state 118
    conditional_expression         shift and go to state 138
    unqualified_id                 shift and go to state 42

state 272

    (182) abstract_declarator -> ptr_operator abstract_declarator_opt .

    RPAREN          reduce using rule 182 (abstract_declarator -> ptr_operator abstract_declarator_opt .)
    ASSIGN          reduce using rule 182 (abstract_declarator -> ptr_operator abstract_declarator_opt .)
    ELLIPSIS        reduce using rule 182 (abstract_declarator -> ptr_operator abstract_declarator_opt .)
    COMMA           reduce using rule 182 (abstract_declarator -> ptr_operator abstract_declarator_opt .)


state 273

    (199) parameter_declaration -> decl_specifier_seq declarator ASSIGN . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 348
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 274

    (186) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_declaration_clause RPAREN cv_qualifier_seq_opt
    (192) parameter_declaration_clause -> .
    (193) parameter_declaration_clause -> . parameter_declaration_list
    (194) parameter_declaration_clause -> . parameter_declaration_list ELLIPSIS
    (195) parameter_declaration_clause -> . parameter_declaration_list COMMA ELLIPSIS
    (196) parameter_declaration_list -> . parameter_declaration
    (197) parameter_declaration_list -> . parameter_declaration_list COMMA parameter_declaration
    (198) parameter_declaration -> . decl_specifier_seq declarator
    (199) parameter_declaration -> . decl_specifier_seq declarator ASSIGN assignment_expression
    (200) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt
    (201) parameter_declaration -> . decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression
    (148) decl_specifier_seq -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (5) set_class_scope -> .

    RPAREN          reduce using rule 192 (parameter_declaration_clause -> .)
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    type_specifier                 shift and go to state 10
    set_class_scope                shift and go to state 15
    parameter_declaration_list     shift and go to state 143
    decl_specifier                 shift and go to state 16
    parameter_declaration          shift and go to state 141
    decl_specifier_seq             shift and go to state 140
    function_specifier             shift and go to state 8
    parameter_declaration_clause   shift and go to state 349
    simple_type_specifier          shift and go to state 11

state 275

    (197) parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .

    ELLIPSIS        reduce using rule 197 (parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .)
    COMMA           reduce using rule 197 (parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 197 (parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .)


state 276

    (195) parameter_declaration_clause -> parameter_declaration_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 195 (parameter_declaration_clause -> parameter_declaration_list COMMA ELLIPSIS .)


state 277

    (104) statement -> expression_statement .

    IDENTIFIER      reduce using rule 104 (statement -> expression_statement .)
    CASE            reduce using rule 104 (statement -> expression_statement .)
    DEFAULT         reduce using rule 104 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 104 (statement -> expression_statement .)
    LBRACE          reduce using rule 104 (statement -> expression_statement .)
    IF              reduce using rule 104 (statement -> expression_statement .)
    SWITCH          reduce using rule 104 (statement -> expression_statement .)
    WHILE           reduce using rule 104 (statement -> expression_statement .)
    DO              reduce using rule 104 (statement -> expression_statement .)
    FOR             reduce using rule 104 (statement -> expression_statement .)
    BREAK           reduce using rule 104 (statement -> expression_statement .)
    CONTINUE        reduce using rule 104 (statement -> expression_statement .)
    RETURN          reduce using rule 104 (statement -> expression_statement .)
    PRINT           reduce using rule 104 (statement -> expression_statement .)
    SCAN            reduce using rule 104 (statement -> expression_statement .)
    MALLOC          reduce using rule 104 (statement -> expression_statement .)
    AUTO            reduce using rule 104 (statement -> expression_statement .)
    EXTERN          reduce using rule 104 (statement -> expression_statement .)
    INLINE          reduce using rule 104 (statement -> expression_statement .)
    BOOL            reduce using rule 104 (statement -> expression_statement .)
    CHAR            reduce using rule 104 (statement -> expression_statement .)
    INT             reduce using rule 104 (statement -> expression_statement .)
    FLOAT           reduce using rule 104 (statement -> expression_statement .)
    DOUBLE          reduce using rule 104 (statement -> expression_statement .)
    VOID            reduce using rule 104 (statement -> expression_statement .)
    LPAREN          reduce using rule 104 (statement -> expression_statement .)
    PLUS_PLUS       reduce using rule 104 (statement -> expression_statement .)
    MINUS_MINUS     reduce using rule 104 (statement -> expression_statement .)
    SIZEOF          reduce using rule 104 (statement -> expression_statement .)
    EXCLAMATION     reduce using rule 104 (statement -> expression_statement .)
    TILDE           reduce using rule 104 (statement -> expression_statement .)
    TIMES           reduce using rule 104 (statement -> expression_statement .)
    AMPERSAND       reduce using rule 104 (statement -> expression_statement .)
    PLUS            reduce using rule 104 (statement -> expression_statement .)
    MINUS           reduce using rule 104 (statement -> expression_statement .)
    NEW             reduce using rule 104 (statement -> expression_statement .)
    DELETE          reduce using rule 104 (statement -> expression_statement .)
    THIS            reduce using rule 104 (statement -> expression_statement .)
    INUMBER         reduce using rule 104 (statement -> expression_statement .)
    DNUMBER         reduce using rule 104 (statement -> expression_statement .)
    LIT_CHAR        reduce using rule 104 (statement -> expression_statement .)
    LIT_STR         reduce using rule 104 (statement -> expression_statement .)
    TRUE            reduce using rule 104 (statement -> expression_statement .)
    FALSE           reduce using rule 104 (statement -> expression_statement .)
    OPERATOR        reduce using rule 104 (statement -> expression_statement .)
    RBRACE          reduce using rule 104 (statement -> expression_statement .)
    CLASS           reduce using rule 104 (statement -> expression_statement .)
    STRUCT          reduce using rule 104 (statement -> expression_statement .)
    ELSE            reduce using rule 104 (statement -> expression_statement .)


state 278

    (107) statement -> iteration_statement .

    IDENTIFIER      reduce using rule 107 (statement -> iteration_statement .)
    CASE            reduce using rule 107 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 107 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 107 (statement -> iteration_statement .)
    LBRACE          reduce using rule 107 (statement -> iteration_statement .)
    IF              reduce using rule 107 (statement -> iteration_statement .)
    SWITCH          reduce using rule 107 (statement -> iteration_statement .)
    WHILE           reduce using rule 107 (statement -> iteration_statement .)
    DO              reduce using rule 107 (statement -> iteration_statement .)
    FOR             reduce using rule 107 (statement -> iteration_statement .)
    BREAK           reduce using rule 107 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 107 (statement -> iteration_statement .)
    RETURN          reduce using rule 107 (statement -> iteration_statement .)
    PRINT           reduce using rule 107 (statement -> iteration_statement .)
    SCAN            reduce using rule 107 (statement -> iteration_statement .)
    MALLOC          reduce using rule 107 (statement -> iteration_statement .)
    AUTO            reduce using rule 107 (statement -> iteration_statement .)
    EXTERN          reduce using rule 107 (statement -> iteration_statement .)
    INLINE          reduce using rule 107 (statement -> iteration_statement .)
    BOOL            reduce using rule 107 (statement -> iteration_statement .)
    CHAR            reduce using rule 107 (statement -> iteration_statement .)
    INT             reduce using rule 107 (statement -> iteration_statement .)
    FLOAT           reduce using rule 107 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 107 (statement -> iteration_statement .)
    VOID            reduce using rule 107 (statement -> iteration_statement .)
    LPAREN          reduce using rule 107 (statement -> iteration_statement .)
    PLUS_PLUS       reduce using rule 107 (statement -> iteration_statement .)
    MINUS_MINUS     reduce using rule 107 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 107 (statement -> iteration_statement .)
    EXCLAMATION     reduce using rule 107 (statement -> iteration_statement .)
    TILDE           reduce using rule 107 (statement -> iteration_statement .)
    TIMES           reduce using rule 107 (statement -> iteration_statement .)
    AMPERSAND       reduce using rule 107 (statement -> iteration_statement .)
    PLUS            reduce using rule 107 (statement -> iteration_statement .)
    MINUS           reduce using rule 107 (statement -> iteration_statement .)
    NEW             reduce using rule 107 (statement -> iteration_statement .)
    DELETE          reduce using rule 107 (statement -> iteration_statement .)
    THIS            reduce using rule 107 (statement -> iteration_statement .)
    INUMBER         reduce using rule 107 (statement -> iteration_statement .)
    DNUMBER         reduce using rule 107 (statement -> iteration_statement .)
    LIT_CHAR        reduce using rule 107 (statement -> iteration_statement .)
    LIT_STR         reduce using rule 107 (statement -> iteration_statement .)
    TRUE            reduce using rule 107 (statement -> iteration_statement .)
    FALSE           reduce using rule 107 (statement -> iteration_statement .)
    OPERATOR        reduce using rule 107 (statement -> iteration_statement .)
    RBRACE          reduce using rule 107 (statement -> iteration_statement .)
    CLASS           reduce using rule 107 (statement -> iteration_statement .)
    STRUCT          reduce using rule 107 (statement -> iteration_statement .)
    ELSE            reduce using rule 107 (statement -> iteration_statement .)


state 279

    (145) simple_declaration -> decl_specifier_seq . init_declarator_list SEMICOLON
    (147) simple_declaration -> decl_specifier_seq . SEMICOLON
    (165) init_declarator_list -> . init_declarator
    (166) init_declarator_list -> . init_declarator_list COMMA mark_1 init_declarator
    (168) init_declarator -> . declarator initializer_opt
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    SEMICOLON       shift and go to state 28
    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    init_declarator                shift and go to state 34
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 44
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38
    init_declarator_list           shift and go to state 26

state 280

    (103) statement -> labeled_statement .

    IDENTIFIER      reduce using rule 103 (statement -> labeled_statement .)
    CASE            reduce using rule 103 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 103 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 103 (statement -> labeled_statement .)
    LBRACE          reduce using rule 103 (statement -> labeled_statement .)
    IF              reduce using rule 103 (statement -> labeled_statement .)
    SWITCH          reduce using rule 103 (statement -> labeled_statement .)
    WHILE           reduce using rule 103 (statement -> labeled_statement .)
    DO              reduce using rule 103 (statement -> labeled_statement .)
    FOR             reduce using rule 103 (statement -> labeled_statement .)
    BREAK           reduce using rule 103 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 103 (statement -> labeled_statement .)
    RETURN          reduce using rule 103 (statement -> labeled_statement .)
    PRINT           reduce using rule 103 (statement -> labeled_statement .)
    SCAN            reduce using rule 103 (statement -> labeled_statement .)
    MALLOC          reduce using rule 103 (statement -> labeled_statement .)
    AUTO            reduce using rule 103 (statement -> labeled_statement .)
    EXTERN          reduce using rule 103 (statement -> labeled_statement .)
    INLINE          reduce using rule 103 (statement -> labeled_statement .)
    BOOL            reduce using rule 103 (statement -> labeled_statement .)
    CHAR            reduce using rule 103 (statement -> labeled_statement .)
    INT             reduce using rule 103 (statement -> labeled_statement .)
    FLOAT           reduce using rule 103 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 103 (statement -> labeled_statement .)
    VOID            reduce using rule 103 (statement -> labeled_statement .)
    LPAREN          reduce using rule 103 (statement -> labeled_statement .)
    PLUS_PLUS       reduce using rule 103 (statement -> labeled_statement .)
    MINUS_MINUS     reduce using rule 103 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 103 (statement -> labeled_statement .)
    EXCLAMATION     reduce using rule 103 (statement -> labeled_statement .)
    TILDE           reduce using rule 103 (statement -> labeled_statement .)
    TIMES           reduce using rule 103 (statement -> labeled_statement .)
    AMPERSAND       reduce using rule 103 (statement -> labeled_statement .)
    PLUS            reduce using rule 103 (statement -> labeled_statement .)
    MINUS           reduce using rule 103 (statement -> labeled_statement .)
    NEW             reduce using rule 103 (statement -> labeled_statement .)
    DELETE          reduce using rule 103 (statement -> labeled_statement .)
    THIS            reduce using rule 103 (statement -> labeled_statement .)
    INUMBER         reduce using rule 103 (statement -> labeled_statement .)
    DNUMBER         reduce using rule 103 (statement -> labeled_statement .)
    LIT_CHAR        reduce using rule 103 (statement -> labeled_statement .)
    LIT_STR         reduce using rule 103 (statement -> labeled_statement .)
    TRUE            reduce using rule 103 (statement -> labeled_statement .)
    FALSE           reduce using rule 103 (statement -> labeled_statement .)
    OPERATOR        reduce using rule 103 (statement -> labeled_statement .)
    RBRACE          reduce using rule 103 (statement -> labeled_statement .)
    CLASS           reduce using rule 103 (statement -> labeled_statement .)
    STRUCT          reduce using rule 103 (statement -> labeled_statement .)
    ELSE            reduce using rule 103 (statement -> labeled_statement .)


state 281

    (141) declaration_statement -> block_declaration .

    IDENTIFIER      reduce using rule 141 (declaration_statement -> block_declaration .)
    CASE            reduce using rule 141 (declaration_statement -> block_declaration .)
    DEFAULT         reduce using rule 141 (declaration_statement -> block_declaration .)
    SEMICOLON       reduce using rule 141 (declaration_statement -> block_declaration .)
    LBRACE          reduce using rule 141 (declaration_statement -> block_declaration .)
    IF              reduce using rule 141 (declaration_statement -> block_declaration .)
    SWITCH          reduce using rule 141 (declaration_statement -> block_declaration .)
    WHILE           reduce using rule 141 (declaration_statement -> block_declaration .)
    DO              reduce using rule 141 (declaration_statement -> block_declaration .)
    FOR             reduce using rule 141 (declaration_statement -> block_declaration .)
    BREAK           reduce using rule 141 (declaration_statement -> block_declaration .)
    CONTINUE        reduce using rule 141 (declaration_statement -> block_declaration .)
    RETURN          reduce using rule 141 (declaration_statement -> block_declaration .)
    PRINT           reduce using rule 141 (declaration_statement -> block_declaration .)
    SCAN            reduce using rule 141 (declaration_statement -> block_declaration .)
    MALLOC          reduce using rule 141 (declaration_statement -> block_declaration .)
    AUTO            reduce using rule 141 (declaration_statement -> block_declaration .)
    EXTERN          reduce using rule 141 (declaration_statement -> block_declaration .)
    INLINE          reduce using rule 141 (declaration_statement -> block_declaration .)
    BOOL            reduce using rule 141 (declaration_statement -> block_declaration .)
    CHAR            reduce using rule 141 (declaration_statement -> block_declaration .)
    INT             reduce using rule 141 (declaration_statement -> block_declaration .)
    FLOAT           reduce using rule 141 (declaration_statement -> block_declaration .)
    DOUBLE          reduce using rule 141 (declaration_statement -> block_declaration .)
    VOID            reduce using rule 141 (declaration_statement -> block_declaration .)
    LPAREN          reduce using rule 141 (declaration_statement -> block_declaration .)
    PLUS_PLUS       reduce using rule 141 (declaration_statement -> block_declaration .)
    MINUS_MINUS     reduce using rule 141 (declaration_statement -> block_declaration .)
    SIZEOF          reduce using rule 141 (declaration_statement -> block_declaration .)
    EXCLAMATION     reduce using rule 141 (declaration_statement -> block_declaration .)
    TILDE           reduce using rule 141 (declaration_statement -> block_declaration .)
    TIMES           reduce using rule 141 (declaration_statement -> block_declaration .)
    AMPERSAND       reduce using rule 141 (declaration_statement -> block_declaration .)
    PLUS            reduce using rule 141 (declaration_statement -> block_declaration .)
    MINUS           reduce using rule 141 (declaration_statement -> block_declaration .)
    NEW             reduce using rule 141 (declaration_statement -> block_declaration .)
    DELETE          reduce using rule 141 (declaration_statement -> block_declaration .)
    THIS            reduce using rule 141 (declaration_statement -> block_declaration .)
    INUMBER         reduce using rule 141 (declaration_statement -> block_declaration .)
    DNUMBER         reduce using rule 141 (declaration_statement -> block_declaration .)
    LIT_CHAR        reduce using rule 141 (declaration_statement -> block_declaration .)
    LIT_STR         reduce using rule 141 (declaration_statement -> block_declaration .)
    TRUE            reduce using rule 141 (declaration_statement -> block_declaration .)
    FALSE           reduce using rule 141 (declaration_statement -> block_declaration .)
    OPERATOR        reduce using rule 141 (declaration_statement -> block_declaration .)
    RBRACE          reduce using rule 141 (declaration_statement -> block_declaration .)
    CLASS           reduce using rule 141 (declaration_statement -> block_declaration .)
    STRUCT          reduce using rule 141 (declaration_statement -> block_declaration .)
    ELSE            reduce using rule 141 (declaration_statement -> block_declaration .)


state 282

    (139) jump_statement -> RETURN . expression SEMICOLON
    (140) jump_statement -> RETURN . SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    SEMICOLON       shift and go to state 350
    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 351

state 283

    (110) statement -> print_statement .

    IDENTIFIER      reduce using rule 110 (statement -> print_statement .)
    CASE            reduce using rule 110 (statement -> print_statement .)
    DEFAULT         reduce using rule 110 (statement -> print_statement .)
    SEMICOLON       reduce using rule 110 (statement -> print_statement .)
    LBRACE          reduce using rule 110 (statement -> print_statement .)
    IF              reduce using rule 110 (statement -> print_statement .)
    SWITCH          reduce using rule 110 (statement -> print_statement .)
    WHILE           reduce using rule 110 (statement -> print_statement .)
    DO              reduce using rule 110 (statement -> print_statement .)
    FOR             reduce using rule 110 (statement -> print_statement .)
    BREAK           reduce using rule 110 (statement -> print_statement .)
    CONTINUE        reduce using rule 110 (statement -> print_statement .)
    RETURN          reduce using rule 110 (statement -> print_statement .)
    PRINT           reduce using rule 110 (statement -> print_statement .)
    SCAN            reduce using rule 110 (statement -> print_statement .)
    MALLOC          reduce using rule 110 (statement -> print_statement .)
    AUTO            reduce using rule 110 (statement -> print_statement .)
    EXTERN          reduce using rule 110 (statement -> print_statement .)
    INLINE          reduce using rule 110 (statement -> print_statement .)
    BOOL            reduce using rule 110 (statement -> print_statement .)
    CHAR            reduce using rule 110 (statement -> print_statement .)
    INT             reduce using rule 110 (statement -> print_statement .)
    FLOAT           reduce using rule 110 (statement -> print_statement .)
    DOUBLE          reduce using rule 110 (statement -> print_statement .)
    VOID            reduce using rule 110 (statement -> print_statement .)
    LPAREN          reduce using rule 110 (statement -> print_statement .)
    PLUS_PLUS       reduce using rule 110 (statement -> print_statement .)
    MINUS_MINUS     reduce using rule 110 (statement -> print_statement .)
    SIZEOF          reduce using rule 110 (statement -> print_statement .)
    EXCLAMATION     reduce using rule 110 (statement -> print_statement .)
    TILDE           reduce using rule 110 (statement -> print_statement .)
    TIMES           reduce using rule 110 (statement -> print_statement .)
    AMPERSAND       reduce using rule 110 (statement -> print_statement .)
    PLUS            reduce using rule 110 (statement -> print_statement .)
    MINUS           reduce using rule 110 (statement -> print_statement .)
    NEW             reduce using rule 110 (statement -> print_statement .)
    DELETE          reduce using rule 110 (statement -> print_statement .)
    THIS            reduce using rule 110 (statement -> print_statement .)
    INUMBER         reduce using rule 110 (statement -> print_statement .)
    DNUMBER         reduce using rule 110 (statement -> print_statement .)
    LIT_CHAR        reduce using rule 110 (statement -> print_statement .)
    LIT_STR         reduce using rule 110 (statement -> print_statement .)
    TRUE            reduce using rule 110 (statement -> print_statement .)
    FALSE           reduce using rule 110 (statement -> print_statement .)
    OPERATOR        reduce using rule 110 (statement -> print_statement .)
    RBRACE          reduce using rule 110 (statement -> print_statement .)
    CLASS           reduce using rule 110 (statement -> print_statement .)
    STRUCT          reduce using rule 110 (statement -> print_statement .)
    ELSE            reduce using rule 110 (statement -> print_statement .)


state 284

    (133) print_statement -> PRINT . LPAREN postfix_expression RPAREN SEMICOLON

    LPAREN          shift and go to state 352


state 285

    (105) statement -> compound_statement .

    IDENTIFIER      reduce using rule 105 (statement -> compound_statement .)
    CASE            reduce using rule 105 (statement -> compound_statement .)
    DEFAULT         reduce using rule 105 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 105 (statement -> compound_statement .)
    LBRACE          reduce using rule 105 (statement -> compound_statement .)
    IF              reduce using rule 105 (statement -> compound_statement .)
    SWITCH          reduce using rule 105 (statement -> compound_statement .)
    WHILE           reduce using rule 105 (statement -> compound_statement .)
    DO              reduce using rule 105 (statement -> compound_statement .)
    FOR             reduce using rule 105 (statement -> compound_statement .)
    BREAK           reduce using rule 105 (statement -> compound_statement .)
    CONTINUE        reduce using rule 105 (statement -> compound_statement .)
    RETURN          reduce using rule 105 (statement -> compound_statement .)
    PRINT           reduce using rule 105 (statement -> compound_statement .)
    SCAN            reduce using rule 105 (statement -> compound_statement .)
    MALLOC          reduce using rule 105 (statement -> compound_statement .)
    AUTO            reduce using rule 105 (statement -> compound_statement .)
    EXTERN          reduce using rule 105 (statement -> compound_statement .)
    INLINE          reduce using rule 105 (statement -> compound_statement .)
    BOOL            reduce using rule 105 (statement -> compound_statement .)
    CHAR            reduce using rule 105 (statement -> compound_statement .)
    INT             reduce using rule 105 (statement -> compound_statement .)
    FLOAT           reduce using rule 105 (statement -> compound_statement .)
    DOUBLE          reduce using rule 105 (statement -> compound_statement .)
    VOID            reduce using rule 105 (statement -> compound_statement .)
    LPAREN          reduce using rule 105 (statement -> compound_statement .)
    PLUS_PLUS       reduce using rule 105 (statement -> compound_statement .)
    MINUS_MINUS     reduce using rule 105 (statement -> compound_statement .)
    SIZEOF          reduce using rule 105 (statement -> compound_statement .)
    EXCLAMATION     reduce using rule 105 (statement -> compound_statement .)
    TILDE           reduce using rule 105 (statement -> compound_statement .)
    TIMES           reduce using rule 105 (statement -> compound_statement .)
    AMPERSAND       reduce using rule 105 (statement -> compound_statement .)
    PLUS            reduce using rule 105 (statement -> compound_statement .)
    MINUS           reduce using rule 105 (statement -> compound_statement .)
    NEW             reduce using rule 105 (statement -> compound_statement .)
    DELETE          reduce using rule 105 (statement -> compound_statement .)
    THIS            reduce using rule 105 (statement -> compound_statement .)
    INUMBER         reduce using rule 105 (statement -> compound_statement .)
    DNUMBER         reduce using rule 105 (statement -> compound_statement .)
    LIT_CHAR        reduce using rule 105 (statement -> compound_statement .)
    LIT_STR         reduce using rule 105 (statement -> compound_statement .)
    TRUE            reduce using rule 105 (statement -> compound_statement .)
    FALSE           reduce using rule 105 (statement -> compound_statement .)
    OPERATOR        reduce using rule 105 (statement -> compound_statement .)
    RBRACE          reduce using rule 105 (statement -> compound_statement .)
    CLASS           reduce using rule 105 (statement -> compound_statement .)
    STRUCT          reduce using rule 105 (statement -> compound_statement .)
    ELSE            reduce using rule 105 (statement -> compound_statement .)


state 286

    (128) iteration_statement -> FOR . LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> FOR . LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON RPAREN statement

    LPAREN          shift and go to state 353


state 287

    (138) jump_statement -> CONTINUE .

    IDENTIFIER      reduce using rule 138 (jump_statement -> CONTINUE .)
    CASE            reduce using rule 138 (jump_statement -> CONTINUE .)
    DEFAULT         reduce using rule 138 (jump_statement -> CONTINUE .)
    SEMICOLON       reduce using rule 138 (jump_statement -> CONTINUE .)
    LBRACE          reduce using rule 138 (jump_statement -> CONTINUE .)
    IF              reduce using rule 138 (jump_statement -> CONTINUE .)
    SWITCH          reduce using rule 138 (jump_statement -> CONTINUE .)
    WHILE           reduce using rule 138 (jump_statement -> CONTINUE .)
    DO              reduce using rule 138 (jump_statement -> CONTINUE .)
    FOR             reduce using rule 138 (jump_statement -> CONTINUE .)
    BREAK           reduce using rule 138 (jump_statement -> CONTINUE .)
    CONTINUE        reduce using rule 138 (jump_statement -> CONTINUE .)
    RETURN          reduce using rule 138 (jump_statement -> CONTINUE .)
    PRINT           reduce using rule 138 (jump_statement -> CONTINUE .)
    SCAN            reduce using rule 138 (jump_statement -> CONTINUE .)
    MALLOC          reduce using rule 138 (jump_statement -> CONTINUE .)
    AUTO            reduce using rule 138 (jump_statement -> CONTINUE .)
    EXTERN          reduce using rule 138 (jump_statement -> CONTINUE .)
    INLINE          reduce using rule 138 (jump_statement -> CONTINUE .)
    BOOL            reduce using rule 138 (jump_statement -> CONTINUE .)
    CHAR            reduce using rule 138 (jump_statement -> CONTINUE .)
    INT             reduce using rule 138 (jump_statement -> CONTINUE .)
    FLOAT           reduce using rule 138 (jump_statement -> CONTINUE .)
    DOUBLE          reduce using rule 138 (jump_statement -> CONTINUE .)
    VOID            reduce using rule 138 (jump_statement -> CONTINUE .)
    LPAREN          reduce using rule 138 (jump_statement -> CONTINUE .)
    PLUS_PLUS       reduce using rule 138 (jump_statement -> CONTINUE .)
    MINUS_MINUS     reduce using rule 138 (jump_statement -> CONTINUE .)
    SIZEOF          reduce using rule 138 (jump_statement -> CONTINUE .)
    EXCLAMATION     reduce using rule 138 (jump_statement -> CONTINUE .)
    TILDE           reduce using rule 138 (jump_statement -> CONTINUE .)
    TIMES           reduce using rule 138 (jump_statement -> CONTINUE .)
    AMPERSAND       reduce using rule 138 (jump_statement -> CONTINUE .)
    PLUS            reduce using rule 138 (jump_statement -> CONTINUE .)
    MINUS           reduce using rule 138 (jump_statement -> CONTINUE .)
    NEW             reduce using rule 138 (jump_statement -> CONTINUE .)
    DELETE          reduce using rule 138 (jump_statement -> CONTINUE .)
    THIS            reduce using rule 138 (jump_statement -> CONTINUE .)
    INUMBER         reduce using rule 138 (jump_statement -> CONTINUE .)
    DNUMBER         reduce using rule 138 (jump_statement -> CONTINUE .)
    LIT_CHAR        reduce using rule 138 (jump_statement -> CONTINUE .)
    LIT_STR         reduce using rule 138 (jump_statement -> CONTINUE .)
    TRUE            reduce using rule 138 (jump_statement -> CONTINUE .)
    FALSE           reduce using rule 138 (jump_statement -> CONTINUE .)
    OPERATOR        reduce using rule 138 (jump_statement -> CONTINUE .)
    RBRACE          reduce using rule 138 (jump_statement -> CONTINUE .)
    CLASS           reduce using rule 138 (jump_statement -> CONTINUE .)
    STRUCT          reduce using rule 138 (jump_statement -> CONTINUE .)
    ELSE            reduce using rule 138 (jump_statement -> CONTINUE .)


state 288

    (111) statement -> scan_statement .

    IDENTIFIER      reduce using rule 111 (statement -> scan_statement .)
    CASE            reduce using rule 111 (statement -> scan_statement .)
    DEFAULT         reduce using rule 111 (statement -> scan_statement .)
    SEMICOLON       reduce using rule 111 (statement -> scan_statement .)
    LBRACE          reduce using rule 111 (statement -> scan_statement .)
    IF              reduce using rule 111 (statement -> scan_statement .)
    SWITCH          reduce using rule 111 (statement -> scan_statement .)
    WHILE           reduce using rule 111 (statement -> scan_statement .)
    DO              reduce using rule 111 (statement -> scan_statement .)
    FOR             reduce using rule 111 (statement -> scan_statement .)
    BREAK           reduce using rule 111 (statement -> scan_statement .)
    CONTINUE        reduce using rule 111 (statement -> scan_statement .)
    RETURN          reduce using rule 111 (statement -> scan_statement .)
    PRINT           reduce using rule 111 (statement -> scan_statement .)
    SCAN            reduce using rule 111 (statement -> scan_statement .)
    MALLOC          reduce using rule 111 (statement -> scan_statement .)
    AUTO            reduce using rule 111 (statement -> scan_statement .)
    EXTERN          reduce using rule 111 (statement -> scan_statement .)
    INLINE          reduce using rule 111 (statement -> scan_statement .)
    BOOL            reduce using rule 111 (statement -> scan_statement .)
    CHAR            reduce using rule 111 (statement -> scan_statement .)
    INT             reduce using rule 111 (statement -> scan_statement .)
    FLOAT           reduce using rule 111 (statement -> scan_statement .)
    DOUBLE          reduce using rule 111 (statement -> scan_statement .)
    VOID            reduce using rule 111 (statement -> scan_statement .)
    LPAREN          reduce using rule 111 (statement -> scan_statement .)
    PLUS_PLUS       reduce using rule 111 (statement -> scan_statement .)
    MINUS_MINUS     reduce using rule 111 (statement -> scan_statement .)
    SIZEOF          reduce using rule 111 (statement -> scan_statement .)
    EXCLAMATION     reduce using rule 111 (statement -> scan_statement .)
    TILDE           reduce using rule 111 (statement -> scan_statement .)
    TIMES           reduce using rule 111 (statement -> scan_statement .)
    AMPERSAND       reduce using rule 111 (statement -> scan_statement .)
    PLUS            reduce using rule 111 (statement -> scan_statement .)
    MINUS           reduce using rule 111 (statement -> scan_statement .)
    NEW             reduce using rule 111 (statement -> scan_statement .)
    DELETE          reduce using rule 111 (statement -> scan_statement .)
    THIS            reduce using rule 111 (statement -> scan_statement .)
    INUMBER         reduce using rule 111 (statement -> scan_statement .)
    DNUMBER         reduce using rule 111 (statement -> scan_statement .)
    LIT_CHAR        reduce using rule 111 (statement -> scan_statement .)
    LIT_STR         reduce using rule 111 (statement -> scan_statement .)
    TRUE            reduce using rule 111 (statement -> scan_statement .)
    FALSE           reduce using rule 111 (statement -> scan_statement .)
    OPERATOR        reduce using rule 111 (statement -> scan_statement .)
    RBRACE          reduce using rule 111 (statement -> scan_statement .)
    CLASS           reduce using rule 111 (statement -> scan_statement .)
    STRUCT          reduce using rule 111 (statement -> scan_statement .)
    ELSE            reduce using rule 111 (statement -> scan_statement .)


state 289

    (116) expression_statement -> expression . SEMICOLON
    (99) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 354
    COMMA           shift and go to state 257


state 290

    (114) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 355


state 291

    (126) iteration_statement -> WHILE . LPAREN condition RPAREN statement

    LPAREN          shift and go to state 356


state 292

    (113) labeled_statement -> CASE . constant_expression COLON statement
    (100) constant_expression -> . conditional_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 117
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    constant_expression            shift and go to state 357
    conditional_expression         shift and go to state 138
    unqualified_id                 shift and go to state 42

state 293

    (115) expression_statement -> SEMICOLON .

    IDENTIFIER      reduce using rule 115 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 115 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 115 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 115 (expression_statement -> SEMICOLON .)
    LBRACE          reduce using rule 115 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 115 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 115 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 115 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 115 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 115 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 115 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 115 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 115 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 115 (expression_statement -> SEMICOLON .)
    SCAN            reduce using rule 115 (expression_statement -> SEMICOLON .)
    MALLOC          reduce using rule 115 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 115 (expression_statement -> SEMICOLON .)
    EXTERN          reduce using rule 115 (expression_statement -> SEMICOLON .)
    INLINE          reduce using rule 115 (expression_statement -> SEMICOLON .)
    BOOL            reduce using rule 115 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 115 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 115 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 115 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 115 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 115 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 115 (expression_statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 115 (expression_statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 115 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 115 (expression_statement -> SEMICOLON .)
    EXCLAMATION     reduce using rule 115 (expression_statement -> SEMICOLON .)
    TILDE           reduce using rule 115 (expression_statement -> SEMICOLON .)
    TIMES           reduce using rule 115 (expression_statement -> SEMICOLON .)
    AMPERSAND       reduce using rule 115 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 115 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 115 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 115 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 115 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 115 (expression_statement -> SEMICOLON .)
    INUMBER         reduce using rule 115 (expression_statement -> SEMICOLON .)
    DNUMBER         reduce using rule 115 (expression_statement -> SEMICOLON .)
    LIT_CHAR        reduce using rule 115 (expression_statement -> SEMICOLON .)
    LIT_STR         reduce using rule 115 (expression_statement -> SEMICOLON .)
    TRUE            reduce using rule 115 (expression_statement -> SEMICOLON .)
    FALSE           reduce using rule 115 (expression_statement -> SEMICOLON .)
    OPERATOR        reduce using rule 115 (expression_statement -> SEMICOLON .)
    RBRACE          reduce using rule 115 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 115 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 115 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 115 (expression_statement -> SEMICOLON .)


state 294

    (118) compound_statement -> LBRACE new_scope statement_seq . finish_scope RBRACE
    (120) statement_seq -> statement_seq . statement
    (4) finish_scope -> .
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RBRACE          reduce using rule 4 (finish_scope -> .)
    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    finish_scope                   shift and go to state 358
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 359
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 295

    (123) selection_statement -> SWITCH . LPAREN condition RPAREN statement

    LPAREN          shift and go to state 360


state 296

    (119) statement_seq -> statement .

    IDENTIFIER      reduce using rule 119 (statement_seq -> statement .)
    CASE            reduce using rule 119 (statement_seq -> statement .)
    DEFAULT         reduce using rule 119 (statement_seq -> statement .)
    SEMICOLON       reduce using rule 119 (statement_seq -> statement .)
    LBRACE          reduce using rule 119 (statement_seq -> statement .)
    IF              reduce using rule 119 (statement_seq -> statement .)
    SWITCH          reduce using rule 119 (statement_seq -> statement .)
    WHILE           reduce using rule 119 (statement_seq -> statement .)
    DO              reduce using rule 119 (statement_seq -> statement .)
    FOR             reduce using rule 119 (statement_seq -> statement .)
    BREAK           reduce using rule 119 (statement_seq -> statement .)
    CONTINUE        reduce using rule 119 (statement_seq -> statement .)
    RETURN          reduce using rule 119 (statement_seq -> statement .)
    PRINT           reduce using rule 119 (statement_seq -> statement .)
    SCAN            reduce using rule 119 (statement_seq -> statement .)
    MALLOC          reduce using rule 119 (statement_seq -> statement .)
    AUTO            reduce using rule 119 (statement_seq -> statement .)
    EXTERN          reduce using rule 119 (statement_seq -> statement .)
    INLINE          reduce using rule 119 (statement_seq -> statement .)
    BOOL            reduce using rule 119 (statement_seq -> statement .)
    CHAR            reduce using rule 119 (statement_seq -> statement .)
    INT             reduce using rule 119 (statement_seq -> statement .)
    FLOAT           reduce using rule 119 (statement_seq -> statement .)
    DOUBLE          reduce using rule 119 (statement_seq -> statement .)
    VOID            reduce using rule 119 (statement_seq -> statement .)
    LPAREN          reduce using rule 119 (statement_seq -> statement .)
    PLUS_PLUS       reduce using rule 119 (statement_seq -> statement .)
    MINUS_MINUS     reduce using rule 119 (statement_seq -> statement .)
    SIZEOF          reduce using rule 119 (statement_seq -> statement .)
    EXCLAMATION     reduce using rule 119 (statement_seq -> statement .)
    TILDE           reduce using rule 119 (statement_seq -> statement .)
    TIMES           reduce using rule 119 (statement_seq -> statement .)
    AMPERSAND       reduce using rule 119 (statement_seq -> statement .)
    PLUS            reduce using rule 119 (statement_seq -> statement .)
    MINUS           reduce using rule 119 (statement_seq -> statement .)
    NEW             reduce using rule 119 (statement_seq -> statement .)
    DELETE          reduce using rule 119 (statement_seq -> statement .)
    THIS            reduce using rule 119 (statement_seq -> statement .)
    INUMBER         reduce using rule 119 (statement_seq -> statement .)
    DNUMBER         reduce using rule 119 (statement_seq -> statement .)
    LIT_CHAR        reduce using rule 119 (statement_seq -> statement .)
    LIT_STR         reduce using rule 119 (statement_seq -> statement .)
    TRUE            reduce using rule 119 (statement_seq -> statement .)
    FALSE           reduce using rule 119 (statement_seq -> statement .)
    OPERATOR        reduce using rule 119 (statement_seq -> statement .)
    RBRACE          reduce using rule 119 (statement_seq -> statement .)
    CLASS           reduce using rule 119 (statement_seq -> statement .)
    STRUCT          reduce using rule 119 (statement_seq -> statement .)


state 297

    (112) labeled_statement -> IDENTIFIER . COLON statement
    (146) simple_declaration -> IDENTIFIER . init_declarator_list SEMICOLON
    (22) unqualified_id -> IDENTIFIER .
    (165) init_declarator_list -> . init_declarator
    (166) init_declarator_list -> . init_declarator_list COMMA mark_1 init_declarator
    (168) init_declarator -> . declarator initializer_opt
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    COLON           shift and go to state 361
    LBRACKET        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LPAREN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOT             reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    TIMES           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DIV             reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MODULO          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    PLUS            reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MINUS           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LESS            reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    GREATER         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LESS_EQ         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    IS_EQ           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    NOT_EQ          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    QUESTION        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    ASSIGN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_DIV          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    SEMICOLON       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    COMMA           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

  ! LPAREN          [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 35 ]

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    init_declarator                shift and go to state 34
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 44
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38
    init_declarator_list           shift and go to state 43

state 298

    (108) statement -> jump_statement .

    IDENTIFIER      reduce using rule 108 (statement -> jump_statement .)
    CASE            reduce using rule 108 (statement -> jump_statement .)
    DEFAULT         reduce using rule 108 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 108 (statement -> jump_statement .)
    LBRACE          reduce using rule 108 (statement -> jump_statement .)
    IF              reduce using rule 108 (statement -> jump_statement .)
    SWITCH          reduce using rule 108 (statement -> jump_statement .)
    WHILE           reduce using rule 108 (statement -> jump_statement .)
    DO              reduce using rule 108 (statement -> jump_statement .)
    FOR             reduce using rule 108 (statement -> jump_statement .)
    BREAK           reduce using rule 108 (statement -> jump_statement .)
    CONTINUE        reduce using rule 108 (statement -> jump_statement .)
    RETURN          reduce using rule 108 (statement -> jump_statement .)
    PRINT           reduce using rule 108 (statement -> jump_statement .)
    SCAN            reduce using rule 108 (statement -> jump_statement .)
    MALLOC          reduce using rule 108 (statement -> jump_statement .)
    AUTO            reduce using rule 108 (statement -> jump_statement .)
    EXTERN          reduce using rule 108 (statement -> jump_statement .)
    INLINE          reduce using rule 108 (statement -> jump_statement .)
    BOOL            reduce using rule 108 (statement -> jump_statement .)
    CHAR            reduce using rule 108 (statement -> jump_statement .)
    INT             reduce using rule 108 (statement -> jump_statement .)
    FLOAT           reduce using rule 108 (statement -> jump_statement .)
    DOUBLE          reduce using rule 108 (statement -> jump_statement .)
    VOID            reduce using rule 108 (statement -> jump_statement .)
    LPAREN          reduce using rule 108 (statement -> jump_statement .)
    PLUS_PLUS       reduce using rule 108 (statement -> jump_statement .)
    MINUS_MINUS     reduce using rule 108 (statement -> jump_statement .)
    SIZEOF          reduce using rule 108 (statement -> jump_statement .)
    EXCLAMATION     reduce using rule 108 (statement -> jump_statement .)
    TILDE           reduce using rule 108 (statement -> jump_statement .)
    TIMES           reduce using rule 108 (statement -> jump_statement .)
    AMPERSAND       reduce using rule 108 (statement -> jump_statement .)
    PLUS            reduce using rule 108 (statement -> jump_statement .)
    MINUS           reduce using rule 108 (statement -> jump_statement .)
    NEW             reduce using rule 108 (statement -> jump_statement .)
    DELETE          reduce using rule 108 (statement -> jump_statement .)
    THIS            reduce using rule 108 (statement -> jump_statement .)
    INUMBER         reduce using rule 108 (statement -> jump_statement .)
    DNUMBER         reduce using rule 108 (statement -> jump_statement .)
    LIT_CHAR        reduce using rule 108 (statement -> jump_statement .)
    LIT_STR         reduce using rule 108 (statement -> jump_statement .)
    TRUE            reduce using rule 108 (statement -> jump_statement .)
    FALSE           reduce using rule 108 (statement -> jump_statement .)
    OPERATOR        reduce using rule 108 (statement -> jump_statement .)
    RBRACE          reduce using rule 108 (statement -> jump_statement .)
    CLASS           reduce using rule 108 (statement -> jump_statement .)
    STRUCT          reduce using rule 108 (statement -> jump_statement .)
    ELSE            reduce using rule 108 (statement -> jump_statement .)


state 299

    (137) jump_statement -> BREAK .

    IDENTIFIER      reduce using rule 137 (jump_statement -> BREAK .)
    CASE            reduce using rule 137 (jump_statement -> BREAK .)
    DEFAULT         reduce using rule 137 (jump_statement -> BREAK .)
    SEMICOLON       reduce using rule 137 (jump_statement -> BREAK .)
    LBRACE          reduce using rule 137 (jump_statement -> BREAK .)
    IF              reduce using rule 137 (jump_statement -> BREAK .)
    SWITCH          reduce using rule 137 (jump_statement -> BREAK .)
    WHILE           reduce using rule 137 (jump_statement -> BREAK .)
    DO              reduce using rule 137 (jump_statement -> BREAK .)
    FOR             reduce using rule 137 (jump_statement -> BREAK .)
    BREAK           reduce using rule 137 (jump_statement -> BREAK .)
    CONTINUE        reduce using rule 137 (jump_statement -> BREAK .)
    RETURN          reduce using rule 137 (jump_statement -> BREAK .)
    PRINT           reduce using rule 137 (jump_statement -> BREAK .)
    SCAN            reduce using rule 137 (jump_statement -> BREAK .)
    MALLOC          reduce using rule 137 (jump_statement -> BREAK .)
    AUTO            reduce using rule 137 (jump_statement -> BREAK .)
    EXTERN          reduce using rule 137 (jump_statement -> BREAK .)
    INLINE          reduce using rule 137 (jump_statement -> BREAK .)
    BOOL            reduce using rule 137 (jump_statement -> BREAK .)
    CHAR            reduce using rule 137 (jump_statement -> BREAK .)
    INT             reduce using rule 137 (jump_statement -> BREAK .)
    FLOAT           reduce using rule 137 (jump_statement -> BREAK .)
    DOUBLE          reduce using rule 137 (jump_statement -> BREAK .)
    VOID            reduce using rule 137 (jump_statement -> BREAK .)
    LPAREN          reduce using rule 137 (jump_statement -> BREAK .)
    PLUS_PLUS       reduce using rule 137 (jump_statement -> BREAK .)
    MINUS_MINUS     reduce using rule 137 (jump_statement -> BREAK .)
    SIZEOF          reduce using rule 137 (jump_statement -> BREAK .)
    EXCLAMATION     reduce using rule 137 (jump_statement -> BREAK .)
    TILDE           reduce using rule 137 (jump_statement -> BREAK .)
    TIMES           reduce using rule 137 (jump_statement -> BREAK .)
    AMPERSAND       reduce using rule 137 (jump_statement -> BREAK .)
    PLUS            reduce using rule 137 (jump_statement -> BREAK .)
    MINUS           reduce using rule 137 (jump_statement -> BREAK .)
    NEW             reduce using rule 137 (jump_statement -> BREAK .)
    DELETE          reduce using rule 137 (jump_statement -> BREAK .)
    THIS            reduce using rule 137 (jump_statement -> BREAK .)
    INUMBER         reduce using rule 137 (jump_statement -> BREAK .)
    DNUMBER         reduce using rule 137 (jump_statement -> BREAK .)
    LIT_CHAR        reduce using rule 137 (jump_statement -> BREAK .)
    LIT_STR         reduce using rule 137 (jump_statement -> BREAK .)
    TRUE            reduce using rule 137 (jump_statement -> BREAK .)
    FALSE           reduce using rule 137 (jump_statement -> BREAK .)
    OPERATOR        reduce using rule 137 (jump_statement -> BREAK .)
    RBRACE          reduce using rule 137 (jump_statement -> BREAK .)
    CLASS           reduce using rule 137 (jump_statement -> BREAK .)
    STRUCT          reduce using rule 137 (jump_statement -> BREAK .)
    ELSE            reduce using rule 137 (jump_statement -> BREAK .)


state 300

    (127) iteration_statement -> DO . statement WHILE LPAREN condition RPAREN SEMICOLON
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 362
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 301

    (132) scan_statement -> SCAN . LPAREN IDENTIFIER RPAREN SEMICOLON

    LPAREN          shift and go to state 363


state 302

    (106) statement -> selection_statement .

    IDENTIFIER      reduce using rule 106 (statement -> selection_statement .)
    CASE            reduce using rule 106 (statement -> selection_statement .)
    DEFAULT         reduce using rule 106 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 106 (statement -> selection_statement .)
    LBRACE          reduce using rule 106 (statement -> selection_statement .)
    IF              reduce using rule 106 (statement -> selection_statement .)
    SWITCH          reduce using rule 106 (statement -> selection_statement .)
    WHILE           reduce using rule 106 (statement -> selection_statement .)
    DO              reduce using rule 106 (statement -> selection_statement .)
    FOR             reduce using rule 106 (statement -> selection_statement .)
    BREAK           reduce using rule 106 (statement -> selection_statement .)
    CONTINUE        reduce using rule 106 (statement -> selection_statement .)
    RETURN          reduce using rule 106 (statement -> selection_statement .)
    PRINT           reduce using rule 106 (statement -> selection_statement .)
    SCAN            reduce using rule 106 (statement -> selection_statement .)
    MALLOC          reduce using rule 106 (statement -> selection_statement .)
    AUTO            reduce using rule 106 (statement -> selection_statement .)
    EXTERN          reduce using rule 106 (statement -> selection_statement .)
    INLINE          reduce using rule 106 (statement -> selection_statement .)
    BOOL            reduce using rule 106 (statement -> selection_statement .)
    CHAR            reduce using rule 106 (statement -> selection_statement .)
    INT             reduce using rule 106 (statement -> selection_statement .)
    FLOAT           reduce using rule 106 (statement -> selection_statement .)
    DOUBLE          reduce using rule 106 (statement -> selection_statement .)
    VOID            reduce using rule 106 (statement -> selection_statement .)
    LPAREN          reduce using rule 106 (statement -> selection_statement .)
    PLUS_PLUS       reduce using rule 106 (statement -> selection_statement .)
    MINUS_MINUS     reduce using rule 106 (statement -> selection_statement .)
    SIZEOF          reduce using rule 106 (statement -> selection_statement .)
    EXCLAMATION     reduce using rule 106 (statement -> selection_statement .)
    TILDE           reduce using rule 106 (statement -> selection_statement .)
    TIMES           reduce using rule 106 (statement -> selection_statement .)
    AMPERSAND       reduce using rule 106 (statement -> selection_statement .)
    PLUS            reduce using rule 106 (statement -> selection_statement .)
    MINUS           reduce using rule 106 (statement -> selection_statement .)
    NEW             reduce using rule 106 (statement -> selection_statement .)
    DELETE          reduce using rule 106 (statement -> selection_statement .)
    THIS            reduce using rule 106 (statement -> selection_statement .)
    INUMBER         reduce using rule 106 (statement -> selection_statement .)
    DNUMBER         reduce using rule 106 (statement -> selection_statement .)
    LIT_CHAR        reduce using rule 106 (statement -> selection_statement .)
    LIT_STR         reduce using rule 106 (statement -> selection_statement .)
    TRUE            reduce using rule 106 (statement -> selection_statement .)
    FALSE           reduce using rule 106 (statement -> selection_statement .)
    OPERATOR        reduce using rule 106 (statement -> selection_statement .)
    RBRACE          reduce using rule 106 (statement -> selection_statement .)
    CLASS           reduce using rule 106 (statement -> selection_statement .)
    STRUCT          reduce using rule 106 (statement -> selection_statement .)
    ELSE            reduce using rule 106 (statement -> selection_statement .)


state 303

    (109) statement -> declaration_statement .

    IDENTIFIER      reduce using rule 109 (statement -> declaration_statement .)
    CASE            reduce using rule 109 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 109 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 109 (statement -> declaration_statement .)
    LBRACE          reduce using rule 109 (statement -> declaration_statement .)
    IF              reduce using rule 109 (statement -> declaration_statement .)
    SWITCH          reduce using rule 109 (statement -> declaration_statement .)
    WHILE           reduce using rule 109 (statement -> declaration_statement .)
    DO              reduce using rule 109 (statement -> declaration_statement .)
    FOR             reduce using rule 109 (statement -> declaration_statement .)
    BREAK           reduce using rule 109 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 109 (statement -> declaration_statement .)
    RETURN          reduce using rule 109 (statement -> declaration_statement .)
    PRINT           reduce using rule 109 (statement -> declaration_statement .)
    SCAN            reduce using rule 109 (statement -> declaration_statement .)
    MALLOC          reduce using rule 109 (statement -> declaration_statement .)
    AUTO            reduce using rule 109 (statement -> declaration_statement .)
    EXTERN          reduce using rule 109 (statement -> declaration_statement .)
    INLINE          reduce using rule 109 (statement -> declaration_statement .)
    BOOL            reduce using rule 109 (statement -> declaration_statement .)
    CHAR            reduce using rule 109 (statement -> declaration_statement .)
    INT             reduce using rule 109 (statement -> declaration_statement .)
    FLOAT           reduce using rule 109 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 109 (statement -> declaration_statement .)
    VOID            reduce using rule 109 (statement -> declaration_statement .)
    LPAREN          reduce using rule 109 (statement -> declaration_statement .)
    PLUS_PLUS       reduce using rule 109 (statement -> declaration_statement .)
    MINUS_MINUS     reduce using rule 109 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 109 (statement -> declaration_statement .)
    EXCLAMATION     reduce using rule 109 (statement -> declaration_statement .)
    TILDE           reduce using rule 109 (statement -> declaration_statement .)
    TIMES           reduce using rule 109 (statement -> declaration_statement .)
    AMPERSAND       reduce using rule 109 (statement -> declaration_statement .)
    PLUS            reduce using rule 109 (statement -> declaration_statement .)
    MINUS           reduce using rule 109 (statement -> declaration_statement .)
    NEW             reduce using rule 109 (statement -> declaration_statement .)
    DELETE          reduce using rule 109 (statement -> declaration_statement .)
    THIS            reduce using rule 109 (statement -> declaration_statement .)
    INUMBER         reduce using rule 109 (statement -> declaration_statement .)
    DNUMBER         reduce using rule 109 (statement -> declaration_statement .)
    LIT_CHAR        reduce using rule 109 (statement -> declaration_statement .)
    LIT_STR         reduce using rule 109 (statement -> declaration_statement .)
    TRUE            reduce using rule 109 (statement -> declaration_statement .)
    FALSE           reduce using rule 109 (statement -> declaration_statement .)
    OPERATOR        reduce using rule 109 (statement -> declaration_statement .)
    RBRACE          reduce using rule 109 (statement -> declaration_statement .)
    CLASS           reduce using rule 109 (statement -> declaration_statement .)
    STRUCT          reduce using rule 109 (statement -> declaration_statement .)
    ELSE            reduce using rule 109 (statement -> declaration_statement .)


state 304

    (121) selection_statement -> IF . LPAREN condition RPAREN statement
    (122) selection_statement -> IF . LPAREN condition RPAREN statement ELSE statement

    LPAREN          shift and go to state 364


state 305

    (91) assignment_expression -> logical_or_expression assignment_operator assignment_expression .

    RBRACE          reduce using rule 91 (assignment_expression -> logical_or_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 91 (assignment_expression -> logical_or_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 91 (assignment_expression -> logical_or_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 91 (assignment_expression -> logical_or_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 91 (assignment_expression -> logical_or_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 91 (assignment_expression -> logical_or_expression assignment_operator assignment_expression .)
    ELLIPSIS        reduce using rule 91 (assignment_expression -> logical_or_expression assignment_operator assignment_expression .)


state 306

    (134) malloc_statement -> MALLOC LPAREN postfix_expression . RPAREN
    (27) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (28) postfix_expression -> postfix_expression . LPAREN RPAREN
    (29) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (30) postfix_expression -> postfix_expression . PLUS_PLUS
    (31) postfix_expression -> postfix_expression . MINUS_MINUS
    (32) postfix_expression -> postfix_expression . DOT id_expression

    RPAREN          shift and go to state 365
    LBRACKET        shift and go to state 167
    LPAREN          shift and go to state 169
    PLUS_PLUS       shift and go to state 166
    MINUS_MINUS     shift and go to state 170
    DOT             shift and go to state 168


state 307

    (19) primary_expression -> LPAREN . expression RPAREN
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 181

state 308

    (34) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 34 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 34 (expression_list -> expression_list COMMA assignment_expression .)


state 309

    (211) initializer_list -> initializer_list COMMA . initializer_clause
    (207) initializer_clause -> . assignment_expression
    (208) initializer_clause -> . LBRACE initializer_list RBRACE
    (209) initializer_clause -> . LBRACE RBRACE
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LBRACE          shift and go to state 156
    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 131
    conditional_expression         shift and go to state 153
    initializer_clause             shift and go to state 366
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    unqualified_id                 shift and go to state 42

state 310

    (208) initializer_clause -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 208 (initializer_clause -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 208 (initializer_clause -> LBRACE initializer_list RBRACE .)
    SEMICOLON       reduce using rule 208 (initializer_clause -> LBRACE initializer_list RBRACE .)


state 311

    (229) member_declarator_list -> member_declarator_list COMMA . mark_2 member_declarator
    (230) mark_2 -> .

    IDENTIFIER      reduce using rule 230 (mark_2 -> .)
    COLON           reduce using rule 230 (mark_2 -> .)
    LPAREN          reduce using rule 230 (mark_2 -> .)
    TIMES           reduce using rule 230 (mark_2 -> .)
    AMPERSAND       reduce using rule 230 (mark_2 -> .)
    TILDE           reduce using rule 230 (mark_2 -> .)
    OPERATOR        reduce using rule 230 (mark_2 -> .)

    mark_2                         shift and go to state 367

state 312

    (224) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    COLON           reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    INLINE          reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    BOOL            reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    TIMES           reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    AMPERSAND       reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    TILDE           reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)
    RBRACE          reduce using rule 224 (member_declaration -> member_declarator_list SEMICOLON .)


state 313

    (222) member_declaration -> decl_specifier_seq member_declarator_list . SEMICOLON
    (229) member_declarator_list -> member_declarator_list . COMMA mark_2 member_declarator

    SEMICOLON       shift and go to state 368
    COMMA           shift and go to state 311


state 314

    (223) member_declaration -> decl_specifier_seq SEMICOLON .

    SEMICOLON       reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    PUBLIC          reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    PRIVATE         reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    PROTECTED       reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    IDENTIFIER      reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    COLON           reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    AUTO            reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    EXTERN          reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    INLINE          reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    BOOL            reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    CHAR            reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    INT             reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    FLOAT           reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    DOUBLE          reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    VOID            reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    LPAREN          reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    TIMES           reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    AMPERSAND       reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    TILDE           reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    OPERATOR        reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    CLASS           reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    STRUCT          reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)
    RBRACE          reduce using rule 223 (member_declaration -> decl_specifier_seq SEMICOLON .)


state 315

    (202) function_definition -> decl_specifier_seq declarator . function_scope function_body unset_function_scope
    (231) member_declarator -> declarator .
    (232) member_declarator -> declarator . constant_initializer
    (7) function_scope -> .
    (235) constant_initializer -> . ASSIGN constant_expression

    SEMICOLON       reduce using rule 231 (member_declarator -> declarator .)
    COMMA           reduce using rule 231 (member_declarator -> declarator .)
    LBRACE          reduce using rule 7 (function_scope -> .)
    ASSIGN          shift and go to state 323

    constant_initializer           shift and go to state 322
    function_scope                 shift and go to state 88

state 316

    (220) member_specification -> access_specifier COLON . member_specification
    (221) member_specification -> access_specifier COLON .
    (218) member_specification -> . member_declaration
    (219) member_specification -> . member_declaration member_specification
    (220) member_specification -> . access_specifier COLON member_specification
    (221) member_specification -> . access_specifier COLON
    (222) member_declaration -> . decl_specifier_seq member_declarator_list SEMICOLON
    (223) member_declaration -> . decl_specifier_seq SEMICOLON
    (224) member_declaration -> . member_declarator_list SEMICOLON
    (225) member_declaration -> . SEMICOLON
    (226) member_declaration -> . function_definition SEMICOLON
    (227) member_declaration -> . function_definition
    (242) access_specifier -> . PUBLIC
    (243) access_specifier -> . PRIVATE
    (244) access_specifier -> . PROTECTED
    (148) decl_specifier_seq -> . decl_specifier
    (228) member_declarator_list -> . member_declarator
    (229) member_declarator_list -> . member_declarator_list COMMA mark_2 member_declarator
    (202) function_definition -> . decl_specifier_seq declarator function_scope function_body unset_function_scope
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (231) member_declarator -> . declarator
    (232) member_declarator -> . declarator constant_initializer
    (233) member_declarator -> . IDENTIFIER COLON constant_expression
    (234) member_declarator -> . COLON constant_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (5) set_class_scope -> .
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RBRACE          reduce using rule 221 (member_specification -> access_specifier COLON .)
    SEMICOLON       shift and go to state 224
    PUBLIC          shift and go to state 235
    PRIVATE         shift and go to state 223
    PROTECTED       shift and go to state 222
    IDENTIFIER      shift and go to state 231
    COLON           shift and go to state 227
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    set_class_scope                shift and go to state 15
    member_declarator_list         shift and go to state 221
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    decl_specifier_seq             shift and go to state 225
    access_specifier               shift and go to state 226
    id_expression                  shift and go to state 32
    unqualified_id                 shift and go to state 42
    decl_specifier                 shift and go to state 16
    direct_declarator              shift and go to state 33
    declarator                     shift and go to state 233
    member_specification           shift and go to state 369
    declarator_id                  shift and go to state 38
    function_definition            shift and go to state 229
    member_declarator              shift and go to state 232
    function_specifier             shift and go to state 8
    conversion_function_id         shift and go to state 40
    ptr_operator                   shift and go to state 39
    member_declaration             shift and go to state 234

state 317

    (234) member_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 234 (member_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 234 (member_declarator -> COLON constant_expression .)


state 318

    (214) class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope . unset_class_scope
    (6) unset_class_scope -> .

    SEMICOLON       reduce using rule 6 (unset_class_scope -> .)
    LPAREN          reduce using rule 6 (unset_class_scope -> .)
    TIMES           reduce using rule 6 (unset_class_scope -> .)
    AMPERSAND       reduce using rule 6 (unset_class_scope -> .)
    IDENTIFIER      reduce using rule 6 (unset_class_scope -> .)
    TILDE           reduce using rule 6 (unset_class_scope -> .)
    OPERATOR        reduce using rule 6 (unset_class_scope -> .)
    BOOL            reduce using rule 6 (unset_class_scope -> .)
    CHAR            reduce using rule 6 (unset_class_scope -> .)
    INT             reduce using rule 6 (unset_class_scope -> .)
    FLOAT           reduce using rule 6 (unset_class_scope -> .)
    DOUBLE          reduce using rule 6 (unset_class_scope -> .)
    VOID            reduce using rule 6 (unset_class_scope -> .)
    CLASS           reduce using rule 6 (unset_class_scope -> .)
    STRUCT          reduce using rule 6 (unset_class_scope -> .)
    LBRACKET        reduce using rule 6 (unset_class_scope -> .)
    ASSIGN          reduce using rule 6 (unset_class_scope -> .)
    LBRACE          reduce using rule 6 (unset_class_scope -> .)
    COMMA           reduce using rule 6 (unset_class_scope -> .)
    RPAREN          reduce using rule 6 (unset_class_scope -> .)
    PLUS_PLUS       reduce using rule 6 (unset_class_scope -> .)
    MINUS_MINUS     reduce using rule 6 (unset_class_scope -> .)
    DOT             reduce using rule 6 (unset_class_scope -> .)
    DIV             reduce using rule 6 (unset_class_scope -> .)
    MODULO          reduce using rule 6 (unset_class_scope -> .)
    PLUS            reduce using rule 6 (unset_class_scope -> .)
    MINUS           reduce using rule 6 (unset_class_scope -> .)
    LESS            reduce using rule 6 (unset_class_scope -> .)
    GREATER         reduce using rule 6 (unset_class_scope -> .)
    LESS_EQ         reduce using rule 6 (unset_class_scope -> .)
    GREATER_EQ      reduce using rule 6 (unset_class_scope -> .)
    IS_EQ           reduce using rule 6 (unset_class_scope -> .)
    NOT_EQ          reduce using rule 6 (unset_class_scope -> .)
    DOUBLE_AMPERSAND reduce using rule 6 (unset_class_scope -> .)
    QUESTION        reduce using rule 6 (unset_class_scope -> .)
    DOUBLE_PIPE     reduce using rule 6 (unset_class_scope -> .)
    RBRACKET        reduce using rule 6 (unset_class_scope -> .)
    EQ_TIMES        reduce using rule 6 (unset_class_scope -> .)
    EQ_DIV          reduce using rule 6 (unset_class_scope -> .)
    EQ_MODULO       reduce using rule 6 (unset_class_scope -> .)
    EQ_PLUS         reduce using rule 6 (unset_class_scope -> .)
    EQ_MINUS        reduce using rule 6 (unset_class_scope -> .)
    RBRACE          reduce using rule 6 (unset_class_scope -> .)
    COLON           reduce using rule 6 (unset_class_scope -> .)
    ELLIPSIS        reduce using rule 6 (unset_class_scope -> .)

    unset_class_scope              shift and go to state 370

state 319

    (226) member_declaration -> function_definition SEMICOLON .

    SEMICOLON       reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    PUBLIC          reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    PRIVATE         reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    PROTECTED       reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    IDENTIFIER      reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    COLON           reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    AUTO            reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    EXTERN          reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    INLINE          reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    BOOL            reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    CHAR            reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    INT             reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    FLOAT           reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    DOUBLE          reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    VOID            reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    LPAREN          reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    TIMES           reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    AMPERSAND       reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    TILDE           reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    OPERATOR        reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    CLASS           reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    STRUCT          reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)
    RBRACE          reduce using rule 226 (member_declaration -> function_definition SEMICOLON .)


state 320

    (213) class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE . finish_scope unset_class_scope
    (4) finish_scope -> .

    SEMICOLON       reduce using rule 4 (finish_scope -> .)
    LPAREN          reduce using rule 4 (finish_scope -> .)
    TIMES           reduce using rule 4 (finish_scope -> .)
    AMPERSAND       reduce using rule 4 (finish_scope -> .)
    IDENTIFIER      reduce using rule 4 (finish_scope -> .)
    TILDE           reduce using rule 4 (finish_scope -> .)
    OPERATOR        reduce using rule 4 (finish_scope -> .)
    BOOL            reduce using rule 4 (finish_scope -> .)
    CHAR            reduce using rule 4 (finish_scope -> .)
    INT             reduce using rule 4 (finish_scope -> .)
    FLOAT           reduce using rule 4 (finish_scope -> .)
    DOUBLE          reduce using rule 4 (finish_scope -> .)
    VOID            reduce using rule 4 (finish_scope -> .)
    CLASS           reduce using rule 4 (finish_scope -> .)
    STRUCT          reduce using rule 4 (finish_scope -> .)
    LBRACKET        reduce using rule 4 (finish_scope -> .)
    ASSIGN          reduce using rule 4 (finish_scope -> .)
    LBRACE          reduce using rule 4 (finish_scope -> .)
    COMMA           reduce using rule 4 (finish_scope -> .)
    RPAREN          reduce using rule 4 (finish_scope -> .)
    PLUS_PLUS       reduce using rule 4 (finish_scope -> .)
    MINUS_MINUS     reduce using rule 4 (finish_scope -> .)
    DOT             reduce using rule 4 (finish_scope -> .)
    DIV             reduce using rule 4 (finish_scope -> .)
    MODULO          reduce using rule 4 (finish_scope -> .)
    PLUS            reduce using rule 4 (finish_scope -> .)
    MINUS           reduce using rule 4 (finish_scope -> .)
    LESS            reduce using rule 4 (finish_scope -> .)
    GREATER         reduce using rule 4 (finish_scope -> .)
    LESS_EQ         reduce using rule 4 (finish_scope -> .)
    GREATER_EQ      reduce using rule 4 (finish_scope -> .)
    IS_EQ           reduce using rule 4 (finish_scope -> .)
    NOT_EQ          reduce using rule 4 (finish_scope -> .)
    DOUBLE_AMPERSAND reduce using rule 4 (finish_scope -> .)
    QUESTION        reduce using rule 4 (finish_scope -> .)
    DOUBLE_PIPE     reduce using rule 4 (finish_scope -> .)
    RBRACKET        reduce using rule 4 (finish_scope -> .)
    EQ_TIMES        reduce using rule 4 (finish_scope -> .)
    EQ_DIV          reduce using rule 4 (finish_scope -> .)
    EQ_MODULO       reduce using rule 4 (finish_scope -> .)
    EQ_PLUS         reduce using rule 4 (finish_scope -> .)
    EQ_MINUS        reduce using rule 4 (finish_scope -> .)
    RBRACE          reduce using rule 4 (finish_scope -> .)
    COLON           reduce using rule 4 (finish_scope -> .)
    ELLIPSIS        reduce using rule 4 (finish_scope -> .)

    finish_scope                   shift and go to state 371

state 321

    (233) member_declarator -> IDENTIFIER COLON . constant_expression
    (100) constant_expression -> . conditional_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 117
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    constant_expression            shift and go to state 372
    conditional_expression         shift and go to state 138
    unqualified_id                 shift and go to state 42

state 322

    (232) member_declarator -> declarator constant_initializer .

    SEMICOLON       reduce using rule 232 (member_declarator -> declarator constant_initializer .)
    COMMA           reduce using rule 232 (member_declarator -> declarator constant_initializer .)


state 323

    (235) constant_initializer -> ASSIGN . constant_expression
    (100) constant_expression -> . conditional_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 117
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    constant_expression            shift and go to state 373
    conditional_expression         shift and go to state 138
    unqualified_id                 shift and go to state 42

state 324

    (219) member_specification -> member_declaration member_specification .

    RBRACE          reduce using rule 219 (member_specification -> member_declaration member_specification .)


state 325

    (240) base_specifier -> class_name .

    COMMA           reduce using rule 240 (base_specifier -> class_name .)
    LBRACE          reduce using rule 240 (base_specifier -> class_name .)


state 326

    (241) base_specifier -> access_specifier . class_name
    (212) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 83

    class_name                     shift and go to state 374

state 327

    (239) base_specifier_list -> base_specifier .

    COMMA           reduce using rule 239 (base_specifier_list -> base_specifier .)
    LBRACE          reduce using rule 239 (base_specifier_list -> base_specifier .)


state 328

    (237) base_clause_opt -> COLON base_specifier_list .
    (238) base_specifier_list -> base_specifier_list . COMMA base_specifier

    LBRACE          reduce using rule 237 (base_clause_opt -> COLON base_specifier_list .)
    COMMA           shift and go to state 375


state 329

    (52) new_expression -> NEW new_placement_opt LPAREN type_id . RPAREN new_initializer_opt

    RPAREN          shift and go to state 376


state 330

    (56) new_type_id -> type_specifier_seq new_declarator_opt .

    LPAREN          reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    TIMES           reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    DIV             reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    MODULO          reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    PLUS            reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    MINUS           reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    LESS            reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    GREATER         reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    LESS_EQ         reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    GREATER_EQ      reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    IS_EQ           reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    NOT_EQ          reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    DOUBLE_AMPERSAND reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    QUESTION        reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    DOUBLE_PIPE     reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    RBRACKET        reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    ASSIGN          reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    EQ_TIMES        reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    EQ_DIV          reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    EQ_MODULO       reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    EQ_PLUS         reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    EQ_MINUS        reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    RPAREN          reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    COMMA           reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    SEMICOLON       reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    RBRACE          reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    COLON           reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)
    ELLIPSIS        reduce using rule 56 (new_type_id -> type_specifier_seq new_declarator_opt .)


state 331

    (59) new_declarator_opt -> direct_new_declarator .
    (61) direct_new_declarator -> direct_new_declarator . LBRACKET constant_expression RBRACKET

    LPAREN          reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    TIMES           reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    DIV             reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    MODULO          reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    PLUS            reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    MINUS           reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    LESS            reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    GREATER         reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    LESS_EQ         reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    GREATER_EQ      reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    IS_EQ           reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    NOT_EQ          reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    DOUBLE_AMPERSAND reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    QUESTION        reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    DOUBLE_PIPE     reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    RBRACKET        reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    ASSIGN          reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    EQ_TIMES        reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    EQ_DIV          reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    EQ_MODULO       reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    EQ_PLUS         reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    EQ_MINUS        reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    RPAREN          reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    COMMA           reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    SEMICOLON       reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    RBRACE          reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    COLON           reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    ELLIPSIS        reduce using rule 59 (new_declarator_opt -> direct_new_declarator .)
    LBRACKET        shift and go to state 377


state 332

    (58) new_declarator_opt -> ptr_operator . new_declarator_opt
    (57) new_declarator_opt -> .
    (58) new_declarator_opt -> . ptr_operator new_declarator_opt
    (59) new_declarator_opt -> . direct_new_declarator
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (60) direct_new_declarator -> . LBRACKET expression RBRACKET
    (61) direct_new_declarator -> . direct_new_declarator LBRACKET constant_expression RBRACKET

    LPAREN          reduce using rule 57 (new_declarator_opt -> .)
    DIV             reduce using rule 57 (new_declarator_opt -> .)
    MODULO          reduce using rule 57 (new_declarator_opt -> .)
    PLUS            reduce using rule 57 (new_declarator_opt -> .)
    MINUS           reduce using rule 57 (new_declarator_opt -> .)
    LESS            reduce using rule 57 (new_declarator_opt -> .)
    GREATER         reduce using rule 57 (new_declarator_opt -> .)
    LESS_EQ         reduce using rule 57 (new_declarator_opt -> .)
    GREATER_EQ      reduce using rule 57 (new_declarator_opt -> .)
    IS_EQ           reduce using rule 57 (new_declarator_opt -> .)
    NOT_EQ          reduce using rule 57 (new_declarator_opt -> .)
    DOUBLE_AMPERSAND reduce using rule 57 (new_declarator_opt -> .)
    QUESTION        reduce using rule 57 (new_declarator_opt -> .)
    DOUBLE_PIPE     reduce using rule 57 (new_declarator_opt -> .)
    RBRACKET        reduce using rule 57 (new_declarator_opt -> .)
    ASSIGN          reduce using rule 57 (new_declarator_opt -> .)
    EQ_TIMES        reduce using rule 57 (new_declarator_opt -> .)
    EQ_DIV          reduce using rule 57 (new_declarator_opt -> .)
    EQ_MODULO       reduce using rule 57 (new_declarator_opt -> .)
    EQ_PLUS         reduce using rule 57 (new_declarator_opt -> .)
    EQ_MINUS        reduce using rule 57 (new_declarator_opt -> .)
    RPAREN          reduce using rule 57 (new_declarator_opt -> .)
    COMMA           reduce using rule 57 (new_declarator_opt -> .)
    SEMICOLON       reduce using rule 57 (new_declarator_opt -> .)
    RBRACE          reduce using rule 57 (new_declarator_opt -> .)
    COLON           reduce using rule 57 (new_declarator_opt -> .)
    ELLIPSIS        reduce using rule 57 (new_declarator_opt -> .)
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    LBRACKET        shift and go to state 333

  ! TIMES           [ reduce using rule 57 (new_declarator_opt -> .) ]

    new_declarator_opt             shift and go to state 378
    ptr_operator                   shift and go to state 332
    direct_new_declarator          shift and go to state 331

state 333

    (60) direct_new_declarator -> LBRACKET . expression RBRACKET
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 379

state 334

    (63) new_initializer_opt -> LPAREN . expression_list_opt RPAREN
    (35) expression_list_opt -> .
    (36) expression_list_opt -> . expression_list
    (33) expression_list -> . assignment_expression
    (34) expression_list -> . expression_list COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RPAREN          reduce using rule 35 (expression_list_opt -> .)
    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    expression_list_opt            shift and go to state 380
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 151
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    expression_list                shift and go to state 381
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 335

    (51) new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .

    TIMES           reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    DIV             reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    MODULO          reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    PLUS            reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    MINUS           reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    LESS            reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    GREATER         reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    LESS_EQ         reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    GREATER_EQ      reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    IS_EQ           reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    NOT_EQ          reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    DOUBLE_AMPERSAND reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    QUESTION        reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    DOUBLE_PIPE     reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    ASSIGN          reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    EQ_TIMES        reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    EQ_DIV          reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    EQ_MODULO       reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    EQ_PLUS         reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    EQ_MINUS        reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    COMMA           reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    RPAREN          reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    SEMICOLON       reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    RBRACKET        reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    RBRACE          reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    COLON           reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)
    ELLIPSIS        reduce using rule 51 (new_expression -> NEW new_placement_opt new_type_id new_initializer_opt .)


state 336

    (53) new_placement -> LPAREN expression_list RPAREN .

    LPAREN          reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)
    BOOL            reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)
    CHAR            reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)
    INT             reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)
    FLOAT           reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)
    DOUBLE          reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)
    VOID            reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)
    CLASS           reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)
    STRUCT          reduce using rule 53 (new_placement -> LPAREN expression_list RPAREN .)


state 337

    (27) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS_PLUS       reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS_MINUS     reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LESS            reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    IS_EQ           reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_TIMES        reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_DIV          reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_MODULO       reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ELLIPSIS        reduce using rule 27 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 338

    (29) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LBRACKET        reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUS_PLUS       reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUS_MINUS     reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    TIMES           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIV             reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODULO          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LESS            reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GREATER         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LESS_EQ         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GREATER_EQ      reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    IS_EQ           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NOT_EQ          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESTION        reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOUBLE_PIPE     reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ASSIGN          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQ_TIMES        reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQ_DIV          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQ_MODULO       reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQ_PLUS         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQ_MINUS        reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RBRACE          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ELLIPSIS        reduce using rule 29 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 339

    (88) conditional_expression -> logical_or_expression QUESTION expression COLON . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 382
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 340

    (42) unary_expression -> SIZEOF LPAREN type_id RPAREN .

    TIMES           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    DIV             reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    MODULO          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    PLUS            reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    MINUS           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    LESS            reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    GREATER         reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    LESS_EQ         reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    GREATER_EQ      reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    IS_EQ           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    NOT_EQ          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    QUESTION        reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    DOUBLE_PIPE     reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    ASSIGN          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    EQ_TIMES        reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    EQ_DIV          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    EQ_MODULO       reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    EQ_PLUS         reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    EQ_MINUS        reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    SEMICOLON       reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    COMMA           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    ELLIPSIS        reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    RPAREN          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    RBRACKET        reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    RBRACE          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)
    COLON           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_id RPAREN .)


state 341

    (67) cast_expression -> LPAREN type_id RPAREN cast_expression .

    TIMES           reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    DIV             reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    MODULO          reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    PLUS            reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    MINUS           reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    LESS            reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    GREATER         reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    LESS_EQ         reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    GREATER_EQ      reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    IS_EQ           reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    NOT_EQ          reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    QUESTION        reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    DOUBLE_PIPE     reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    ASSIGN          reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    EQ_TIMES        reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    EQ_DIV          reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    EQ_MODULO       reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    EQ_PLUS         reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    EQ_MINUS        reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    SEMICOLON       reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    COMMA           reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    RBRACKET        reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    RPAREN          reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    RBRACE          reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    COLON           reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)
    ELLIPSIS        reduce using rule 67 (cast_expression -> LPAREN type_id RPAREN cast_expression .)


state 342

    (99) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 99 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 99 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 99 (expression -> expression COMMA assignment_expression .)
    SEMICOLON       reduce using rule 99 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 99 (expression -> expression COMMA assignment_expression .)


state 343

    (65) delete_expression -> DELETE LBRACKET RBRACKET cast_expression .

    TIMES           reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    DIV             reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    MODULO          reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    PLUS            reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    MINUS           reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    LESS            reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    GREATER         reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    LESS_EQ         reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    GREATER_EQ      reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    IS_EQ           reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    NOT_EQ          reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    QUESTION        reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    DOUBLE_PIPE     reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    SEMICOLON       reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    COMMA           reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    ASSIGN          reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    EQ_TIMES        reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    EQ_DIV          reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    EQ_MODULO       reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    EQ_PLUS         reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    EQ_MINUS        reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    RPAREN          reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    RBRACE          reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    RBRACKET        reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    COLON           reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)
    ELLIPSIS        reduce using rule 65 (delete_expression -> DELETE LBRACKET RBRACKET cast_expression .)


state 344

    (201) parameter_declaration -> decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression .

    ELLIPSIS        reduce using rule 201 (parameter_declaration -> decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression .)
    COMMA           reduce using rule 201 (parameter_declaration -> decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression .)
    RPAREN          reduce using rule 201 (parameter_declaration -> decl_specifier_seq abstract_declarator_opt ASSIGN assignment_expression .)


state 345

    (187) direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN . cv_qualifier_seq_opt
    (177) cv_qualifier_seq_opt -> .

    LPAREN          reduce using rule 177 (cv_qualifier_seq_opt -> .)
    ASSIGN          reduce using rule 177 (cv_qualifier_seq_opt -> .)
    ELLIPSIS        reduce using rule 177 (cv_qualifier_seq_opt -> .)
    COMMA           reduce using rule 177 (cv_qualifier_seq_opt -> .)
    RPAREN          reduce using rule 177 (cv_qualifier_seq_opt -> .)
    LBRACKET        reduce using rule 177 (cv_qualifier_seq_opt -> .)

    cv_qualifier_seq_opt           shift and go to state 383

state 346

    (189) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LPAREN          reduce using rule 189 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 189 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LBRACKET        reduce using rule 189 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    ASSIGN          reduce using rule 189 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    ELLIPSIS        reduce using rule 189 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 189 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 347

    (188) direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 384


state 348

    (199) parameter_declaration -> decl_specifier_seq declarator ASSIGN assignment_expression .

    ELLIPSIS        reduce using rule 199 (parameter_declaration -> decl_specifier_seq declarator ASSIGN assignment_expression .)
    COMMA           reduce using rule 199 (parameter_declaration -> decl_specifier_seq declarator ASSIGN assignment_expression .)
    RPAREN          reduce using rule 199 (parameter_declaration -> decl_specifier_seq declarator ASSIGN assignment_expression .)


state 349

    (186) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause . RPAREN cv_qualifier_seq_opt

    RPAREN          shift and go to state 385


state 350

    (140) jump_statement -> RETURN SEMICOLON .

    IDENTIFIER      reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    SCAN            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    MALLOC          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    EXTERN          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    INLINE          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    PLUS_PLUS       reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    MINUS_MINUS     reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    EXCLAMATION     reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    TILDE           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    INUMBER         reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    DNUMBER         reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    LIT_CHAR        reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    LIT_STR         reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    OPERATOR        reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 140 (jump_statement -> RETURN SEMICOLON .)


state 351

    (139) jump_statement -> RETURN expression . SEMICOLON
    (99) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 386
    COMMA           shift and go to state 257


state 352

    (133) print_statement -> PRINT LPAREN . postfix_expression RPAREN SEMICOLON
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    THIS            shift and go to state 135
    LPAREN          shift and go to state 307
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 119
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 387
    literal                        shift and go to state 113
    conversion_function_id         shift and go to state 40
    primary_expression             shift and go to state 125
    unqualified_id                 shift and go to state 42

state 353

    (128) iteration_statement -> FOR LPAREN . for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> FOR LPAREN . for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON RPAREN statement
    (135) for_init_statement -> . expression_statement
    (136) for_init_statement -> . simple_declaration
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (148) decl_specifier_seq -> . decl_specifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (5) set_class_scope -> .
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    SEMICOLON       shift and go to state 293
    IDENTIFIER      shift and go to state 390
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 388
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    for_init_statement             shift and go to state 391
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 389
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    decl_specifier_seq             shift and go to state 279
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    function_specifier             shift and go to state 8
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 354

    (116) expression_statement -> expression SEMICOLON .

    IDENTIFIER      reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    SCAN            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    MALLOC          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    EXTERN          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    INLINE          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    BOOL            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    EXCLAMATION     reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    TILDE           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    TIMES           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    AMPERSAND       reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    INUMBER         reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    DNUMBER         reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    LIT_CHAR        reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    LIT_STR         reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    OPERATOR        reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 116 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 116 (expression_statement -> expression SEMICOLON .)


state 355

    (114) labeled_statement -> DEFAULT COLON . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 392
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 356

    (126) iteration_statement -> WHILE LPAREN . condition RPAREN statement
    (124) condition -> . expression
    (125) condition -> . type_specifier_seq declarator ASSIGN assignment_expression
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (5) set_class_scope -> .
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    class_specifier                shift and go to state 2
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    condition                      shift and go to state 393
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    type_specifier_seq             shift and go to state 395
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 394

state 357

    (113) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 396


state 358

    (118) compound_statement -> LBRACE new_scope statement_seq finish_scope . RBRACE

    RBRACE          shift and go to state 397


state 359

    (120) statement_seq -> statement_seq statement .

    IDENTIFIER      reduce using rule 120 (statement_seq -> statement_seq statement .)
    CASE            reduce using rule 120 (statement_seq -> statement_seq statement .)
    DEFAULT         reduce using rule 120 (statement_seq -> statement_seq statement .)
    SEMICOLON       reduce using rule 120 (statement_seq -> statement_seq statement .)
    LBRACE          reduce using rule 120 (statement_seq -> statement_seq statement .)
    IF              reduce using rule 120 (statement_seq -> statement_seq statement .)
    SWITCH          reduce using rule 120 (statement_seq -> statement_seq statement .)
    WHILE           reduce using rule 120 (statement_seq -> statement_seq statement .)
    DO              reduce using rule 120 (statement_seq -> statement_seq statement .)
    FOR             reduce using rule 120 (statement_seq -> statement_seq statement .)
    BREAK           reduce using rule 120 (statement_seq -> statement_seq statement .)
    CONTINUE        reduce using rule 120 (statement_seq -> statement_seq statement .)
    RETURN          reduce using rule 120 (statement_seq -> statement_seq statement .)
    PRINT           reduce using rule 120 (statement_seq -> statement_seq statement .)
    SCAN            reduce using rule 120 (statement_seq -> statement_seq statement .)
    MALLOC          reduce using rule 120 (statement_seq -> statement_seq statement .)
    AUTO            reduce using rule 120 (statement_seq -> statement_seq statement .)
    EXTERN          reduce using rule 120 (statement_seq -> statement_seq statement .)
    INLINE          reduce using rule 120 (statement_seq -> statement_seq statement .)
    BOOL            reduce using rule 120 (statement_seq -> statement_seq statement .)
    CHAR            reduce using rule 120 (statement_seq -> statement_seq statement .)
    INT             reduce using rule 120 (statement_seq -> statement_seq statement .)
    FLOAT           reduce using rule 120 (statement_seq -> statement_seq statement .)
    DOUBLE          reduce using rule 120 (statement_seq -> statement_seq statement .)
    VOID            reduce using rule 120 (statement_seq -> statement_seq statement .)
    LPAREN          reduce using rule 120 (statement_seq -> statement_seq statement .)
    PLUS_PLUS       reduce using rule 120 (statement_seq -> statement_seq statement .)
    MINUS_MINUS     reduce using rule 120 (statement_seq -> statement_seq statement .)
    SIZEOF          reduce using rule 120 (statement_seq -> statement_seq statement .)
    EXCLAMATION     reduce using rule 120 (statement_seq -> statement_seq statement .)
    TILDE           reduce using rule 120 (statement_seq -> statement_seq statement .)
    TIMES           reduce using rule 120 (statement_seq -> statement_seq statement .)
    AMPERSAND       reduce using rule 120 (statement_seq -> statement_seq statement .)
    PLUS            reduce using rule 120 (statement_seq -> statement_seq statement .)
    MINUS           reduce using rule 120 (statement_seq -> statement_seq statement .)
    NEW             reduce using rule 120 (statement_seq -> statement_seq statement .)
    DELETE          reduce using rule 120 (statement_seq -> statement_seq statement .)
    THIS            reduce using rule 120 (statement_seq -> statement_seq statement .)
    INUMBER         reduce using rule 120 (statement_seq -> statement_seq statement .)
    DNUMBER         reduce using rule 120 (statement_seq -> statement_seq statement .)
    LIT_CHAR        reduce using rule 120 (statement_seq -> statement_seq statement .)
    LIT_STR         reduce using rule 120 (statement_seq -> statement_seq statement .)
    TRUE            reduce using rule 120 (statement_seq -> statement_seq statement .)
    FALSE           reduce using rule 120 (statement_seq -> statement_seq statement .)
    OPERATOR        reduce using rule 120 (statement_seq -> statement_seq statement .)
    RBRACE          reduce using rule 120 (statement_seq -> statement_seq statement .)
    CLASS           reduce using rule 120 (statement_seq -> statement_seq statement .)
    STRUCT          reduce using rule 120 (statement_seq -> statement_seq statement .)


state 360

    (123) selection_statement -> SWITCH LPAREN . condition RPAREN statement
    (124) condition -> . expression
    (125) condition -> . type_specifier_seq declarator ASSIGN assignment_expression
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (5) set_class_scope -> .
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    class_specifier                shift and go to state 2
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    condition                      shift and go to state 398
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    type_specifier_seq             shift and go to state 395
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 394

state 361

    (112) labeled_statement -> IDENTIFIER COLON . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 399
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 362

    (127) iteration_statement -> DO statement . WHILE LPAREN condition RPAREN SEMICOLON

    WHILE           shift and go to state 400


state 363

    (132) scan_statement -> SCAN LPAREN . IDENTIFIER RPAREN SEMICOLON

    IDENTIFIER      shift and go to state 401


state 364

    (121) selection_statement -> IF LPAREN . condition RPAREN statement
    (122) selection_statement -> IF LPAREN . condition RPAREN statement ELSE statement
    (124) condition -> . expression
    (125) condition -> . type_specifier_seq declarator ASSIGN assignment_expression
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (5) set_class_scope -> .
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    class_specifier                shift and go to state 2
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    condition                      shift and go to state 402
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    type_specifier_seq             shift and go to state 395
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 394

state 365

    (134) malloc_statement -> MALLOC LPAREN postfix_expression RPAREN .

    RPAREN          reduce using rule 134 (malloc_statement -> MALLOC LPAREN postfix_expression RPAREN .)
    COMMA           reduce using rule 134 (malloc_statement -> MALLOC LPAREN postfix_expression RPAREN .)
    SEMICOLON       reduce using rule 134 (malloc_statement -> MALLOC LPAREN postfix_expression RPAREN .)
    RBRACKET        reduce using rule 134 (malloc_statement -> MALLOC LPAREN postfix_expression RPAREN .)
    COLON           reduce using rule 134 (malloc_statement -> MALLOC LPAREN postfix_expression RPAREN .)
    RBRACE          reduce using rule 134 (malloc_statement -> MALLOC LPAREN postfix_expression RPAREN .)
    ELLIPSIS        reduce using rule 134 (malloc_statement -> MALLOC LPAREN postfix_expression RPAREN .)


state 366

    (211) initializer_list -> initializer_list COMMA initializer_clause .

    RBRACE          reduce using rule 211 (initializer_list -> initializer_list COMMA initializer_clause .)
    COMMA           reduce using rule 211 (initializer_list -> initializer_list COMMA initializer_clause .)


state 367

    (229) member_declarator_list -> member_declarator_list COMMA mark_2 . member_declarator
    (231) member_declarator -> . declarator
    (232) member_declarator -> . declarator constant_initializer
    (233) member_declarator -> . IDENTIFIER COLON constant_expression
    (234) member_declarator -> . COLON constant_expression
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 231
    COLON           shift and go to state 227
    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    member_declarator              shift and go to state 403
    direct_declarator              shift and go to state 33
    ptr_operator                   shift and go to state 39
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 233
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38

state 368

    (222) member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    COLON           reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    INLINE          reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    BOOL            reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    INT             reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    VOID            reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    TIMES           reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    AMPERSAND       reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    TILDE           reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)
    RBRACE          reduce using rule 222 (member_declaration -> decl_specifier_seq member_declarator_list SEMICOLON .)


state 369

    (220) member_specification -> access_specifier COLON member_specification .

    RBRACE          reduce using rule 220 (member_specification -> access_specifier COLON member_specification .)


state 370

    (214) class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .

    SEMICOLON       reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    LPAREN          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    TIMES           reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    AMPERSAND       reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    IDENTIFIER      reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    TILDE           reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    OPERATOR        reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    BOOL            reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    CHAR            reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    INT             reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    FLOAT           reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    DOUBLE          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    VOID            reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    CLASS           reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    STRUCT          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    LBRACKET        reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    ASSIGN          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    LBRACE          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    COMMA           reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    RPAREN          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    PLUS_PLUS       reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    MINUS_MINUS     reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    DOT             reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    DIV             reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    MODULO          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    PLUS            reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    MINUS           reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    LESS            reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    GREATER         reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    LESS_EQ         reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    GREATER_EQ      reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    IS_EQ           reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    NOT_EQ          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    DOUBLE_AMPERSAND reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    QUESTION        reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    DOUBLE_PIPE     reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    RBRACKET        reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    EQ_TIMES        reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    EQ_DIV          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    EQ_MODULO       reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    EQ_PLUS         reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    EQ_MINUS        reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    RBRACE          reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    COLON           reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)
    ELLIPSIS        reduce using rule 214 (class_specifier -> set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope .)


state 371

    (213) class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope . unset_class_scope
    (6) unset_class_scope -> .

    SEMICOLON       reduce using rule 6 (unset_class_scope -> .)
    LPAREN          reduce using rule 6 (unset_class_scope -> .)
    TIMES           reduce using rule 6 (unset_class_scope -> .)
    AMPERSAND       reduce using rule 6 (unset_class_scope -> .)
    IDENTIFIER      reduce using rule 6 (unset_class_scope -> .)
    TILDE           reduce using rule 6 (unset_class_scope -> .)
    OPERATOR        reduce using rule 6 (unset_class_scope -> .)
    BOOL            reduce using rule 6 (unset_class_scope -> .)
    CHAR            reduce using rule 6 (unset_class_scope -> .)
    INT             reduce using rule 6 (unset_class_scope -> .)
    FLOAT           reduce using rule 6 (unset_class_scope -> .)
    DOUBLE          reduce using rule 6 (unset_class_scope -> .)
    VOID            reduce using rule 6 (unset_class_scope -> .)
    CLASS           reduce using rule 6 (unset_class_scope -> .)
    STRUCT          reduce using rule 6 (unset_class_scope -> .)
    LBRACKET        reduce using rule 6 (unset_class_scope -> .)
    ASSIGN          reduce using rule 6 (unset_class_scope -> .)
    LBRACE          reduce using rule 6 (unset_class_scope -> .)
    COMMA           reduce using rule 6 (unset_class_scope -> .)
    RPAREN          reduce using rule 6 (unset_class_scope -> .)
    PLUS_PLUS       reduce using rule 6 (unset_class_scope -> .)
    MINUS_MINUS     reduce using rule 6 (unset_class_scope -> .)
    DOT             reduce using rule 6 (unset_class_scope -> .)
    DIV             reduce using rule 6 (unset_class_scope -> .)
    MODULO          reduce using rule 6 (unset_class_scope -> .)
    PLUS            reduce using rule 6 (unset_class_scope -> .)
    MINUS           reduce using rule 6 (unset_class_scope -> .)
    LESS            reduce using rule 6 (unset_class_scope -> .)
    GREATER         reduce using rule 6 (unset_class_scope -> .)
    LESS_EQ         reduce using rule 6 (unset_class_scope -> .)
    GREATER_EQ      reduce using rule 6 (unset_class_scope -> .)
    IS_EQ           reduce using rule 6 (unset_class_scope -> .)
    NOT_EQ          reduce using rule 6 (unset_class_scope -> .)
    DOUBLE_AMPERSAND reduce using rule 6 (unset_class_scope -> .)
    QUESTION        reduce using rule 6 (unset_class_scope -> .)
    DOUBLE_PIPE     reduce using rule 6 (unset_class_scope -> .)
    RBRACKET        reduce using rule 6 (unset_class_scope -> .)
    EQ_TIMES        reduce using rule 6 (unset_class_scope -> .)
    EQ_DIV          reduce using rule 6 (unset_class_scope -> .)
    EQ_MODULO       reduce using rule 6 (unset_class_scope -> .)
    EQ_PLUS         reduce using rule 6 (unset_class_scope -> .)
    EQ_MINUS        reduce using rule 6 (unset_class_scope -> .)
    RBRACE          reduce using rule 6 (unset_class_scope -> .)
    COLON           reduce using rule 6 (unset_class_scope -> .)
    ELLIPSIS        reduce using rule 6 (unset_class_scope -> .)

    unset_class_scope              shift and go to state 404

state 372

    (233) member_declarator -> IDENTIFIER COLON constant_expression .

    SEMICOLON       reduce using rule 233 (member_declarator -> IDENTIFIER COLON constant_expression .)
    COMMA           reduce using rule 233 (member_declarator -> IDENTIFIER COLON constant_expression .)


state 373

    (235) constant_initializer -> ASSIGN constant_expression .

    SEMICOLON       reduce using rule 235 (constant_initializer -> ASSIGN constant_expression .)
    COMMA           reduce using rule 235 (constant_initializer -> ASSIGN constant_expression .)


state 374

    (241) base_specifier -> access_specifier class_name .

    COMMA           reduce using rule 241 (base_specifier -> access_specifier class_name .)
    LBRACE          reduce using rule 241 (base_specifier -> access_specifier class_name .)


state 375

    (238) base_specifier_list -> base_specifier_list COMMA . base_specifier
    (240) base_specifier -> . class_name
    (241) base_specifier -> . access_specifier class_name
    (212) class_name -> . IDENTIFIER
    (242) access_specifier -> . PUBLIC
    (243) access_specifier -> . PRIVATE
    (244) access_specifier -> . PROTECTED

    IDENTIFIER      shift and go to state 83
    PUBLIC          shift and go to state 235
    PRIVATE         shift and go to state 223
    PROTECTED       shift and go to state 222

    base_specifier                 shift and go to state 405
    class_name                     shift and go to state 325
    access_specifier               shift and go to state 326

state 376

    (52) new_expression -> NEW new_placement_opt LPAREN type_id RPAREN . new_initializer_opt
    (62) new_initializer_opt -> .
    (63) new_initializer_opt -> . LPAREN expression_list_opt RPAREN

    TIMES           reduce using rule 62 (new_initializer_opt -> .)
    DIV             reduce using rule 62 (new_initializer_opt -> .)
    MODULO          reduce using rule 62 (new_initializer_opt -> .)
    PLUS            reduce using rule 62 (new_initializer_opt -> .)
    MINUS           reduce using rule 62 (new_initializer_opt -> .)
    LESS            reduce using rule 62 (new_initializer_opt -> .)
    GREATER         reduce using rule 62 (new_initializer_opt -> .)
    LESS_EQ         reduce using rule 62 (new_initializer_opt -> .)
    GREATER_EQ      reduce using rule 62 (new_initializer_opt -> .)
    IS_EQ           reduce using rule 62 (new_initializer_opt -> .)
    NOT_EQ          reduce using rule 62 (new_initializer_opt -> .)
    DOUBLE_AMPERSAND reduce using rule 62 (new_initializer_opt -> .)
    QUESTION        reduce using rule 62 (new_initializer_opt -> .)
    DOUBLE_PIPE     reduce using rule 62 (new_initializer_opt -> .)
    RBRACKET        reduce using rule 62 (new_initializer_opt -> .)
    ASSIGN          reduce using rule 62 (new_initializer_opt -> .)
    EQ_TIMES        reduce using rule 62 (new_initializer_opt -> .)
    EQ_DIV          reduce using rule 62 (new_initializer_opt -> .)
    EQ_MODULO       reduce using rule 62 (new_initializer_opt -> .)
    EQ_PLUS         reduce using rule 62 (new_initializer_opt -> .)
    EQ_MINUS        reduce using rule 62 (new_initializer_opt -> .)
    RPAREN          reduce using rule 62 (new_initializer_opt -> .)
    COMMA           reduce using rule 62 (new_initializer_opt -> .)
    SEMICOLON       reduce using rule 62 (new_initializer_opt -> .)
    RBRACE          reduce using rule 62 (new_initializer_opt -> .)
    COLON           reduce using rule 62 (new_initializer_opt -> .)
    ELLIPSIS        reduce using rule 62 (new_initializer_opt -> .)
    LPAREN          shift and go to state 334

    new_initializer_opt            shift and go to state 406

state 377

    (61) direct_new_declarator -> direct_new_declarator LBRACKET . constant_expression RBRACKET
    (100) constant_expression -> . conditional_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 117
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    constant_expression            shift and go to state 407
    conditional_expression         shift and go to state 138
    unqualified_id                 shift and go to state 42

state 378

    (58) new_declarator_opt -> ptr_operator new_declarator_opt .

    LPAREN          reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    TIMES           reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    DIV             reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    MODULO          reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    PLUS            reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    MINUS           reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    LESS            reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    GREATER         reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    LESS_EQ         reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    GREATER_EQ      reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    IS_EQ           reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    NOT_EQ          reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    DOUBLE_AMPERSAND reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    QUESTION        reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    DOUBLE_PIPE     reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    RBRACKET        reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    ASSIGN          reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    EQ_TIMES        reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    EQ_DIV          reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    EQ_MODULO       reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    EQ_PLUS         reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    EQ_MINUS        reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    RPAREN          reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    COMMA           reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    SEMICOLON       reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    RBRACE          reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    COLON           reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)
    ELLIPSIS        reduce using rule 58 (new_declarator_opt -> ptr_operator new_declarator_opt .)


state 379

    (60) direct_new_declarator -> LBRACKET expression . RBRACKET
    (99) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 408
    COMMA           shift and go to state 257


state 380

    (63) new_initializer_opt -> LPAREN expression_list_opt . RPAREN

    RPAREN          shift and go to state 409


state 381

    (36) expression_list_opt -> expression_list .
    (34) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          reduce using rule 36 (expression_list_opt -> expression_list .)
    COMMA           shift and go to state 216


state 382

    (88) conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression .

    RPAREN          reduce using rule 88 (conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression .)
    COMMA           reduce using rule 88 (conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression .)
    RBRACKET        reduce using rule 88 (conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression .)
    COLON           reduce using rule 88 (conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression .)
    SEMICOLON       reduce using rule 88 (conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression .)
    RBRACE          reduce using rule 88 (conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression .)
    ELLIPSIS        reduce using rule 88 (conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression .)


state 383

    (187) direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .

    LPAREN          reduce using rule 187 (direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    RPAREN          reduce using rule 187 (direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    LBRACKET        reduce using rule 187 (direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    ASSIGN          reduce using rule 187 (direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    ELLIPSIS        reduce using rule 187 (direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    COMMA           reduce using rule 187 (direct_abstract_declarator -> LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)


state 384

    (188) direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET .

    LPAREN          reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET .)
    ASSIGN          reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET .)
    ELLIPSIS        reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator_opt LBRACKET constant_expression_opt RBRACKET .)


state 385

    (186) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN . cv_qualifier_seq_opt
    (177) cv_qualifier_seq_opt -> .

    LPAREN          reduce using rule 177 (cv_qualifier_seq_opt -> .)
    ASSIGN          reduce using rule 177 (cv_qualifier_seq_opt -> .)
    ELLIPSIS        reduce using rule 177 (cv_qualifier_seq_opt -> .)
    COMMA           reduce using rule 177 (cv_qualifier_seq_opt -> .)
    RPAREN          reduce using rule 177 (cv_qualifier_seq_opt -> .)
    LBRACKET        reduce using rule 177 (cv_qualifier_seq_opt -> .)

    cv_qualifier_seq_opt           shift and go to state 410

state 386

    (139) jump_statement -> RETURN expression SEMICOLON .

    IDENTIFIER      reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    SCAN            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    MALLOC          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    EXTERN          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    INLINE          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    EXCLAMATION     reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    TILDE           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    AMPERSAND       reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    INUMBER         reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    DNUMBER         reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    LIT_CHAR        reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    LIT_STR         reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    OPERATOR        reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 139 (jump_statement -> RETURN expression SEMICOLON .)


state 387

    (133) print_statement -> PRINT LPAREN postfix_expression . RPAREN SEMICOLON
    (27) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (28) postfix_expression -> postfix_expression . LPAREN RPAREN
    (29) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (30) postfix_expression -> postfix_expression . PLUS_PLUS
    (31) postfix_expression -> postfix_expression . MINUS_MINUS
    (32) postfix_expression -> postfix_expression . DOT id_expression

    RPAREN          shift and go to state 411
    LBRACKET        shift and go to state 167
    LPAREN          shift and go to state 169
    PLUS_PLUS       shift and go to state 166
    MINUS_MINUS     shift and go to state 170
    DOT             shift and go to state 168


state 388

    (135) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 135 (for_init_statement -> expression_statement .)
    MALLOC          reduce using rule 135 (for_init_statement -> expression_statement .)
    BOOL            reduce using rule 135 (for_init_statement -> expression_statement .)
    CHAR            reduce using rule 135 (for_init_statement -> expression_statement .)
    INT             reduce using rule 135 (for_init_statement -> expression_statement .)
    FLOAT           reduce using rule 135 (for_init_statement -> expression_statement .)
    DOUBLE          reduce using rule 135 (for_init_statement -> expression_statement .)
    VOID            reduce using rule 135 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 135 (for_init_statement -> expression_statement .)
    PLUS_PLUS       reduce using rule 135 (for_init_statement -> expression_statement .)
    MINUS_MINUS     reduce using rule 135 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 135 (for_init_statement -> expression_statement .)
    EXCLAMATION     reduce using rule 135 (for_init_statement -> expression_statement .)
    TILDE           reduce using rule 135 (for_init_statement -> expression_statement .)
    TIMES           reduce using rule 135 (for_init_statement -> expression_statement .)
    AMPERSAND       reduce using rule 135 (for_init_statement -> expression_statement .)
    PLUS            reduce using rule 135 (for_init_statement -> expression_statement .)
    MINUS           reduce using rule 135 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 135 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 135 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 135 (for_init_statement -> expression_statement .)
    INUMBER         reduce using rule 135 (for_init_statement -> expression_statement .)
    DNUMBER         reduce using rule 135 (for_init_statement -> expression_statement .)
    LIT_CHAR        reduce using rule 135 (for_init_statement -> expression_statement .)
    LIT_STR         reduce using rule 135 (for_init_statement -> expression_statement .)
    TRUE            reduce using rule 135 (for_init_statement -> expression_statement .)
    FALSE           reduce using rule 135 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 135 (for_init_statement -> expression_statement .)
    OPERATOR        reduce using rule 135 (for_init_statement -> expression_statement .)
    CLASS           reduce using rule 135 (for_init_statement -> expression_statement .)
    STRUCT          reduce using rule 135 (for_init_statement -> expression_statement .)


state 389

    (136) for_init_statement -> simple_declaration .

    SEMICOLON       reduce using rule 136 (for_init_statement -> simple_declaration .)
    MALLOC          reduce using rule 136 (for_init_statement -> simple_declaration .)
    BOOL            reduce using rule 136 (for_init_statement -> simple_declaration .)
    CHAR            reduce using rule 136 (for_init_statement -> simple_declaration .)
    INT             reduce using rule 136 (for_init_statement -> simple_declaration .)
    FLOAT           reduce using rule 136 (for_init_statement -> simple_declaration .)
    DOUBLE          reduce using rule 136 (for_init_statement -> simple_declaration .)
    VOID            reduce using rule 136 (for_init_statement -> simple_declaration .)
    LPAREN          reduce using rule 136 (for_init_statement -> simple_declaration .)
    PLUS_PLUS       reduce using rule 136 (for_init_statement -> simple_declaration .)
    MINUS_MINUS     reduce using rule 136 (for_init_statement -> simple_declaration .)
    SIZEOF          reduce using rule 136 (for_init_statement -> simple_declaration .)
    EXCLAMATION     reduce using rule 136 (for_init_statement -> simple_declaration .)
    TILDE           reduce using rule 136 (for_init_statement -> simple_declaration .)
    TIMES           reduce using rule 136 (for_init_statement -> simple_declaration .)
    AMPERSAND       reduce using rule 136 (for_init_statement -> simple_declaration .)
    PLUS            reduce using rule 136 (for_init_statement -> simple_declaration .)
    MINUS           reduce using rule 136 (for_init_statement -> simple_declaration .)
    NEW             reduce using rule 136 (for_init_statement -> simple_declaration .)
    DELETE          reduce using rule 136 (for_init_statement -> simple_declaration .)
    THIS            reduce using rule 136 (for_init_statement -> simple_declaration .)
    INUMBER         reduce using rule 136 (for_init_statement -> simple_declaration .)
    DNUMBER         reduce using rule 136 (for_init_statement -> simple_declaration .)
    LIT_CHAR        reduce using rule 136 (for_init_statement -> simple_declaration .)
    LIT_STR         reduce using rule 136 (for_init_statement -> simple_declaration .)
    TRUE            reduce using rule 136 (for_init_statement -> simple_declaration .)
    FALSE           reduce using rule 136 (for_init_statement -> simple_declaration .)
    IDENTIFIER      reduce using rule 136 (for_init_statement -> simple_declaration .)
    OPERATOR        reduce using rule 136 (for_init_statement -> simple_declaration .)
    CLASS           reduce using rule 136 (for_init_statement -> simple_declaration .)
    STRUCT          reduce using rule 136 (for_init_statement -> simple_declaration .)


state 390

    (146) simple_declaration -> IDENTIFIER . init_declarator_list SEMICOLON
    (22) unqualified_id -> IDENTIFIER .
    (165) init_declarator_list -> . init_declarator
    (166) init_declarator_list -> . init_declarator_list COMMA mark_1 init_declarator
    (168) init_declarator -> . declarator initializer_opt
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LBRACKET        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LPAREN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOT             reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    TIMES           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DIV             reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MODULO          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    PLUS            reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    MINUS           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LESS            reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    GREATER         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    LESS_EQ         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    IS_EQ           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    NOT_EQ          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    QUESTION        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    ASSIGN          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_DIV          reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    SEMICOLON       reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    COMMA           reduce using rule 22 (unqualified_id -> IDENTIFIER .)
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

  ! LPAREN          [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 35 ]

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    init_declarator                shift and go to state 34
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 44
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38
    init_declarator_list           shift and go to state 43

state 391

    (128) iteration_statement -> FOR LPAREN for_init_statement . condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> FOR LPAREN for_init_statement . condition SEMICOLON RPAREN statement
    (130) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON expression RPAREN statement
    (131) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON RPAREN statement
    (124) condition -> . expression
    (125) condition -> . type_specifier_seq declarator ASSIGN assignment_expression
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (5) set_class_scope -> .
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    SEMICOLON       shift and go to state 413
    MALLOC          shift and go to state 150
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    class_specifier                shift and go to state 2
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    equality_expression            shift and go to state 130
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    condition                      shift and go to state 412
    type_specifier_seq             shift and go to state 395
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 394

state 392

    (114) labeled_statement -> DEFAULT COLON statement .

    IDENTIFIER      reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    PRINT           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    SCAN            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    MALLOC          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    BOOL            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    PLUS_PLUS       reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    MINUS_MINUS     reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    EXCLAMATION     reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    TILDE           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    AMPERSAND       reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    NEW             reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    DELETE          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    THIS            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    INUMBER         reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    DNUMBER         reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    LIT_CHAR        reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    LIT_STR         reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    TRUE            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    FALSE           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    OPERATOR        reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    RBRACE          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 114 (labeled_statement -> DEFAULT COLON statement .)


state 393

    (126) iteration_statement -> WHILE LPAREN condition . RPAREN statement

    RPAREN          shift and go to state 414


state 394

    (124) condition -> expression .
    (99) expression -> expression . COMMA assignment_expression

    RPAREN          reduce using rule 124 (condition -> expression .)
    SEMICOLON       reduce using rule 124 (condition -> expression .)
    COMMA           shift and go to state 257


state 395

    (125) condition -> type_specifier_seq . declarator ASSIGN assignment_expression
    (169) declarator -> . direct_declarator
    (170) declarator -> . ptr_operator declarator
    (171) direct_declarator -> . declarator_id
    (172) direct_declarator -> . direct_declarator LPAREN parameter_declaration_clause RPAREN
    (173) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (174) direct_declarator -> . LPAREN declarator RPAREN
    (175) ptr_operator -> . TIMES
    (176) ptr_operator -> . AMPERSAND
    (178) declarator_id -> . id_expression
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    LPAREN          shift and go to state 37
    TIMES           shift and go to state 35
    AMPERSAND       shift and go to state 36
    IDENTIFIER      shift and go to state 31
    TILDE           shift and go to state 30
    OPERATOR        shift and go to state 27

    id_expression                  shift and go to state 32
    ptr_operator                   shift and go to state 39
    direct_declarator              shift and go to state 33
    conversion_function_id         shift and go to state 40
    operator_function_id           shift and go to state 29
    declarator                     shift and go to state 415
    unqualified_id                 shift and go to state 42
    declarator_id                  shift and go to state 38

state 396

    (113) labeled_statement -> CASE constant_expression COLON . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 416
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 397

    (118) compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .

    IDENTIFIER      reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    CASE            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    DEFAULT         reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    SEMICOLON       reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    LBRACE          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    IF              reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    SWITCH          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    WHILE           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    DO              reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    FOR             reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    BREAK           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    CONTINUE        reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    RETURN          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    PRINT           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    SCAN            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    MALLOC          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    AUTO            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    EXTERN          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    INLINE          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    BOOL            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    CHAR            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    INT             reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    FLOAT           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    DOUBLE          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    VOID            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    LPAREN          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    PLUS_PLUS       reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    MINUS_MINUS     reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    SIZEOF          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    EXCLAMATION     reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    TILDE           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    TIMES           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    AMPERSAND       reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    PLUS            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    MINUS           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    NEW             reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    DELETE          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    THIS            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    INUMBER         reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    DNUMBER         reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    LIT_CHAR        reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    LIT_STR         reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    TRUE            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    FALSE           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    OPERATOR        reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    RBRACE          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    CLASS           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    STRUCT          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    ELSE            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    $end            reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    PUBLIC          reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    PRIVATE         reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    PROTECTED       reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)
    COLON           reduce using rule 118 (compound_statement -> LBRACE new_scope statement_seq finish_scope RBRACE .)


state 398

    (123) selection_statement -> SWITCH LPAREN condition . RPAREN statement

    RPAREN          shift and go to state 417


state 399

    (112) labeled_statement -> IDENTIFIER COLON statement .

    IDENTIFIER      reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    LBRACE          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    PRINT           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    SCAN            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    MALLOC          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    INLINE          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS_PLUS       reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS_MINUS     reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    EXCLAMATION     reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    TILDE           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    TIMES           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    AMPERSAND       reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    DELETE          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    INUMBER         reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    DNUMBER         reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    LIT_CHAR        reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    LIT_STR         reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    TRUE            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    FALSE           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    OPERATOR        reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    RBRACE          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 112 (labeled_statement -> IDENTIFIER COLON statement .)


state 400

    (127) iteration_statement -> DO statement WHILE . LPAREN condition RPAREN SEMICOLON

    LPAREN          shift and go to state 418


state 401

    (132) scan_statement -> SCAN LPAREN IDENTIFIER . RPAREN SEMICOLON

    RPAREN          shift and go to state 419


state 402

    (121) selection_statement -> IF LPAREN condition . RPAREN statement
    (122) selection_statement -> IF LPAREN condition . RPAREN statement ELSE statement

    RPAREN          shift and go to state 420


state 403

    (229) member_declarator_list -> member_declarator_list COMMA mark_2 member_declarator .

    SEMICOLON       reduce using rule 229 (member_declarator_list -> member_declarator_list COMMA mark_2 member_declarator .)
    COMMA           reduce using rule 229 (member_declarator_list -> member_declarator_list COMMA mark_2 member_declarator .)


state 404

    (213) class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .

    SEMICOLON       reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    LPAREN          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    TIMES           reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    AMPERSAND       reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    IDENTIFIER      reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    TILDE           reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    OPERATOR        reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    BOOL            reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    CHAR            reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    INT             reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    FLOAT           reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    DOUBLE          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    VOID            reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    CLASS           reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    STRUCT          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    LBRACKET        reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    ASSIGN          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    LBRACE          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    COMMA           reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    RPAREN          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    PLUS_PLUS       reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    MINUS_MINUS     reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    DOT             reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    DIV             reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    MODULO          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    PLUS            reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    MINUS           reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    LESS            reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    GREATER         reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    LESS_EQ         reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    GREATER_EQ      reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    IS_EQ           reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    NOT_EQ          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    DOUBLE_AMPERSAND reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    QUESTION        reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    DOUBLE_PIPE     reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    RBRACKET        reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    EQ_TIMES        reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    EQ_DIV          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    EQ_MODULO       reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    EQ_PLUS         reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    EQ_MINUS        reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    RBRACE          reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    COLON           reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)
    ELLIPSIS        reduce using rule 213 (class_specifier -> set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope .)


state 405

    (238) base_specifier_list -> base_specifier_list COMMA base_specifier .

    COMMA           reduce using rule 238 (base_specifier_list -> base_specifier_list COMMA base_specifier .)
    LBRACE          reduce using rule 238 (base_specifier_list -> base_specifier_list COMMA base_specifier .)


state 406

    (52) new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .

    TIMES           reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    DIV             reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    MODULO          reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    PLUS            reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    MINUS           reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    LESS            reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    GREATER         reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    LESS_EQ         reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    GREATER_EQ      reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    IS_EQ           reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    NOT_EQ          reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    DOUBLE_AMPERSAND reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    QUESTION        reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    DOUBLE_PIPE     reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    ASSIGN          reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    EQ_TIMES        reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    EQ_DIV          reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    EQ_MODULO       reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    EQ_PLUS         reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    EQ_MINUS        reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    COMMA           reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    RPAREN          reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    SEMICOLON       reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    RBRACKET        reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    RBRACE          reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    COLON           reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)
    ELLIPSIS        reduce using rule 52 (new_expression -> NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt .)


state 407

    (61) direct_new_declarator -> direct_new_declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 421


state 408

    (60) direct_new_declarator -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    DIV             reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    LESS            reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    IS_EQ           reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    EQ_TIMES        reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    EQ_DIV          reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    EQ_MODULO       reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    COLON           reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)
    ELLIPSIS        reduce using rule 60 (direct_new_declarator -> LBRACKET expression RBRACKET .)


state 409

    (63) new_initializer_opt -> LPAREN expression_list_opt RPAREN .

    TIMES           reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    DIV             reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    MODULO          reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    PLUS            reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    MINUS           reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    LESS            reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    GREATER         reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    LESS_EQ         reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    GREATER_EQ      reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    IS_EQ           reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    NOT_EQ          reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    QUESTION        reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    RBRACKET        reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    ASSIGN          reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    EQ_TIMES        reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    EQ_DIV          reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    EQ_MODULO       reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    EQ_PLUS         reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    EQ_MINUS        reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    RPAREN          reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    COMMA           reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    SEMICOLON       reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    RBRACE          reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    COLON           reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)
    ELLIPSIS        reduce using rule 63 (new_initializer_opt -> LPAREN expression_list_opt RPAREN .)


state 410

    (186) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .

    LPAREN          reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    RPAREN          reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    LBRACKET        reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    ASSIGN          reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    ELLIPSIS        reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)
    COMMA           reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_declaration_clause RPAREN cv_qualifier_seq_opt .)


state 411

    (133) print_statement -> PRINT LPAREN postfix_expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 422


state 412

    (128) iteration_statement -> FOR LPAREN for_init_statement condition . SEMICOLON expression RPAREN statement
    (129) iteration_statement -> FOR LPAREN for_init_statement condition . SEMICOLON RPAREN statement

    SEMICOLON       shift and go to state 423


state 413

    (130) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . expression RPAREN statement
    (131) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . RPAREN statement
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RPAREN          shift and go to state 424
    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 425

state 414

    (126) iteration_statement -> WHILE LPAREN condition RPAREN . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 426
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 415

    (125) condition -> type_specifier_seq declarator . ASSIGN assignment_expression

    ASSIGN          shift and go to state 427


state 416

    (113) labeled_statement -> CASE constant_expression COLON statement .

    IDENTIFIER      reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    PRINT           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    SCAN            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    MALLOC          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    BOOL            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS_PLUS       reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS_MINUS     reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    EXCLAMATION     reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    TILDE           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    AMPERSAND       reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    NEW             reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    DELETE          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    THIS            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    INUMBER         reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    DNUMBER         reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    LIT_CHAR        reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    LIT_STR         reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    TRUE            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    FALSE           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    OPERATOR        reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    RBRACE          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 113 (labeled_statement -> CASE constant_expression COLON statement .)


state 417

    (123) selection_statement -> SWITCH LPAREN condition RPAREN . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 428
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 418

    (127) iteration_statement -> DO statement WHILE LPAREN . condition RPAREN SEMICOLON
    (124) condition -> . expression
    (125) condition -> . type_specifier_seq declarator ASSIGN assignment_expression
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (180) type_specifier_seq -> . type_specifier
    (181) type_specifier_seq -> . type_specifier type_specifier_seq
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (5) set_class_scope -> .
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    class_specifier                shift and go to state 2
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    type_specifier                 shift and go to state 59
    simple_type_specifier          shift and go to state 11
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    condition                      shift and go to state 429
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    type_specifier_seq             shift and go to state 395
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 394

state 419

    (132) scan_statement -> SCAN LPAREN IDENTIFIER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 430


state 420

    (121) selection_statement -> IF LPAREN condition RPAREN . statement
    (122) selection_statement -> IF LPAREN condition RPAREN . statement ELSE statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 431
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 421

    (61) direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    TIMES           reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    DIV             reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    MODULO          reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    PLUS            reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    MINUS           reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    LESS            reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    GREATER         reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    LESS_EQ         reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    GREATER_EQ      reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    IS_EQ           reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    NOT_EQ          reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    QUESTION        reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    RBRACKET        reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    ASSIGN          reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    EQ_TIMES        reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    EQ_DIV          reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    EQ_MODULO       reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    EQ_PLUS         reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    EQ_MINUS        reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    SEMICOLON       reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    RBRACE          reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    COLON           reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)
    ELLIPSIS        reduce using rule 61 (direct_new_declarator -> direct_new_declarator LBRACKET constant_expression RBRACKET .)


state 422

    (133) print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    CASE            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    IF              reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    DO              reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    FOR             reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    SCAN            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    MALLOC          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    INLINE          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    INT             reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    VOID            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    PLUS_PLUS       reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    MINUS_MINUS     reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    TILDE           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    TIMES           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    AMPERSAND       reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    NEW             reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    THIS            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    INUMBER         reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    DNUMBER         reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    LIT_CHAR        reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    LIT_STR         reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 133 (print_statement -> PRINT LPAREN postfix_expression RPAREN SEMICOLON .)


state 423

    (128) iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON . expression RPAREN statement
    (129) iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON . RPAREN statement
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    RPAREN          shift and go to state 432
    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 183
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 433

state 424

    (131) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 434
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 425

    (130) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression . RPAREN statement
    (99) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 435
    COMMA           shift and go to state 257


state 426

    (126) iteration_statement -> WHILE LPAREN condition RPAREN statement .

    IDENTIFIER      reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    CASE            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    DEFAULT         reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    SEMICOLON       reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    LBRACE          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    IF              reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    SWITCH          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    WHILE           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    DO              reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    FOR             reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    BREAK           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    CONTINUE        reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    RETURN          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    PRINT           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    SCAN            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    MALLOC          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    AUTO            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    EXTERN          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    INLINE          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    BOOL            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    CHAR            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    INT             reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    FLOAT           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    DOUBLE          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    VOID            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    LPAREN          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    PLUS_PLUS       reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    MINUS_MINUS     reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    SIZEOF          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    EXCLAMATION     reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    TILDE           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    TIMES           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    AMPERSAND       reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    PLUS            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    MINUS           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    NEW             reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    DELETE          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    THIS            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    INUMBER         reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    DNUMBER         reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    LIT_CHAR        reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    LIT_STR         reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    TRUE            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    FALSE           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    OPERATOR        reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    RBRACE          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    CLASS           reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    STRUCT          reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)
    ELSE            reduce using rule 126 (iteration_statement -> WHILE LPAREN condition RPAREN statement .)


state 427

    (125) condition -> type_specifier_seq declarator ASSIGN . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    MALLOC          shift and go to state 150
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 27

    unary_expression               shift and go to state 104
    delete_expression              shift and go to state 105
    malloc_statement               shift and go to state 148
    new_expression                 shift and go to state 107
    additive_expression            shift and go to state 110
    operator_function_id           shift and go to state 29
    postfix_expression             shift and go to state 112
    literal                        shift and go to state 113
    relational_expression          shift and go to state 114
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    unary_operator                 shift and go to state 115
    id_expression                  shift and go to state 119
    assignment_expression          shift and go to state 436
    multiplicative_expression      shift and go to state 131
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    equality_expression            shift and go to state 130
    conversion_function_id         shift and go to state 40
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42

state 428

    (123) selection_statement -> SWITCH LPAREN condition RPAREN statement .

    IDENTIFIER      reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    CASE            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    DEFAULT         reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    SEMICOLON       reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    LBRACE          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    IF              reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    SWITCH          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    WHILE           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    DO              reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    FOR             reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    BREAK           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    CONTINUE        reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    RETURN          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    PRINT           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    SCAN            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    MALLOC          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    AUTO            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    EXTERN          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    INLINE          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    BOOL            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    CHAR            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    INT             reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    FLOAT           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    DOUBLE          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    VOID            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    LPAREN          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    PLUS_PLUS       reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    MINUS_MINUS     reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    SIZEOF          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    EXCLAMATION     reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    TILDE           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    TIMES           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    AMPERSAND       reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    PLUS            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    MINUS           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    NEW             reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    DELETE          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    THIS            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    INUMBER         reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    DNUMBER         reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    LIT_CHAR        reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    LIT_STR         reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    TRUE            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    FALSE           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    OPERATOR        reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    RBRACE          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    CLASS           reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    STRUCT          reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)
    ELSE            reduce using rule 123 (selection_statement -> SWITCH LPAREN condition RPAREN statement .)


state 429

    (127) iteration_statement -> DO statement WHILE LPAREN condition . RPAREN SEMICOLON

    RPAREN          shift and go to state 437


state 430

    (132) scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    CASE            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    LBRACE          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    IF              reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    SWITCH          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    WHILE           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    DO              reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    FOR             reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    BREAK           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    RETURN          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    PRINT           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    SCAN            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    MALLOC          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    AUTO            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    EXTERN          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    INLINE          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    BOOL            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    CHAR            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    INT             reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    FLOAT           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    VOID            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    LPAREN          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    PLUS_PLUS       reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    MINUS_MINUS     reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    TILDE           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    TIMES           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    AMPERSAND       reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    PLUS            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    MINUS           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    NEW             reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    DELETE          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    THIS            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    INUMBER         reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    DNUMBER         reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    LIT_CHAR        reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    LIT_STR         reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    TRUE            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    FALSE           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    RBRACE          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    CLASS           reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    STRUCT          reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)
    ELSE            reduce using rule 132 (scan_statement -> SCAN LPAREN IDENTIFIER RPAREN SEMICOLON .)


state 431

    (121) selection_statement -> IF LPAREN condition RPAREN statement .
    (122) selection_statement -> IF LPAREN condition RPAREN statement . ELSE statement

    IDENTIFIER      reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    CASE            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    DEFAULT         reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    SEMICOLON       reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    LBRACE          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    IF              reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    SWITCH          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    WHILE           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    DO              reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    FOR             reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    BREAK           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    CONTINUE        reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    RETURN          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    PRINT           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    SCAN            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    MALLOC          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    AUTO            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    EXTERN          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    INLINE          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    BOOL            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    CHAR            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    INT             reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    FLOAT           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    DOUBLE          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    VOID            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    LPAREN          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    PLUS_PLUS       reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    MINUS_MINUS     reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    SIZEOF          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    EXCLAMATION     reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    TILDE           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    TIMES           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    AMPERSAND       reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    PLUS            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    MINUS           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    NEW             reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    DELETE          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    THIS            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    INUMBER         reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    DNUMBER         reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    LIT_CHAR        reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    LIT_STR         reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    TRUE            reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    FALSE           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    OPERATOR        reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    RBRACE          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    CLASS           reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    STRUCT          reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .)
    ELSE            shift and go to state 438

  ! ELSE            [ reduce using rule 121 (selection_statement -> IF LPAREN condition RPAREN statement .) ]


state 432

    (129) iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 439
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 433

    (128) iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression . RPAREN statement
    (99) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 440
    COMMA           shift and go to state 257


state 434

    (131) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .

    IDENTIFIER      reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CASE            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LBRACE          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IF              reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DO              reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FOR             reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PRINT           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SCAN            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MALLOC          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INLINE          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BOOL            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INT             reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOID            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUS_PLUS       reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUS_MINUS     reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    EXCLAMATION     reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TILDE           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TIMES           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AMPERSAND       reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUS            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUS           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NEW             reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THIS            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INUMBER         reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DNUMBER         reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LIT_CHAR        reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LIT_STR         reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TRUE            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FALSE           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RBRACE          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 131 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)


state 435

    (130) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 441
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 436

    (125) condition -> type_specifier_seq declarator ASSIGN assignment_expression .

    RPAREN          reduce using rule 125 (condition -> type_specifier_seq declarator ASSIGN assignment_expression .)
    SEMICOLON       reduce using rule 125 (condition -> type_specifier_seq declarator ASSIGN assignment_expression .)


state 437

    (127) iteration_statement -> DO statement WHILE LPAREN condition RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 442


state 438

    (122) selection_statement -> IF LPAREN condition RPAREN statement ELSE . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 443
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 439

    (129) iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .

    IDENTIFIER      reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    CASE            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    LBRACE          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    IF              reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    DO              reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    FOR             reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    PRINT           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    SCAN            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    MALLOC          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    INLINE          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    BOOL            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    INT             reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    VOID            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    PLUS_PLUS       reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    MINUS_MINUS     reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    EXCLAMATION     reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    TILDE           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    TIMES           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    AMPERSAND       reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    PLUS            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    MINUS           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    NEW             reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    THIS            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    INUMBER         reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    DNUMBER         reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    LIT_CHAR        reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    LIT_STR         reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    TRUE            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    FALSE           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    RBRACE          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 129 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement .)


state 440

    (128) iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN . statement
    (103) statement -> . labeled_statement
    (104) statement -> . expression_statement
    (105) statement -> . compound_statement
    (106) statement -> . selection_statement
    (107) statement -> . iteration_statement
    (108) statement -> . jump_statement
    (109) statement -> . declaration_statement
    (110) statement -> . print_statement
    (111) statement -> . scan_statement
    (112) labeled_statement -> . IDENTIFIER COLON statement
    (113) labeled_statement -> . CASE constant_expression COLON statement
    (114) labeled_statement -> . DEFAULT COLON statement
    (115) expression_statement -> . SEMICOLON
    (116) expression_statement -> . expression SEMICOLON
    (117) compound_statement -> . LBRACE RBRACE
    (118) compound_statement -> . LBRACE new_scope statement_seq finish_scope RBRACE
    (121) selection_statement -> . IF LPAREN condition RPAREN statement
    (122) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (123) selection_statement -> . SWITCH LPAREN condition RPAREN statement
    (126) iteration_statement -> . WHILE LPAREN condition RPAREN statement
    (127) iteration_statement -> . DO statement WHILE LPAREN condition RPAREN SEMICOLON
    (128) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN for_init_statement condition SEMICOLON RPAREN statement
    (130) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (137) jump_statement -> . BREAK
    (138) jump_statement -> . CONTINUE
    (139) jump_statement -> . RETURN expression SEMICOLON
    (140) jump_statement -> . RETURN SEMICOLON
    (141) declaration_statement -> . block_declaration
    (133) print_statement -> . PRINT LPAREN postfix_expression RPAREN SEMICOLON
    (132) scan_statement -> . SCAN LPAREN IDENTIFIER RPAREN SEMICOLON
    (98) expression -> . assignment_expression
    (99) expression -> . expression COMMA assignment_expression
    (144) block_declaration -> . simple_declaration
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . malloc_statement
    (91) assignment_expression -> . logical_or_expression assignment_operator assignment_expression
    (145) simple_declaration -> . decl_specifier_seq init_declarator_list SEMICOLON
    (146) simple_declaration -> . IDENTIFIER init_declarator_list SEMICOLON
    (147) simple_declaration -> . decl_specifier_seq SEMICOLON
    (87) conditional_expression -> . logical_or_expression
    (88) conditional_expression -> . logical_or_expression QUESTION expression COLON assignment_expression
    (134) malloc_statement -> . MALLOC LPAREN postfix_expression RPAREN
    (85) logical_or_expression -> . logical_and_expression
    (86) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (148) decl_specifier_seq -> . decl_specifier
    (83) logical_and_expression -> . equality_expression
    (84) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND equality_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . function_specifier
    (80) equality_expression -> . relational_expression
    (81) equality_expression -> . equality_expression IS_EQ relational_expression
    (82) equality_expression -> . equality_expression NOT_EQ relational_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . EXTERN
    (155) type_specifier -> . simple_type_specifier
    (156) type_specifier -> . class_specifier
    (154) function_specifier -> . INLINE
    (75) relational_expression -> . additive_expression
    (76) relational_expression -> . relational_expression LESS additive_expression
    (77) relational_expression -> . relational_expression GREATER additive_expression
    (78) relational_expression -> . relational_expression LESS_EQ additive_expression
    (79) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (157) simple_type_specifier -> . BOOL
    (158) simple_type_specifier -> . CHAR
    (159) simple_type_specifier -> . INT
    (160) simple_type_specifier -> . FLOAT
    (161) simple_type_specifier -> . DOUBLE
    (162) simple_type_specifier -> . VOID
    (213) class_specifier -> . set_class_scope new_scope class_head LBRACE member_specification RBRACE finish_scope unset_class_scope
    (214) class_specifier -> . set_class_scope new_scope class_head LBRACE RBRACE finish_scope unset_class_scope
    (72) additive_expression -> . multiplicative_expression
    (73) additive_expression -> . additive_expression PLUS multiplicative_expression
    (74) additive_expression -> . additive_expression MINUS multiplicative_expression
    (5) set_class_scope -> .
    (68) multiplicative_expression -> . cast_expression
    (69) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (70) multiplicative_expression -> . multiplicative_expression DIV cast_expression
    (71) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (66) cast_expression -> . unary_expression
    (67) cast_expression -> . LPAREN type_id RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS cast_expression
    (39) unary_expression -> . MINUS_MINUS cast_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_id RPAREN
    (43) unary_expression -> . new_expression
    (44) unary_expression -> . delete_expression
    (49) unary_expression -> . EXCLAMATION
    (50) unary_expression -> . TILDE
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (30) postfix_expression -> . postfix_expression PLUS_PLUS
    (31) postfix_expression -> . postfix_expression MINUS_MINUS
    (32) postfix_expression -> . postfix_expression DOT id_expression
    (45) unary_operator -> . TIMES
    (46) unary_operator -> . AMPERSAND
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (51) new_expression -> . NEW new_placement_opt new_type_id new_initializer_opt
    (52) new_expression -> . NEW new_placement_opt LPAREN type_id RPAREN new_initializer_opt
    (64) delete_expression -> . DELETE cast_expression
    (65) delete_expression -> . DELETE LBRACKET RBRACKET cast_expression
    (17) primary_expression -> . literal
    (18) primary_expression -> . THIS
    (19) primary_expression -> . LPAREN expression RPAREN
    (20) primary_expression -> . id_expression
    (11) literal -> . INUMBER
    (12) literal -> . DNUMBER
    (13) literal -> . LIT_CHAR
    (14) literal -> . LIT_STR
    (15) literal -> . TRUE
    (16) literal -> . FALSE
    (21) id_expression -> . unqualified_id
    (22) unqualified_id -> . IDENTIFIER
    (23) unqualified_id -> . operator_function_id
    (24) unqualified_id -> . conversion_function_id
    (25) unqualified_id -> . TILDE class_name
    (258) operator_function_id -> . OPERATOR operator
    (245) conversion_function_id -> . OPERATOR conversion_type_id

    IDENTIFIER      shift and go to state 297
    CASE            shift and go to state 292
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 293
    LBRACE          shift and go to state 145
    IF              shift and go to state 304
    SWITCH          shift and go to state 295
    WHILE           shift and go to state 291
    DO              shift and go to state 300
    FOR             shift and go to state 286
    BREAK           shift and go to state 299
    CONTINUE        shift and go to state 287
    RETURN          shift and go to state 282
    PRINT           shift and go to state 284
    SCAN            shift and go to state 301
    MALLOC          shift and go to state 150
    AUTO            shift and go to state 17
    EXTERN          shift and go to state 7
    INLINE          shift and go to state 24
    BOOL            shift and go to state 23
    CHAR            shift and go to state 6
    INT             shift and go to state 19
    FLOAT           shift and go to state 21
    DOUBLE          shift and go to state 20
    VOID            shift and go to state 4
    CLASS           reduce using rule 5 (set_class_scope -> .)
    STRUCT          reduce using rule 5 (set_class_scope -> .)
    LPAREN          shift and go to state 126
    PLUS_PLUS       shift and go to state 137
    MINUS_MINUS     shift and go to state 136
    SIZEOF          shift and go to state 120
    EXCLAMATION     shift and go to state 103
    TILDE           shift and go to state 122
    TIMES           shift and go to state 123
    AMPERSAND       shift and go to state 124
    PLUS            shift and go to state 116
    MINUS           shift and go to state 109
    NEW             shift and go to state 106
    DELETE          shift and go to state 139
    THIS            shift and go to state 135
    INUMBER         shift and go to state 132
    DNUMBER         shift and go to state 121
    LIT_CHAR        shift and go to state 111
    LIT_STR         shift and go to state 134
    TRUE            shift and go to state 108
    FALSE           shift and go to state 128
    OPERATOR        shift and go to state 27

    expression_statement           shift and go to state 277
    storage_class_specifier        shift and go to state 1
    class_specifier                shift and go to state 2
    decl_specifier_seq             shift and go to state 279
    unary_expression               shift and go to state 104
    set_class_scope                shift and go to state 15
    malloc_statement               shift and go to state 148
    print_statement                shift and go to state 283
    new_expression                 shift and go to state 107
    function_specifier             shift and go to state 8
    iteration_statement            shift and go to state 278
    additive_expression            shift and go to state 110
    simple_declaration             shift and go to state 9
    type_specifier                 shift and go to state 10
    simple_type_specifier          shift and go to state 11
    compound_statement             shift and go to state 285
    operator_function_id           shift and go to state 29
    selection_statement            shift and go to state 302
    literal                        shift and go to state 113
    postfix_expression             shift and go to state 112
    conversion_function_id         shift and go to state 40
    equality_expression            shift and go to state 130
    statement                      shift and go to state 444
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 127
    logical_or_expression          shift and go to state 149
    relational_expression          shift and go to state 114
    id_expression                  shift and go to state 119
    delete_expression              shift and go to state 105
    assignment_expression          shift and go to state 183
    decl_specifier                 shift and go to state 16
    multiplicative_expression      shift and go to state 131
    scan_statement                 shift and go to state 288
    primary_expression             shift and go to state 125
    logical_and_expression         shift and go to state 129
    jump_statement                 shift and go to state 298
    labeled_statement              shift and go to state 280
    block_declaration              shift and go to state 281
    declaration_statement          shift and go to state 303
    conditional_expression         shift and go to state 153
    unqualified_id                 shift and go to state 42
    expression                     shift and go to state 289

state 441

    (130) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .

    IDENTIFIER      reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LBRACE          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PRINT           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SCAN            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MALLOC          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INLINE          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BOOL            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PLUS_PLUS       reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MINUS_MINUS     reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    EXCLAMATION     reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TILDE           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TIMES           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    AMPERSAND       reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PLUS            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MINUS           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INUMBER         reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DNUMBER         reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LIT_CHAR        reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LIT_STR         reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TRUE            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FALSE           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RBRACE          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 130 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)


state 442

    (127) iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    CASE            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    LBRACE          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    IF              reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    SWITCH          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    WHILE           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    DO              reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    FOR             reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    BREAK           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    RETURN          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    PRINT           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    SCAN            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    MALLOC          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    AUTO            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    EXTERN          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    INLINE          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    BOOL            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    CHAR            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    INT             reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    FLOAT           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    VOID            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    LPAREN          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    PLUS_PLUS       reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    MINUS_MINUS     reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    TILDE           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    TIMES           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    AMPERSAND       reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    PLUS            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    MINUS           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    NEW             reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    DELETE          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    THIS            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    INUMBER         reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    DNUMBER         reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    LIT_CHAR        reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    LIT_STR         reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    TRUE            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    FALSE           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    RBRACE          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    CLASS           reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    STRUCT          reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)
    ELSE            reduce using rule 127 (iteration_statement -> DO statement WHILE LPAREN condition RPAREN SEMICOLON .)


state 443

    (122) selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .

    IDENTIFIER      reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    CASE            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    IF              reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    WHILE           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    DO              reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    FOR             reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    BREAK           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    RETURN          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    PRINT           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    SCAN            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    MALLOC          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    AUTO            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    INLINE          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    BOOL            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    CHAR            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    INT             reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    VOID            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    PLUS_PLUS       reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    MINUS_MINUS     reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    EXCLAMATION     reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    TILDE           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    TIMES           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    AMPERSAND       reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    PLUS            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    MINUS           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    NEW             reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    DELETE          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    THIS            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    INUMBER         reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    DNUMBER         reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    LIT_CHAR        reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    LIT_STR         reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    TRUE            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    FALSE           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    OPERATOR        reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    CLASS           reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)
    ELSE            reduce using rule 122 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)


state 444

    (128) iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .

    IDENTIFIER      reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    LBRACE          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    PRINT           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    SCAN            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    MALLOC          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    INLINE          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    BOOL            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    PLUS_PLUS       reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    MINUS_MINUS     reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    EXCLAMATION     reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    TILDE           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    TIMES           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    AMPERSAND       reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    PLUS            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    MINUS           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    INUMBER         reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    DNUMBER         reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    LIT_CHAR        reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    LIT_STR         reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    TRUE            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    FALSE           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    RBRACE          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 128 (iteration_statement -> FOR LPAREN for_init_statement condition SEMICOLON expression RPAREN statement .)

